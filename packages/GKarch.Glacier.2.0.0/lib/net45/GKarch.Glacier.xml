<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GKarch.Glacier</name>
    </assembly>
    <members>
        <member name="T:GKarch.Glacier.Configuration.AppSettingsConfig">
            <summary>
            默认配置实现，使用<see cref="P:System.Configuration.ConfigurationManager.AppSettings"/>
            </summary>
            <remarks>注册到<see cref="T:GKarch.Glacier.Configuration.IConfigProvider"/>，连同默认配置文件内的hocon节点，共同名为'.default'</remarks>
        </member>
        <member name="M:GKarch.Glacier.Configuration.AppSettingsConfig.#ctor(System.String)">
            <summary>
            创建 <see cref="T:GKarch.Glacier.Configuration.AppSettingsConfig"/> 的实例
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Configuration.AppSettingsConfig.#ctor">
            <summary>
            创建 <see cref="T:GKarch.Glacier.Configuration.AppSettingsConfig"/> 的实例
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Configuration.AppSettingsConfig.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.AppSettingsConfig.Set(System.String,GKarch.Glacier.Configuration.IConfigValue)">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Configuration.AppSettingsConfig.AllKeys">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.AppSettingsConfig.Reload">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Configuration.ConfigurationExtensions">
            <summary>
            配置扩展方法
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigurationExtensions.AddAppSettingsConfig(GKarch.Glacier.ICore,System.String)">
            <summary>
            添加<paramref name="prefix"/>前缀下的<see cref="P:System.Configuration.ConfigurationManager.AppSettings"/>配置
            </summary>
            <param name="core">Glacier 核心</param>
            <param name="prefix">前缀</param>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigurationExtensions.GetConfig(GKarch.Glacier.ICore)">
            <summary>
            获取顶层配置
            </summary>
            <param name="core">核心</param>
            <returns>顶层配置</returns>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigurationExtensions.GetConfig(GKarch.Glacier.ICore,System.String)">
            <summary>
            获取配置
            </summary>
            <param name="core">核心</param>
            <param name="key">键</param>
            <returns>键对应的配置</returns>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigurationExtensions.Get(GKarch.Glacier.Configuration.IConfigProvider,System.String)">
            <summary>
            获取配置
            </summary>
            <param name="provider">配置提供器</param>
            <param name="key">键</param>
            <returns>值。如果指定键没有对应值，则返回<c>null</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigurationExtensions.Set(GKarch.Glacier.Configuration.IConfigProvider,System.String,GKarch.Glacier.Configuration.ConfigValue)">
            <summary>
            设置配置
            </summary>
            <param name="provider">配置提供器</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="T:GKarch.Glacier.Configuration.ConfigBase">
            <summary>
            配置基类，提供配置的基础功能，配置实现可由此继承
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Configuration.ConfigBase.Value">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Configuration.ConfigBase.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBase.Get(System.String)">
            <summary>
            Gets the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBase.Set(System.String,GKarch.Glacier.Configuration.IConfigValue)">
            <summary>
            设置键对应的值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBase.GetSub(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBase.GetSubKeys(System.String)">
            <inheritdoc />
            <remarks>如果配置可以完全加载时，重载<see cref="P:GKarch.Glacier.Configuration.ConfigBase.AllKeys"/>会更加方便</remarks>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBase.GetSubs(System.String)">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Configuration.ConfigBase.AllKeys">
            <summary>
            获取所有键
            </summary>
            <remarks>配置可以完全加载时可以重载此方法，比重载<see cref="M:GKarch.Glacier.Configuration.ConfigBase.GetSubKeys(System.String)"/>更加方便</remarks>
            <value>所有键</value>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBase.Reload">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBase.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBase.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Configuration.ConfigBase.GKarch#Glacier#Configuration#IConfigProvider#Config">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBase.GKarch#Glacier#Configuration#IConfigProvider#GetConfig(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBase.GKarch#Glacier#Configuration#IConfigProvider#Commit">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigurationBinderExtensions.Bind``1(GKarch.Glacier.Configuration.IConfig)">
            <summary>
            通过配置创建<typeparamref name="T"/>类型的对象并赋值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="config">配置</param>
            <returns>
            创建并赋值的<typeparamref name="T"/>类型对象，
            若<paramref name="config"/>节点无值也无子节点，则返回<c>null</c>
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigurationBinderExtensions.Bind(GKarch.Glacier.Configuration.IConfig,System.Type)">
            <summary>
            通过配置创建<paramref name="type"/>类型的对象并赋值
            </summary>
            <param name="config">配置</param>
            <param name="type">对象类型</param>
            <returns>
            创建并赋值的<paramref name="type"/>类型对象，
            若<paramref name="config"/>节点无值也无子节点，则返回<c>null</c>
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigurationBinderExtensions.Bind``1(GKarch.Glacier.Configuration.IConfig,``0)">
            <summary>
            通过配置为<paramref name="instance"/>对象赋值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="config">配置</param>
            <param name="instance">对象实例</param>
            <returns>赋值后的<paramref name="instance"/>对象</returns>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigurationBinderExtensions.Bind(GKarch.Glacier.Configuration.IConfig,System.Object)">
            <summary>
            通过配置为<paramref name="instance"/>对象赋值
            </summary>
            <param name="config">配置</param>
            <param name="instance">对象实例</param>
            <returns>赋值后的<paramref name="instance"/>对象</returns>
        </member>
        <member name="T:GKarch.Glacier.Configuration.ConfigBinder.Context">
            <summary>
            binder context
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Configuration.ConfigBinder.Context.type">
            <summary>request type</summary>
        </member>
        <member name="F:GKarch.Glacier.Configuration.ConfigBinder.Context.instance">
            <summary>target instance</summary>
        </member>
        <member name="F:GKarch.Glacier.Configuration.ConfigBinder.Context.config">
            <summary>config</summary>
        </member>
        <member name="F:GKarch.Glacier.Configuration.ConfigBinder.Context.val">
            <summary>config.Value</summary>
        </member>
        <member name="F:GKarch.Glacier.Configuration.ConfigBinder.Context.children">
            <summary>config.Children</summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.ConfigBranch">
            <summary>
            配置树分支
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBranch.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBranch.Set(System.String,GKarch.Glacier.Configuration.IConfigValue)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigBranch.GetSub(System.String)">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Configuration.ConfigContainer">
            <summary>
            Used by <see cref="T:GKarch.Glacier.Configuration.ConfigProviderContainer"/> as root configuration
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.ConfigRoot">
            <summary>
            配置组合根
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.GlobalConfigRoot">
            <summary>
            全局配置组合根
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.EnvironmentVariablesConfig">
            <summary>
            使用环境变量的配置，使用<see cref="M:System.Environment.GetEnvironmentVariables"/>
            </summary>
            <remarks>注册到<see cref="T:GKarch.Glacier.Configuration.IConfigProvider"/>，名为'env'</remarks>
        </member>
        <member name="M:GKarch.Glacier.Configuration.EnvironmentVariablesConfig.#ctor(System.String)">
            <summary>
            创建 <see cref="T:GKarch.Glacier.Configuration.EnvironmentVariablesConfig"/> 的实例
            </summary>
            <param name="prefix">前缀，表示仅获取以该前缀开始的环境变量</param>
        </member>
        <member name="M:GKarch.Glacier.Configuration.EnvironmentVariablesConfig.#ctor">
            <summary>
            创建 <see cref="T:GKarch.Glacier.Configuration.EnvironmentVariablesConfig"/> 的实例
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Configuration.EnvironmentVariablesConfig.Load">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Configuration.HoconConfig">
            <summary>
            使用 HOCON 方式的配置
            </summary>
            <remarks>注册到<see cref="T:GKarch.Glacier.Configuration.IConfigProvider"/>，名为'hocon'</remarks>
        </member>
        <member name="T:GKarch.Glacier.Configuration.HoconSection">
            <summary>
            This class represents a custom glacier node within a configuration file.
            <code>
            <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
              <configSections>
                <section name="glacier" type="GKarch.Glacier.Configuration.HoconSection, GKarch.Glacier" />
              </configSections>
              <glacier>
              ...
              </glacier>
            </configuration>
            ]]>
            </code>
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Configuration.HoconSection.Content">
            <summary>
            Gets or sets the HOCON configuration string contained in the hocon node.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.IConfig">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Configuration.IConfig.Item(System.String)">
            <summary>
            获取/设置指定键的配置值
            </summary>
            <param name="key">键</param>
            <returns>值。若指定键下没有值，则返回<c>null</c></returns>
            <remarks>键可以为<c>null</c>，表示获该实例对应的值。</remarks>
        </member>
        <member name="M:GKarch.Glacier.Configuration.IConfig.GetSub(System.String)">
            <summary>
            获取指定键对应的配置
            </summary>
            <param name="key">键</param>
            <returns>该键对应的配置</returns>
        </member>
        <member name="M:GKarch.Glacier.Configuration.IConfig.GetSubKeys(System.String)">
            <summary>
            获取指定键下的所有子键
            </summary>
            <param name="key">键</param>
            <returns>该键下的子键</returns>
            <remarks>键可以为<c>null</c>，表示获取该实例下的所有子键。</remarks>
        </member>
        <member name="M:GKarch.Glacier.Configuration.IConfig.GetSubs(System.String)">
            <summary>
            获取指定键下的子键和对应的配置
            </summary>
            <param name="key">键</param>
            <returns>该键下的子键和对应的配置</returns>
            <remarks>键可以为<c>null</c>，表示获取该实例下的所有子键和对应的配置。</remarks>
        </member>
        <member name="M:GKarch.Glacier.Configuration.IConfig.Reload">
            <summary>
            重新加载配置
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.IConfigProvider">
            <summary>
            配置提供器，加载、提供配置
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Configuration.IConfigProvider.Config">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Configuration.IConfigProvider.GetConfig(System.String)">
            <summary>
            获取配置
            </summary>
            <param name="key">键</param>
            <returns>配置</returns>
        </member>
        <member name="M:GKarch.Glacier.Configuration.IConfigProvider.Commit">
            <summary>
            提交配置数据，进行保存
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.IChangeTrackingConfigProvider">
            <summary>
            可以追踪配置改动的配置提供器
            </summary>
        </member>
        <member name="E:GKarch.Glacier.Configuration.IChangeTrackingConfigProvider.Changing">
            <summary>
            配置变化开始事件
            </summary>
        </member>
        <member name="E:GKarch.Glacier.Configuration.IChangeTrackingConfigProvider.Changed">
            <summary>
            配置变化结束事件
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.ICommitableConfig">
            <summary>
            可提交的配置
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ICommitableConfig.Commit">
            <summary>
            提交配置数据，进行保存
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.ConfigChangingEventArgs">
            <summary>
            配置变化开始事件参数
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Configuration.ConfigChangingEventArgs.Exception">
            <summary>
            新配置加载异常
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Configuration.ConfigChangingEventArgs.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.ConfigChangedEventArgs">
            <summary>
            配置变化结束事件参数
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Configuration.ConfigChangedEventArgs.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.IConfigProviderContainer">
            <summary>
            配置提供器容器，容纳多个配置提供器
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Configuration.IConfigProviderContainer.Add(GKarch.Glacier.Configuration.IConfigProvider,System.Int32)">
            <summary>
            添加配置提供器
            </summary>
            <param name="provider">配置提供器</param>
            <param name="priority">优先级</param>
            <returns>该配置提供器容器，便于继续添加</returns>
        </member>
        <member name="T:GKarch.Glacier.Configuration.ConfigProviderContainer">
            <summary>
            默认配置提供器的容器
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigProviderContainer.#ctor">
            <summary>
            创建 <see cref="T:GKarch.Glacier.Configuration.ConfigProviderContainer"/> 的实例
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigProviderContainer.#ctor(System.Collections.Generic.IEnumerable{GKarch.Glacier.Configuration.IConfigProvider})">
            <summary>
            创建 <see cref="T:GKarch.Glacier.Configuration.ConfigProviderContainer"/> 的实例
            </summary>
            <param name="providers">配置提供器</param>
        </member>
        <member name="P:GKarch.Glacier.Configuration.ConfigProviderContainer.Config">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigProviderContainer.GetConfig(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigProviderContainer.Commit">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigProviderContainer.Add(GKarch.Glacier.Configuration.IConfigProvider,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigProviderContainer.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.ConfigProviderContainer.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Configuration.IConfigValue">
            <summary>
            配置值
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Configuration.IConfigValue.Type">
            <summary>
            配置值的类型
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Configuration.IConfigValue.Value">
            <summary>
            值对象
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.ConfigValueType">
            <summary>
            配置值的类型
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Configuration.ConfigValueType.Null">
            <summary>空</summary>
        </member>
        <member name="F:GKarch.Glacier.Configuration.ConfigValueType.Boolean">
            <summary>布尔值</summary>
        </member>
        <member name="F:GKarch.Glacier.Configuration.ConfigValueType.Number">
            <summary>数字</summary>
        </member>
        <member name="F:GKarch.Glacier.Configuration.ConfigValueType.String">
            <summary>字符串</summary>
        </member>
        <member name="F:GKarch.Glacier.Configuration.ConfigValueType.Array">
            <summary>数组</summary>
        </member>
        <member name="F:GKarch.Glacier.Configuration.ConfigValueType.Object">
            <summary>对象（字典）</summary>
        </member>
        <member name="T:GKarch.Glacier.Configuration.ConfigValue">
            <summary>
            配置值基类
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Configuration.ConfigValue.Type">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Configuration.ConfigValue.Value">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Configuration.IniFileConfig">
            <summary>
            使用ini文件的配置
            </summary>
            <remarks>注册到<see cref="T:GKarch.Glacier.Configuration.IConfigProvider"/>，名为'ini'</remarks>
        </member>
        <member name="M:GKarch.Glacier.Configuration.IniFileConfig.#ctor(System.String)">
            <summary>
            创建 <see cref="T:GKarch.Glacier.Configuration.IniFileConfig"/> 的实例
            </summary>
            <param name="path">ini文件路径</param>
        </member>
        <member name="M:GKarch.Glacier.Configuration.IniFileConfig.Load">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.IniFileConfig.Commit">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Configuration.MemoryConfig">
            <summary>
            内存中的配置，使用<see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <remarks>
            <para>注册到<see cref="T:GKarch.Glacier.Configuration.IConfigProvider"/>，名为'memory'。</para>
            <para>此类也作为使用<c>Dictionary&lt;string, ConfigurationValue></c>方式的配置的基类。</para>
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Configuration.MemoryConfig.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,GKarch.Glacier.Configuration.IConfigValue}})">
            <summary>
            创建 <see cref="T:GKarch.Glacier.Configuration.MemoryConfig"/> 的实例
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:GKarch.Glacier.Configuration.MemoryConfig.#ctor">
            <summary>
            创建 <see cref="T:GKarch.Glacier.Configuration.MemoryConfig"/> 的实例
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Configuration.MemoryConfig.Load">
            <summary>
            加载配置
            </summary>
            <returns>字典（字符串键值对）形式的配置</returns>
            <remarks>建议使用大小写无关的方式，比如通过<see cref="P:System.StringComparer.OrdinalIgnoreCase"/>来创建字典。</remarks>
        </member>
        <member name="M:GKarch.Glacier.Configuration.MemoryConfig.Reload">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.MemoryConfig.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Configuration.MemoryConfig.Set(System.String,GKarch.Glacier.Configuration.IConfigValue)">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Configuration.MemoryConfig.AllKeys">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Container.InjectAttribute">
            <summary>
            Indicates a required property dependency or a named constructor dependency.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.InjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.InjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.InjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.InjectAttribute"/> class.
            </summary>
            <param name="serviceName">The name of the service to be injected.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.InjectAttribute.ServiceName">
            <summary>
            Gets the name of the service to be injected.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.AnnotationExtension">
            <summary>
            Extends the <see cref="T:GKarch.Glacier.Container.ServiceContainer"/> class with methods for enabling
            annotated property/constructor injection.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.AnnotationExtension.EnableAnnotatedPropertyInjection(GKarch.Glacier.Container.ServiceContainer)">
            <summary>
            Enables annotated property injection.
            </summary>
            <param name="serviceContainer">The target <see cref="T:GKarch.Glacier.Container.ServiceContainer"/>
            for which to enable annotated property injection.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.AnnotationExtension.EnableAnnotatedConstructorInjection(GKarch.Glacier.Container.ServiceContainer)">
            <summary>
            Enables annotated constructor injection.
            </summary>
            <param name="serviceContainer">The target <see cref="T:GKarch.Glacier.Container.ServiceContainer"/>
            for which to enable annotated constructor injection.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.AnnotatedPropertyDependencySelector">
            <summary>
            An <see cref="T:GKarch.Glacier.Container.IPropertyDependencySelector"/> that uses the <see cref="T:GKarch.Glacier.Container.InjectAttribute"/>
            to determine which properties to inject dependencies.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.AnnotatedPropertyDependencySelector.#ctor(GKarch.Glacier.Container.IPropertySelector)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.AnnotatedPropertyDependencySelector"/> class.
            </summary>
            <param name="propertySelector">The <see cref="T:GKarch.Glacier.Container.IPropertySelector"/> that is 
            responsible for selecting a list of injectable properties.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.AnnotatedPropertyDependencySelector.Execute(System.Type)">
            <summary>
            Selects the property dependencies for the given <paramref name="type"/> 
            that is annotated with the <see cref="T:GKarch.Glacier.Container.InjectAttribute"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the property dependencies.</param>
            <returns>A list of <see cref="T:GKarch.Glacier.Container.PropertyDependency"/> instances that represents the property
            dependencies for the given <paramref name="type"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.AnnotatedConstructorDependencySelector">
            <summary>
            A <see cref="T:GKarch.Glacier.Container.ConstructorDependencySelector"/> that looks for the <see cref="T:GKarch.Glacier.Container.InjectAttribute"/> 
            to determine the name of service to be injected.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.AnnotatedConstructorDependencySelector.Execute(System.Reflection.ConstructorInfo)">
            <summary>
            Selects the constructor dependencies for the given <paramref name="constructor"/>.
            </summary>
            <param name="constructor">The <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> for which to select the constructor dependencies.</param>
            <returns>A list of <see cref="T:GKarch.Glacier.Container.ConstructorDependency"/> instances that represents the constructor
            dependencies for the given <paramref name="constructor"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.AnnotatedConstructorSelector">
            <summary>
            A <see cref="T:GKarch.Glacier.Container.IConstructorSelector"/> implementation that uses information 
            from the <see cref="T:GKarch.Glacier.Container.InjectAttribute"/> to determine if a given service can be resolved.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.AnnotatedConstructorSelector.#ctor(System.Func{System.Type,System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.AnnotatedConstructorSelector"/> class.
            </summary>
            <param name="canGetInstance">A function delegate that determines if a service type can be resolved.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.AnnotatedConstructorSelector.GetServiceName(System.Reflection.ParameterInfo)">
            <summary>
            Gets the service name based on the given <paramref name="parameter"/>.
            </summary>
            <param name="parameter">The <see cref="T:System.Reflection.ParameterInfo"/> for which to get the service name.</param>
            <returns>The name of the service for the given <paramref name="parameter"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.GetInstanceDelegate">
            <summary>
            A delegate that represent the dynamic method compiled to resolved service instances.
            </summary>
            <param name="args">The arguments used by the dynamic method that this delegate represents.</param>
            <returns>A service instance.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IServiceRegistry">
            <summary>
            定义了一组用于对IoC容器注册服务的方法
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.IServiceRegistry.AvailableServices">
            <summary>
            获取一组代表已注册服务的服务注册信息，见<see cref="T:GKarch.Glacier.Container.ServiceRegistration"/>。
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register(System.Type,System.Type)">
            <summary>
            使用类型为<paramref name="implementingType"/>的实现类型，注册类型为<paramref name="serviceType"/>的服务。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="implementingType">实现类型</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register(System.Type,System.Type,GKarch.Glacier.Container.ILifetime)">
            <summary>
            使用类型为<paramref name="implementingType"/>的实现类型，注册类型为<paramref name="serviceType"/>的服务。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="implementingType">实现类型</param>
            <param name="lifetime">用于管理注册服务的生命周期，见<see cref="T:GKarch.Glacier.Container.ILifetime"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register(System.Type,System.Type,System.String)">
            <summary>
            使用类型为<paramref name="implementingType"/>的实现类型，注册类型为<paramref name="serviceType"/>的服务。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="implementingType">实现类型</param>
            <param name="serviceName">服务名称</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register(System.Type,System.Type,System.String,GKarch.Glacier.Container.ILifetime)">
            <summary>
            使用类型为<paramref name="implementingType"/>的实现类型，注册类型为<paramref name="serviceType"/>的服务。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="implementingType">实现类型</param>
            <param name="serviceName">服务名称</param>
            <param name="lifetime">用于管理注册服务的生命周期，见<see cref="T:GKarch.Glacier.Container.ILifetime"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``2">
            <summary>
            使用类型为<typeparamref name="TImplementation"/>的实现类型，注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``2(GKarch.Glacier.Container.ILifetime)">
            <summary>
            使用类型为<typeparamref name="TImplementation"/>的实现类型，注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="lifetime">用于管理注册服务的生命周期，见<see cref="T:GKarch.Glacier.Container.ILifetime"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``2(System.String)">
            <summary>
            使用类型为<typeparamref name="TImplementation"/>的实现类型，注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="serviceName">服务名称</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``2(System.String,GKarch.Glacier.Container.ILifetime)">
            <summary>
            使用类型为<typeparamref name="TImplementation"/>的实现类型，注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="serviceName">服务名称</param>
            <param name="lifetime">用于管理注册服务的生命周期，见<see cref="T:GKarch.Glacier.Container.ILifetime"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterInstance``1(``0)">
            <summary>
            使用特定的实例<paramref name="instance"/>，注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="instance">服务被请求时返回的实例</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterInstance``1(``0,System.String)">
            <summary>
            使用特定的实例<paramref name="instance"/>，注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="instance">服务被请求时返回的实例</param>
            <param name="serviceName">服务名称</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterInstance(System.Type,System.Object)">
            <summary>
            使用特定的实例<paramref name="instance"/>，注册类型为<paramref name="serviceType"/>的服务。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="instance">服务被请求时返回的实例</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            使用特定的实例<paramref name="instance"/>，注册类型为<paramref name="serviceType"/>的服务。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="instance">服务被请求时返回的实例</param>
            <param name="serviceName">服务名称</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``1">
            <summary>
            将一个具体类型注册为服务。
            </summary>
            <typeparam name="TService">需注册为服务的具体类型</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``1(GKarch.Glacier.Container.ILifetime)">
            <summary>
            将一个具体类型注册为服务。
            </summary>
            <typeparam name="TService">需注册为服务的具体类型</typeparam>
            <param name="lifetime">用于管理注册服务的生命周期，见<see cref="T:GKarch.Glacier.Container.ILifetime"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register(System.Type)">
            <summary>
            将一个具体类型注册为服务。
            </summary>
            <param name="serviceType">需注册为服务的具体类型</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register(System.Type,GKarch.Glacier.Container.ILifetime)">
            <summary>
            将一个具体类型注册为服务。
            </summary>
            <param name="serviceType">需注册为服务的具体类型</param>
            <param name="lifetime">用于管理注册服务的生命周期，见<see cref="T:GKarch.Glacier.Container.ILifetime"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``1(System.Func{GKarch.Glacier.Container.IServiceFactory,``0})">
            <summary>
            通过工厂方法<paramref name="factory"/>，注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法，用于创建服务类型为<typeparamref name="TService"/>的实例</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``2(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1})">
            <summary>
            通过工厂方法<paramref name="factory"/>，注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法，用于创建服务类型为<typeparamref name="TService"/>的实例</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``2(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1},System.String)">
            <summary>
            通过工厂方法<paramref name="factory"/>，注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法表达式，用于创建服务类型为<typeparamref name="TService"/>的实例</param>
            <param name="serviceName">服务名称</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``3(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2})">
            <summary>
            通过工厂方法<paramref name="factory"/>，注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法，用于创建服务类型为<typeparamref name="TService"/>的实例</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``3(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2},System.String)">
            <summary>
            通过工厂方法<paramref name="factory"/>，注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>        
            <param name="factory">工厂方法，用于创建服务类型为<typeparamref name="TService"/>的实例</param>
            <param name="serviceName">服务名称</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``4(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2,``3})">
            <summary>
            通过工厂方法<paramref name="factory"/>来注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法，用于创建服务类型为<typeparamref name="TService"/>的实例</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``4(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2,``3},System.String)">
            <summary>
            通过工厂方法表达式<paramref name="factory"/>来注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法，用于创建服务类型为<typeparamref name="TService"/>的实例</param>
            <param name="serviceName">服务名称</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``5(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2,``3,``4})">
            <summary>
            通过工厂方法<paramref name="factory"/>来注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法，用于创建服务类型为<typeparamref name="TService"/>的实例</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``5(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2,``3,``4},System.String)">
            <summary>
            通过工厂方法<paramref name="factory"/>来注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法，用于创建服务类型为<typeparamref name="TService"/>的实例</param>
            <param name="serviceName">服务名称</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``1(System.Func{GKarch.Glacier.Container.IServiceFactory,``0},GKarch.Glacier.Container.ILifetime)">
            <summary>
            通过工厂方法<paramref name="factory"/>来注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法，用于创建服务实例</param>
            <param name="lifetime">用于管理注册服务的生命周期，见<see cref="T:GKarch.Glacier.Container.ILifetime"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``1(System.Func{GKarch.Glacier.Container.IServiceFactory,``0},System.String)">
            <summary>
            通过工厂方法<paramref name="factory"/>来注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法，用于创建服务实例</param>
            <param name="serviceName">服务名称</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register``1(System.Func{GKarch.Glacier.Container.IServiceFactory,``0},System.String,GKarch.Glacier.Container.ILifetime)">
            <summary>
            通过工厂方法<paramref name="factory"/>来注册类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法，用于创建服务实例</param>
            <param name="serviceName">服务名称</param>
            <param name="lifetime">用于管理注册服务的生命周期，见<see cref="T:GKarch.Glacier.Container.ILifetime"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{GKarch.Glacier.Container.ServiceRequest,System.Object})">
            <summary>
            通过自定义的工厂方法来创建未注册的服务 
            </summary>
            <param name="predicate">判断是否要通过工厂方法委托<paramref name="factory"/>创建</param>
            <param name="factory">通过工厂方法创建服务实例</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{GKarch.Glacier.Container.ServiceRequest,System.Object},GKarch.Glacier.Container.ILifetime)">
            <summary>
            通过自定义的工厂方法来创建未注册的服务 
            </summary>
            <param name="predicate">判断是否要通过工厂方法<paramref name="factory"/>创建</param>
            <param name="factory">通过工厂方法创建服务实例</param>
            <param name="lifetime">用于管理注册服务的生命周期，见<see cref="T:GKarch.Glacier.Container.ILifetime"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Register(GKarch.Glacier.Container.ServiceRegistration)">
            <summary>
            通过服务注册信息<see cref="T:GKarch.Glacier.Container.ServiceRegistration"/>注册服务。
            </summary>
            <param name="serviceRegistration">包含服务元数据的服务注册信息，见<see cref="T:GKarch.Glacier.Container.ServiceRegistration"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            通过程序集<paramref name="assembly"/>注册服务。
            </summary>
            <param name="assembly">程序集</param>        
            <remarks>
            如果目标程序集<paramref name="assembly"/>包含了接口<see cref="T:GKarch.Glacier.Container.ICompositionRoot"/>的实现，则该组合根将被用于配置容器。
            </remarks>     
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            通过程序集<paramref name="assembly"/>注册服务。
            </summary>
            <param name="assembly">程序集</param>
            <param name="shouldRegister">工厂方法委托，用于确定是否一个服务的实现应当被注册</param>
            <remarks>
            如果目标程序集<paramref name="assembly"/>包含了接口<see cref="T:GKarch.Glacier.Container.ICompositionRoot"/>的实现，则该组合根将被用于配置容器。
            </remarks>     
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{GKarch.Glacier.Container.ILifetime})">
            <summary>
            通过程序集<paramref name="assembly"/>注册服务。
            </summary>
            <param name="assembly">程序集</param>
            <param name="lifetimeFactory">用于管理注册服务的生命周期的工厂方法，见<see cref="T:GKarch.Glacier.Container.ILifetime"/></param>
            <remarks>
            如果目标程序集<paramref name="assembly"/>包含了接口<see cref="T:GKarch.Glacier.Container.ICompositionRoot"/>的实现，则该组合根将被用于配置容器。
            </remarks>     
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterAssembly(System.Reflection.Assembly,System.Func{GKarch.Glacier.Container.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            通过程序集<paramref name="assembly"/>注册服务。
            </summary>
            <param name="assembly">程序集</param>
            <param name="lifetimeFactory">用于管理注册服务生命周期对象的工厂方法，见<see cref="T:GKarch.Glacier.Container.ILifetime"/></param>
            <param name="shouldRegister">工厂方法委托，用于确定一个类型是否应当被注册</param>
            <remarks>
            如果目标程序集<paramref name="assembly"/>包含了接口<see cref="T:GKarch.Glacier.Container.ICompositionRoot"/>的实现，则该组合根将被用于配置容器。
            </remarks>     
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterFrom``1">
            <summary>
            通过组合根<typeparamref name="TCompositionRoot"/>注册服务。
            </summary>
            <typeparam name="TCompositionRoot">组合根</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterConstructorDependency``1(System.Func{GKarch.Glacier.Container.IServiceFactory,System.Reflection.ParameterInfo,``0})">
            <summary>
            注册一个工厂方法，当解析构造方法的依赖时使用。
            </summary>
            <typeparam name="TDependency">依赖类型</typeparam>
            <param name="factory">用于创建依赖实例的工厂方法</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterConstructorDependency``1(System.Func{GKarch.Glacier.Container.IServiceFactory,System.Reflection.ParameterInfo,System.Object[],``0})">
            <summary>
            注册一个工厂方法，当解析构造方法的依赖时使用。
            </summary>
            <typeparam name="TDependency">依赖类型</typeparam>
            <param name="factory">用于创建依赖实例的工厂方法</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterPropertyDependency``1(System.Func{GKarch.Glacier.Container.IServiceFactory,System.Reflection.PropertyInfo,``0})">
            <summary>
            注册一个工厂方法，当解析属性的依赖时使用。
            </summary>
            <typeparam name="TDependency">依赖类型</typeparam>
            <param name="factory">用于创建依赖实例的工厂方法</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.RegisterAssembly(System.String)">
            <summary>
            从通配符<paramref name="searchPattern"/>匹配的程序集中注册组合根。
            </summary>
            <param name="searchPattern">通配符，用以筛选需要的程序集文件</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Decorate(System.Type,System.Type,System.Func{GKarch.Glacier.Container.ServiceRegistration,System.Boolean})">
            <summary>
            通过装饰器类型<paramref name="decoratorType"/>来装饰类型为<paramref name="serviceType"/>的服务。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="decoratorType">装饰器类型<paramref name="serviceType"/></param>
            <param name="predicate">服务注册信息选择器，判断是否将装饰器类型<paramref name="decoratorType"/>应用到目标服务<paramref name="serviceType"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Decorate(System.Type,System.Type)">
            <summary>
            通过装饰器类型<paramref name="decoratorType"/>来装饰类型为<paramref name="serviceType"/>的服务。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="decoratorType">装饰器类型<paramref name="serviceType"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Decorate``2">
            <summary>
            通过装饰器类型<typeparamref name="TDecorator"/>来装饰类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TDecorator">装饰器类型<typeparamref name="TService"/></typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Decorate``1(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``0})">
            <summary>
            通过装饰器工厂方法<paramref name="factory"/>来装饰类型为<typeparamref name="TService"/>的服务。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="factory">工厂方法，用于创建装饰器实例</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Decorate(GKarch.Glacier.Container.DecoratorRegistration)">
            <summary>
            通过装饰器注册信息<see cref="T:GKarch.Glacier.Container.DecoratorRegistration"/>注册装饰器。
            </summary>
            <param name="decoratorRegistration">装饰器信息，见<see cref="T:GKarch.Glacier.Container.DecoratorRegistration"/></param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Override(System.Func{GKarch.Glacier.Container.ServiceRegistration,System.Boolean},System.Func{GKarch.Glacier.Container.IServiceFactory,GKarch.Glacier.Container.ServiceRegistration,GKarch.Glacier.Container.ServiceRegistration})">
            <summary>
            允许使用其他的服务注册信息<see cref="T:GKarch.Glacier.Container.ServiceRegistration"/>进行覆盖。
            </summary>
            <param name="serviceSelector">服务选择器，它来确定哪些服务需要被<paramref name="serviceRegistrationFactory"/>返回的服务注册信息<see cref="T:GKarch.Glacier.Container.ServiceRegistration"/>覆盖</param>
            <param name="serviceRegistrationFactory">服务注册信息工厂，用于创建新的服务注册信息<see cref="T:GKarch.Glacier.Container.ServiceRegistration"/>来进行覆盖</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.Initialize(System.Func{GKarch.Glacier.Container.ServiceRegistration,System.Boolean},System.Action{GKarch.Glacier.Container.IServiceFactory,System.Object})">
            <summary>
            允许在服务实例被创建后进行初始化。
            </summary>
            <param name="predicate">服务选择器，它来确定哪些服务需要在实例被创建后使用<paramref name="processor"/>进行初始化处理</param>
            <param name="processor">处理器，用来对服务实例进行初始化处理</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceRegistry.SetDefaultLifetime``1">
            <summary>
            Sets the default lifetime for types registered without an explicit lifetime. Will only affect new registrations (after this call).
            </summary>
            <typeparam name="T">The default lifetime type</typeparam>
        </member>
        <member name="T:GKarch.Glacier.Container.IServiceFactory">
            <summary>
            定义了一组用于获取服务实例的方法
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.BeginScope">
            <summary>
            开启一个新的作用域 <see cref="T:GKarch.Glacier.Container.Scope"/>。
            </summary>
            <returns><see cref="T:GKarch.Glacier.Container.Scope"/></returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.EndCurrentScope">
            <summary>
            结束当前作用域<see cref="T:GKarch.Glacier.Container.Scope"/>。
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance(System.Type)">
            <summary>
            获取服务类型为<paramref name="serviceType"/>的实例。
            </summary>
            <param name="serviceType">服务类型</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance(System.Type,System.Object[])">
            <summary>
            获取服务类型为<paramref name="serviceType"/>的实例。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="arguments">需传递给实例的参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance(System.Type,System.String,System.Object[])">
            <summary>
            获取指定名称且服务类型为<paramref name="serviceType"/>的实例。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="serviceName">服务名称</param>
            <param name="arguments">需传递给实例的参数</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance(System.Type,System.String)">
            <summary>
            获取指定名称且服务类型为<paramref name="serviceType"/>的实例。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="serviceName">服务名称</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance``1">
            <summary>
            获取服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance``1(System.String)">
            <summary>
            获取指定名称且服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="serviceName">服务名称</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance``2(``0)">
            <summary>
            获取服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="value">参数值</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance``2(``0,System.String)">
            <summary>
            获取指定名称且服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="value">参数值</param>
            <param name="serviceName">服务名称</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance``3(``0,``1)">
            <summary>
            获取服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="arg1">第一个参数值</param>
            <param name="arg2">第二个参数值</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance``3(``0,``1,System.String)">
            <summary>
            获取指定名称且服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="arg1">第一个参数值</param>
            <param name="arg2">第二个参数值</param>
            <param name="serviceName">服务名称</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance``4(``0,``1,``2)">
            <summary>
            获取服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="arg1">第一个参数值</param>
            <param name="arg2">第二个参数值</param>
            <param name="arg3">第三个参数值</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance``4(``0,``1,``2,System.String)">
            <summary>
            获取指定名称且服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam>
            <param name="arg1">第一个参数值</param>
            <param name="arg2">第二个参数值</param>
            <param name="arg3">第三个参数值</param>
            <param name="serviceName">服务名称</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance``5(``0,``1,``2,``3)">
            <summary>
            获取服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam> 
            <param name="arg1">第一个参数值</param>
            <param name="arg2">第二个参数值</param>
            <param name="arg3">第三个参数值</param>
            <param name="arg4">第四个参数值</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetInstance``5(``0,``1,``2,``3,System.String)">
            <summary>
            获取指定名称且服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="TService">服务类型</typeparam> 
            <param name="arg1">第一个参数值</param>
            <param name="arg2">第二个参数值</param>
            <param name="arg3">第三个参数值</param>
            <param name="arg4">第四个参数值</param>
            <param name="serviceName">服务名称</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.TryGetInstance(System.Type)">
            <summary>
            尝试获取服务类型为<paramref name="serviceType"/>的实例。
            </summary>
            <param name="serviceType">服务类型</param>
            <returns>如果能够获取服务实例，则返回服务实例，否则返回<c>null</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.TryGetInstance(System.Type,System.String)">
            <summary>
            尝试获取指定名称且服务类型为<paramref name="serviceType"/>的实例。
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="serviceName">服务名称</param>
            <returns>如果能够获取服务实例，则返回服务实例，否则返回<c>null</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.TryGetInstance``1">
            <summary>
            尝试获取服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <returns>如果能够获取服务实例，则返回服务实例，否则返回default(T)</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.TryGetInstance``1(System.String)">
            <summary>
            尝试获取指定名称且服务类型为<typeparamref name="TService"/>的实例。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="serviceName">服务名称</param>
            <returns>如果能够获取服务实例，则返回服务实例，否则返回default(T)</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetAllInstances(System.Type)">
            <summary>
            获取服务类型为<paramref name="serviceType"/>的所有实例。
            </summary>
            <param name="serviceType">服务类型</param>
            <returns>服务类型为<paramref name="serviceType"/>的实现集合</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.GetAllInstances``1">
            <summary>
            获取服务类型为<typeparamref name="TService"/>的所有实例。
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <returns>服务类型为<typeparamref name="TService"/>的实现集合</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.Create``1">
            <summary>
            创建具体类的实例。
            </summary>
            <typeparam name="TService">具体类的类型</typeparam>
            <returns>类型为<typeparamref name="TService"/>的实例</returns>
            <remarks>如果指定的具体类没有注册，它将被注册</remarks>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceFactory.Create(System.Type)">
            <summary>
            创建具体类的实例。
            </summary>
            <param name="serviceType">具体类的类型</param>
            <returns>类型为<paramref name="serviceType"/>的实例</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IServiceContainer">
            <summary>
            Represents an inversion of control container.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.IServiceContainer.ScopeManagerProvider">
            <summary>
            Gets or sets the <see cref="T:GKarch.Glacier.Container.IScopeManagerProvider"/> that is responsible
            for providing the <see cref="T:GKarch.Glacier.Container.ScopeManager"/> used to manage scopes.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceContainer.CanGetInstance(System.Type,System.String)">
            <summary>
            Returns <b>true</b> if the container can create the requested service, otherwise <b>false</b>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <returns><b>true</b> if the container can create the requested service, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceContainer.InjectProperties(System.Object)">
            <summary>
            Injects the property dependencies for a given <paramref name="instance"/>.
            </summary>
            <param name="instance">The target instance for which to inject its property dependencies.</param>
            <returns>The <paramref name="instance"/> with its property dependencies injected.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IServiceContainer.Clone">
            <summary>
            Creates a clone of the current <see cref="T:GKarch.Glacier.Container.IServiceContainer"/>.
            </summary>
            <returns>A new <see cref="T:GKarch.Glacier.Container.IServiceContainer"/> instance.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ILifetime">
            <summary>
            Represents a class that manages the lifetime of a service instance.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ILifetime.GetInstance(System.Func{System.Object},GKarch.Glacier.Container.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:GKarch.Glacier.Container.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ICompositionRoot">
            <summary>
            Represents a class that acts as a composition root for an <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/> instance.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ICompositionRoot.Compose(GKarch.Glacier.Container.IServiceRegistry)">
            <summary>
            Composes services by adding services to the <paramref name="serviceRegistry"/>.
            </summary>
            <param name="serviceRegistry">The target <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/>.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.ITypeExtractor">
            <summary>
            Represents a class that extracts a set of types from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ITypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ICompositionRootAttributeExtractor">
            <summary>
            Represents a class that is capable of extracting
            attributes of type <see cref="T:GKarch.Glacier.Container.CompositionRootTypeAttribute"/> from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ICompositionRootAttributeExtractor.GetAttributes(System.Reflection.Assembly)">
            <summary>
            Gets a list of attributes of type <see cref="T:GKarch.Glacier.Container.CompositionRootTypeAttribute"/> from
            the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly from which to extract
            <see cref="T:GKarch.Glacier.Container.CompositionRootTypeAttribute"/> attributes.</param>
            <returns>A list of attributes of type <see cref="T:GKarch.Glacier.Container.CompositionRootTypeAttribute"/></returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IPropertySelector">
            <summary>
            Represents a class that is responsible for selecting injectable properties.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IPropertySelector.Execute(System.Type)">
            <summary>
            Selects properties that represents a dependency from the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the properties.</param>
            <returns>A list of injectable properties.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IPropertyDependencySelector">
            <summary>
            Represents a class that is responsible for selecting the property dependencies for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IPropertyDependencySelector.Execute(System.Type)">
            <summary>
            Selects the property dependencies for the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the property dependencies.</param>
            <returns>A list of <see cref="T:GKarch.Glacier.Container.PropertyDependency"/> instances that represents the property
            dependencies for the given <paramref name="type"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IConstructorDependencySelector">
            <summary>
            Represents a class that is responsible for selecting the constructor dependencies for a given <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IConstructorDependencySelector.Execute(System.Reflection.ConstructorInfo)">
            <summary>
            Selects the constructor dependencies for the given <paramref name="constructor"/>.
            </summary>
            <param name="constructor">The <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> for which to select the constructor dependencies.</param>
            <returns>A list of <see cref="T:GKarch.Glacier.Container.ConstructorDependency"/> instances that represents the constructor
            dependencies for the given <paramref name="constructor"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IConstructionInfoBuilder">
            <summary>
            Represents a class that is capable of building a <see cref="T:System.Reflection.ConstructorInfo"/> instance
            based on a <see cref="T:GKarch.Glacier.Container.Registration"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IConstructionInfoBuilder.Execute(GKarch.Glacier.Container.Registration)">
            <summary>
            Returns a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance based on the given <see cref="T:GKarch.Glacier.Container.Registration"/>.
            </summary>
            <param name="registration">The <see cref="T:GKarch.Glacier.Container.Registration"/> for which to return a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance.</param>
            <returns>A <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance that describes how to create a service instance.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IConstructionInfoProvider">
            <summary>
            Represents a class that keeps track of a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance for each <see cref="T:GKarch.Glacier.Container.Registration"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IConstructionInfoProvider.GetConstructionInfo(GKarch.Glacier.Container.Registration)">
            <summary>
            Gets a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance for the given <paramref name="registration"/>.
            </summary>
            <param name="registration">The <see cref="T:GKarch.Glacier.Container.Registration"/> for which to get a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance.</param>
            <returns>The <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance that describes how to create an instance of the given <paramref name="registration"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IConstructionInfoProvider.Invalidate">
            <summary>
            Invalidates the <see cref="T:GKarch.Glacier.Container.IConstructionInfoProvider"/> and causes new <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instances
            to be created when the <see cref="M:GKarch.Glacier.Container.IConstructionInfoProvider.GetConstructionInfo(GKarch.Glacier.Container.Registration)"/> method is called.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.ITypeConstructionInfoBuilder">
            <summary>
            Represents a class that builds a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance based on the implementing <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ITypeConstructionInfoBuilder.Execute(GKarch.Glacier.Container.Registration)">
            <summary>
            Analyzes the <paramref name="registration"/> and returns a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance.
            </summary>
            <param name="registration">The <see cref="T:GKarch.Glacier.Container.Registration"/> that represents the implementing type to analyze.</param>
            <returns>A <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IConstructorSelector">
            <summary>
            Represents a class that selects the constructor to be used for creating a new service instance.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IConstructorSelector.Execute(System.Type)">
            <summary>
            Selects the constructor to be used when creating a new instance of the <paramref name="implementingType"/>.
            </summary>
            <param name="implementingType">The <see cref="T:System.Type"/> for which to return a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/>.</param>
            <returns>A <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance that represents the constructor to be used
            when creating a new instance of the <paramref name="implementingType"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IAssemblyLoader">
            <summary>
            Represents a class that is responsible loading a set of assemblies based on the given search pattern.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IAssemblyLoader.Load(System.String)">
            <summary>
            Loads a set of assemblies based on the given <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern to use.</param>
            <returns>A list of assemblies based on the given <paramref name="searchPattern"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IAssemblyScanner">
            <summary>
            Represents a class that is capable of scanning an assembly and register services into an <see cref="T:GKarch.Glacier.Container.IServiceContainer"/> instance.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IAssemblyScanner.Scan(System.Reflection.Assembly,GKarch.Glacier.Container.IServiceRegistry,System.Func{GKarch.Glacier.Container.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Scans the target <paramref name="assembly"/> and registers services found within the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/> instance.</param>
            <param name="lifetime">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> instance that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IAssemblyScanner.Scan(System.Reflection.Assembly,GKarch.Glacier.Container.IServiceRegistry)">
            <summary>
            Scans the target <paramref name="assembly"/> and executes composition roots found within the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/> instance.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.ICompositionRootExecutor">
            <summary>
            Represents a class that is responsible for instantiating and executing an <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ICompositionRootExecutor.Execute(System.Type)">
            <summary>
            Creates an instance of the <paramref name="compositionRootType"/> and executes the <see cref="M:GKarch.Glacier.Container.ICompositionRoot.Compose(GKarch.Glacier.Container.IServiceRegistry)"/> method.
            </summary>
            <param name="compositionRootType">The concrete <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> type to be instantiated and executed.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.IEmitter">
            <summary>
            Represents an abstraction of the <see cref="T:System.Reflection.Emit.ILGenerator"/> class that provides information
            about the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.IEmitter.StackType">
            <summary>
            Gets the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.IEmitter.Instructions">
            <summary>
            Gets a list containing each <see cref="T:GKarch.Glacier.Container.Instruction"/> to be emitted into the dynamic method.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Puts the specified instruction onto the stream of instructions.
            </summary>
            <param name="code">The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IEmitter.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="type">A <see cref="T:System.Type"/> representing the type metadata token.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <summary>
            Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="constructor">A <see cref="T:System.Reflection.ConstructorInfo"/> representing a constructor.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="localBuilder">A local variable.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> representing a method.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.IEmitter.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> object that represents the type of the local variable.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IMethodSkeleton">
            <summary>
            Represents a dynamic method skeleton for emitting the code needed to resolve a service instance.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IMethodSkeleton.GetEmitter">
            <summary>
            Gets the <see cref="T:GKarch.Glacier.Container.IEmitter"/> for the this dynamic method.
            </summary>
            <returns>The <see cref="T:GKarch.Glacier.Container.IEmitter"/> for this dynamic method.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IMethodSkeleton.CreateDelegate(System.Type)">
            <summary>
            Completes the dynamic method and creates a delegate that can be used to execute it.
            </summary>
            <param name="delegateType">A delegate type whose signature matches that of the dynamic method.</param>
            <returns>A delegate of the specified type, which can be used to execute the dynamic method.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IScopeManagerProvider">
            <summary>
            Represents a class that is capable of providing the current <see cref="T:GKarch.Glacier.Container.ScopeManager"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IScopeManagerProvider.GetScopeManager">
            <summary>
            Returns the <see cref="T:GKarch.Glacier.Container.ScopeManager"/> that is responsible for managing scopes.
            </summary>
            <returns>The <see cref="T:GKarch.Glacier.Container.ScopeManager"/> that is responsible for managing scopes.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.RuntimeArgumentsLoader">
            <summary>
            This class is not for public use and is used internally
            to load runtime arguments onto the evaluation stack.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.RuntimeArgumentsLoader.Load(System.Object[])">
            <summary>
            Loads the runtime arguments onto the evaluation stack.
            </summary>
            <param name="constants">A object array representing the dynamic method context.</param>
            <returns>An array containing the runtime arguments supplied when resolving the service.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.Ensure">
            <summary>
            Contains a set of helper method related to validating
            user input.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.Ensure.IsNotNull``1(``0,System.String)">
            <summary>
            Ensures that the given <paramref name="value"/> is not null.
            </summary>
            <typeparam name="T">The type of value to be validated.</typeparam>
            <param name="value">The value to be validated.</param>
            <param name="paramName">The name of the parameter from which the <paramref name="value"/> comes from.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.ImmutableHashTableExtensions">
            <summary>
            Extends the <see cref="T:GKarch.Glacier.Container.ImmutableHashTable`2"/> class.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableHashTableExtensions.Search``2(GKarch.Glacier.Container.ImmutableHashTable{``0,``1},``0)">
            <summary>
            Searches for a value using the given <paramref name="key"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="hashTable">The target <see cref="T:GKarch.Glacier.Container.ImmutableHashTable`2"/> instance.</param>
            <param name="key">The key for which to search for a value.</param>
            <returns>If found, the <typeparamref name="TValue"/> with the given <paramref name="key"/>, otherwise the default <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableHashTableExtensions.Search``1(GKarch.Glacier.Container.ImmutableHashTable{System.Type,``0},System.Type)">
            <summary>
            Searches for a value using the given <paramref name="key"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="hashTable">The target <see cref="T:GKarch.Glacier.Container.ImmutableHashTable`2"/> instance.</param>
            <param name="key">The key for which to search for a value.</param>
            <returns>If found, the <typeparamref name="TValue"/> with the given <paramref name="key"/>, otherwise the default <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableHashTableExtensions.Add``2(GKarch.Glacier.Container.ImmutableHashTable{``0,``1},``0,``1)">
            <summary>
            Adds a new element to the <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="hashTable">The target <see cref="T:GKarch.Glacier.Container.ImmutableHashTable`2"/>.</param>
            <param name="key">The key to be associated with the value.</param>
            <param name="value">The value to be added to the tree.</param>
            <returns>A new <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/> that contains the new key/value pair.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ImmutableHashTreeExtensions">
            <summary>
            Extends the <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/> class.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableHashTreeExtensions.Search``2(GKarch.Glacier.Container.ImmutableHashTree{``0,``1},``0)">
            <summary>
            Searches for a <typeparamref name="TValue"/> using the given <paramref name="key"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="tree">The target <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.</param>
            <param name="key">The key of the <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/> to get.</param>
            <returns>If found, the <typeparamref name="TValue"/> with the given <paramref name="key"/>, otherwise the default <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableHashTreeExtensions.Add``2(GKarch.Glacier.Container.ImmutableHashTree{``0,``1},``0,``1)">
            <summary>
            Adds a new element to the <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="tree">The target <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.</param>
            <param name="key">The key to be associated with the value.</param>
            <param name="value">The value to be added to the tree.</param>
            <returns>A new <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/> that contains the new key/value pair.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableHashTreeExtensions.InOrder``2(GKarch.Glacier.Container.ImmutableHashTree{``0,``1})">
            <summary>
            Returns the nodes in the tree using in order traversal.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="hashTree">The target <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.</param>
            <returns>The nodes using in order traversal.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.EmitterExtensions">
            <summary>
            Extends the <see cref="T:GKarch.Glacier.Container.IEmitter"/> interface with a set of methods
            that optimizes and simplifies emitting MSIL instructions.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.UnboxOrCast(GKarch.Glacier.Container.IEmitter,System.Type)">
            <summary>
            Performs a cast or unbox operation if the current <see cref="P:GKarch.Glacier.Container.IEmitter.StackType"/> is
            different from the given <paramref name="type"/>.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="type">The requested stack type.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.PushConstant(GKarch.Glacier.Container.IEmitter,System.Int32,System.Type)">
            <summary>
            Pushes a constant value onto the evaluation stack.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="index">The index of the constant value to be pushed onto the stack.</param>
            <param name="type">The requested stack type.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.PushConstant(GKarch.Glacier.Container.IEmitter,System.Int32)">
            <summary>
            Pushes a constant value onto the evaluation stack as a object reference.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="index">The index of the constant value to be pushed onto the stack.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.PushArrayElement(GKarch.Glacier.Container.IEmitter)">
            <summary>
            Pushes the element containing an object reference at a specified index onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.PushArguments(GKarch.Glacier.Container.IEmitter,System.Reflection.ParameterInfo[])">
            <summary>
            Pushes the arguments associated with a service request onto the stack.
            The arguments are found as an array in the last element of the constants array
            that is passed into the dynamic method.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="parameters">A list of <see cref="T:System.Reflection.ParameterInfo"/> instances that
            represent the arguments to be pushed onto the stack.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.Call(GKarch.Glacier.Container.IEmitter,System.Reflection.MethodInfo)">
            <summary>
            Calls a late-bound method on an object, pushing the return value onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> that represents the method to be called.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.New(GKarch.Glacier.Container.IEmitter,System.Reflection.ConstructorInfo)">
            <summary>
            Pushes a new instance onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="constructorInfo">The <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> that represent the object to be created.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.Push(GKarch.Glacier.Container.IEmitter,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Pushes the given <paramref name="localBuilder"/> onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="localBuilder">The <see cref="T:System.Reflection.Emit.LocalBuilder"/> to be pushed onto the stack.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.PushArgument(GKarch.Glacier.Container.IEmitter,System.Int32)">
            <summary>
            Pushes an argument with the given <paramref name="index"/> onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="index">The index of the argument to be pushed onto the stack.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.Store(GKarch.Glacier.Container.IEmitter,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Stores the value currently on top of the stack in the given <paramref name="localBuilder"/>.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="localBuilder">The <see cref="T:System.Reflection.Emit.LocalBuilder"/> for which the value is to be stored.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.PushNewArray(GKarch.Glacier.Container.IEmitter,System.Type)">
            <summary>
            Pushes a new array of the given <paramref name="elementType"/> onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="elementType">The element <see cref="T:System.Type"/> of the new array.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.Push(GKarch.Glacier.Container.IEmitter,System.Int32)">
            <summary>
            Pushes an <see cref="T:System.Int32"/> value onto the stack.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="value">The <see cref="T:System.Int32"/> value to be pushed onto the stack.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.Cast(GKarch.Glacier.Container.IEmitter,System.Type)">
            <summary>
            Performs a cast of the value currently on top of the stack to the given <paramref name="type"/>.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> for which the value will be casted into.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.EmitterExtensions.Return(GKarch.Glacier.Container.IEmitter)">
            <summary>
            Returns from the current method.
            </summary>
            <param name="emitter">The target <see cref="T:GKarch.Glacier.Container.IEmitter"/>.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.ContainerOptions">
            <summary>
            Represents a set of configurable options when creating a new instance of the container.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ContainerOptions.Default">
            <summary>
            Gets the default <see cref="T:GKarch.Glacier.Container.ContainerOptions"/> used across all <see cref="T:GKarch.Glacier.Container.ServiceContainer"/> instances.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ContainerOptions.EnableVariance">
            <summary>
            Gets or sets a value indicating whether variance is applied when resolving an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="T:GKarch.Glacier.Container.ServiceContainer">
            <summary>
            An ultra lightweight service container.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ServiceContainer"/> class.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.#ctor(GKarch.Glacier.Container.ContainerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ServiceContainer"/> class.
            </summary>
            <param name="options">The <see cref="T:GKarch.Glacier.Container.ContainerOptions"/> instances that represents the configurable options.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceContainer.ScopeManagerProvider">
            <summary>
            Gets or sets the <see cref="T:GKarch.Glacier.Container.IScopeManagerProvider"/> that is responsible
            for providing the <see cref="T:GKarch.Glacier.Container.ScopeManager"/> used to manage scopes.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceContainer.PropertyDependencySelector">
            <summary>
            Gets or sets the <see cref="T:GKarch.Glacier.Container.IPropertyDependencySelector"/> instance that
            is responsible for selecting the property dependencies for a given type.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceContainer.CompositionRootTypeExtractor">
            <summary>
            Gets or sets the <see cref="T:GKarch.Glacier.Container.ITypeExtractor"/> that is responsible
            for extracting composition roots types from an assembly.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceContainer.CompositionRootExecutor">
            <summary>
            Gets or sets the <see cref="T:GKarch.Glacier.Container.ICompositionRootExecutor"/> that is responsible
            for executing composition roots.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceContainer.ConstructorDependencySelector">
            <summary>
            Gets or sets the <see cref="T:GKarch.Glacier.Container.IConstructorDependencySelector"/> instance that
            is responsible for selecting the constructor dependencies for a given constructor.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceContainer.ConstructorSelector">
            <summary>
            Gets or sets the <see cref="T:GKarch.Glacier.Container.IConstructorSelector"/> instance that is responsible
            for selecting the constructor to be used when creating new service instances.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceContainer.AssemblyScanner">
            <summary>
            Gets or sets the <see cref="T:GKarch.Glacier.Container.IAssemblyScanner"/> instance that is responsible for scanning assemblies.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceContainer.AssemblyLoader">
            <summary>
            Gets or sets the <see cref="T:GKarch.Glacier.Container.IAssemblyLoader"/> instance that is responsible for loading assemblies during assembly scanning.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceContainer.AvailableServices">
            <summary>
            Gets a list of <see cref="T:GKarch.Glacier.Container.ServiceRegistration"/> instances that represents the registered services.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.CanGetInstance(System.Type,System.String)">
            <summary>
            Returns <b>true</b> if the container can create the requested service, otherwise <b>false</b>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <returns><b>true</b> if the container can create the requested service, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.BeginScope">
            <summary>
            Starts a new <see cref="T:GKarch.Glacier.Container.Scope"/>.
            </summary>
            <returns><see cref="T:GKarch.Glacier.Container.Scope"/></returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.EndCurrentScope">
            <summary>
            Ends the current <see cref="T:GKarch.Glacier.Container.Scope"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.InjectProperties(System.Object)">
            <summary>
            Injects the property dependencies for a given <paramref name="instance"/>.
            </summary>
            <param name="instance">The target instance for which to inject its property dependencies.</param>
            <returns>The <paramref name="instance"/> with its property dependencies injected.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``1(System.Func{GKarch.Glacier.Container.IServiceFactory,``0},System.String,GKarch.Glacier.Container.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{GKarch.Glacier.Container.ServiceRequest,System.Object})">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{GKarch.Glacier.Container.ServiceRequest,System.Object},GKarch.Glacier.Container.ILifetime)">
            <summary>
            Registers a custom factory delegate used to create services that is otherwise unknown to the service container.
            </summary>
            <param name="predicate">Determines if the service can be created by the <paramref name="factory"/> delegate.</param>
            <param name="factory">Creates a service instance according to the <paramref name="predicate"/> predicate.</param>
            <param name="lifetime">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register(GKarch.Glacier.Container.ServiceRegistration)">
            <summary>
            Registers a service based on a <see cref="T:GKarch.Glacier.Container.ServiceRegistration"/> instance.
            </summary>
            <param name="serviceRegistration">The <see cref="T:GKarch.Glacier.Container.ServiceRegistration"/> instance that contains service metadata.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers composition roots from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{GKarch.Glacier.Container.ILifetime})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterAssembly(System.Reflection.Assembly,System.Func{GKarch.Glacier.Container.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Registers services from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to be scanned for services.</param>
            <param name="lifetimeFactory">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
            <remarks>
            If the target <paramref name="assembly"/> contains an implementation of the <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> interface, this
            will be used to configure the container.
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterFrom``1">
            <summary>
            Registers services from the given <typeparamref name="TCompositionRoot"/> type.
            </summary>
            <typeparam name="TCompositionRoot">The type of <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> to register from.</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterConstructorDependency``1(System.Func{GKarch.Glacier.Container.IServiceFactory,System.Reflection.ParameterInfo,``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterConstructorDependency``1(System.Func{GKarch.Glacier.Container.IServiceFactory,System.Reflection.ParameterInfo,System.Object[],``0})">
            <summary>
            Registers a factory delegate to be used when resolving a constructor dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterPropertyDependency``1(System.Func{GKarch.Glacier.Container.IServiceFactory,System.Reflection.PropertyInfo,``0})">
            <summary>
            Registers a factory delegate to be used when resolving a property dependency for
            a implicitly registered service.
            </summary>
            <typeparam name="TDependency">The dependency type.</typeparam>
            <param name="factory">The factory delegate used to create an instance of the dependency.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterAssembly(System.String)">
            <summary>
            Registers composition roots from assemblies in the base directory that matches the <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern used to filter the assembly files.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Decorate(System.Type,System.Type,System.Func{GKarch.Glacier.Container.ServiceRegistration,System.Boolean})">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
            <param name="predicate">A function delegate that determines if the <paramref name="decoratorType"/>
            should be applied to the target <paramref name="serviceType"/>.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Decorate(System.Type,System.Type)">
            <summary>
            Decorates the <paramref name="serviceType"/> with the given <paramref name="decoratorType"/>.
            </summary>
            <param name="serviceType">The target service type.</param>
            <param name="decoratorType">The decorator type used to decorate the <paramref name="serviceType"/>.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Decorate``2">
            <summary>
            Decorates the <typeparamref name="TService"/> with the given <typeparamref name="TDecorator"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <typeparam name="TDecorator">The decorator type used to decorate the <typeparamref name="TService"/>.</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Decorate``1(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``0})">
            <summary>
            Decorates the <typeparamref name="TService"/> using the given decorator <paramref name="factory"/>.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <param name="factory">A factory delegate used to create a decorator instance.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Decorate(GKarch.Glacier.Container.DecoratorRegistration)">
            <summary>
            Registers a decorator based on a <see cref="T:GKarch.Glacier.Container.DecoratorRegistration"/> instance.
            </summary>
            <param name="decoratorRegistration">The <see cref="T:GKarch.Glacier.Container.DecoratorRegistration"/> instance that contains the decorator metadata.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Override(System.Func{GKarch.Glacier.Container.ServiceRegistration,System.Boolean},System.Func{GKarch.Glacier.Container.IServiceFactory,GKarch.Glacier.Container.ServiceRegistration,GKarch.Glacier.Container.ServiceRegistration})">
            <summary>
            Allows a registered service to be overridden by another <see cref="T:GKarch.Glacier.Container.ServiceRegistration"/>.
            </summary>
            <param name="serviceSelector">A function delegate that is used to determine the service that should be
            overridden using the <see cref="T:GKarch.Glacier.Container.ServiceRegistration"/> returned from the <paramref name="serviceRegistrationFactory"/>.</param>
            <param name="serviceRegistrationFactory">The factory delegate used to create a <see cref="T:GKarch.Glacier.Container.ServiceRegistration"/> that overrides
            the incoming <see cref="T:GKarch.Glacier.Container.ServiceRegistration"/>.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Initialize(System.Func{GKarch.Glacier.Container.ServiceRegistration,System.Boolean},System.Action{GKarch.Glacier.Container.IServiceFactory,System.Object})">
            <summary>
            Allows post-processing of a service instance.
            </summary>
            <param name="predicate">A function delegate that determines if the given service can be post-processed.</param>
            <param name="processor">An action delegate that exposes the created service instance.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register(System.Type,System.Type,GKarch.Glacier.Container.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="lifetime">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register(System.Type,System.Type,System.String,GKarch.Glacier.Container.ILifetime)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``2">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``2(GKarch.Glacier.Container.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="lifetime">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``2(System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``2(System.String,GKarch.Glacier.Container.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <typeparamref name="TImplementation"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <typeparam name="TImplementation">The implementing type.</typeparam>
            <param name="serviceName">The name of the service.</param>
            <param name="lifetime">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``1(System.Func{GKarch.Glacier.Container.IServiceFactory,``0},GKarch.Glacier.Container.ILifetime)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="lifetime">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``1(System.Func{GKarch.Glacier.Container.IServiceFactory,``0},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``1">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register(System.Type)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register(System.Type,GKarch.Glacier.Container.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <param name="serviceType">The concrete type to register.</param>
            <param name="lifetime">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``1(GKarch.Glacier.Container.ILifetime)">
            <summary>
            Registers a concrete type as a service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="lifetime">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> instance that controls the lifetime of the registered service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterInstance``1(``0,System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterInstance``1(``0)">
            <summary>
            Registers the <typeparamref name="TService"/> with the given <paramref name="instance"/>.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="instance">The instance returned when this service is requested.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the given <paramref name="instance"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="instance">The instance returned when this service is requested.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``1(System.Func{GKarch.Glacier.Container.IServiceFactory,``0})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">The lambdaExpression that describes the dependencies of the service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``2(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``2(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``3(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``3(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``4(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2,``3})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``4(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2,``3},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``5(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2,``3,``4})">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register``5(System.Func{GKarch.Glacier.Container.IServiceFactory,``0,``1,``2,``3,``4},System.String)">
            <summary>
            Registers the <typeparamref name="TService"/> with the <paramref name="factory"/> that
            describes the dependencies of the service.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The service type to register.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TService"/> instance.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
            <param name="serviceName">The name of the service.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Register(System.Type,System.Type)">
            <summary>
            Registers the <paramref name="serviceType"/> with the <paramref name="implementingType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementingType">The implementing type.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance(System.Type,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance(System.Type,System.String,System.Object[])">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="arguments">The arguments to be passed to the target instance.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance``1">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance``1(System.String)">
            <summary>
            Gets a named instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance``2(``0)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="value">The argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance``2(``0,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="value">The argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance``3(``0,``1)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance``3(``0,``1,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance``4(``0,``1,``2)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance``4(``0,``1,``2,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance``5(``0,``1,``2,``3)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance``5(``0,``1,``2,``3,System.String)">
            <summary>
            Gets an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="arg1">The first argument value.</param>
            <param name="arg2">The second argument value.</param>
            <param name="arg3">The third argument value.</param>
            <param name="arg4">The fourth argument value.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.TryGetInstance(System.Type)">
            <summary>
            Gets an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.TryGetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise null.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.TryGetInstance``1">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.TryGetInstance``1(System.String)">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance if available, otherwise default(T).</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetInstance(System.Type,System.String)">
            <summary>
            Gets a named instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetAllInstances(System.Type)">
            <summary>
            Gets all instances of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The type of services to resolve.</param>
            <returns>A list that contains all implementations of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.GetAllInstances``1">
            <summary>
            Gets all instances of type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of services to resolve.</typeparam>
            <returns>A list that contains all implementations of the <typeparamref name="TService"/> type.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Create``1">
            <summary>
            Creates an instance of a concrete class.
            </summary>
            <typeparam name="TService">The type of class for which to create an instance.</typeparam>
            <returns>An instance of <typeparamref name="TService"/>.</returns>
            <remarks>The concrete type will be registered if not already registered with the container.</remarks>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Create(System.Type)">
            <summary>
            Creates an instance of a concrete class.
            </summary>
            <param name="serviceType">The type of class for which to create an instance.</param>
            <returns>An instance of the <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.SetDefaultLifetime``1">
            <summary>
            Sets the default lifetime for types registered without an explicit lifetime. Will only affect new registrations (after this call).
            </summary>
            <typeparam name="T">The default lifetime type</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Dispose">
            <summary>
            Disposes any services registered using the <see cref="T:GKarch.Glacier.Container.PerContainerLifetime"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Clone">
            <summary>
            Creates a clone of the current <see cref="T:GKarch.Glacier.Container.IServiceContainer"/>.
            </summary>
            <returns>A new <see cref="T:GKarch.Glacier.Container.IServiceContainer"/> instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainer.Invalidate">
            <summary>
            Invalidates the container and causes the compiler to "recompile".
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ServiceContainer.frozen">
            <summary>
            Infrastructure. For freeze container, disable new registration.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceContainer.FactoryRules">
            <summary>
            Infrastructure. For populating fallback rules.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.PerThreadScopeManagerProvider">
            <summary>
            A <see cref="T:GKarch.Glacier.Container.IScopeManagerProvider"/> that provides a <see cref="T:GKarch.Glacier.Container.ScopeManager"/> per thread.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.PerThreadScopeManagerProvider.GetScopeManager">
            <summary>
            Returns the <see cref="T:GKarch.Glacier.Container.ScopeManager"/> that is responsible for managing scopes.
            </summary>
            <returns>The <see cref="T:GKarch.Glacier.Container.ScopeManager"/> that is responsible for managing scopes.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.PerLogicalCallContextScopeManagerProvider">
            <summary>
            A <see cref="T:GKarch.Glacier.Container.IScopeManagerProvider"/> that provides a <see cref="T:GKarch.Glacier.Container.ScopeManager"/> across
            async points.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.PerLogicalCallContextScopeManagerProvider.GetScopeManager">
            <summary>
            Returns the <see cref="T:GKarch.Glacier.Container.ScopeManager"/> that is responsible for managing scopes.
            </summary>
            <returns>The <see cref="T:GKarch.Glacier.Container.ScopeManager"/> that is responsible for managing scopes.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ThreadSafeDictionary`2">
            <summary>
            A thread safe dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.ThreadSafeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ThreadSafeDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ThreadSafeDictionary`2"/> class using the
            given <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys</param>
        </member>
        <member name="T:GKarch.Glacier.Container.MostResolvableConstructorSelector">
            <summary>
            Selects the <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> from a given type that represents the most resolvable constructor.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.MostResolvableConstructorSelector.#ctor(System.Func{System.Type,System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.MostResolvableConstructorSelector"/> class.
            </summary>
            <param name="canGetInstance">A function delegate that determines if a service type can be resolved.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.MostResolvableConstructorSelector.Execute(System.Type)">
            <summary>
            Selects the constructor to be used when creating a new instance of the <paramref name="implementingType"/>.
            </summary>
            <param name="implementingType">The <see cref="T:System.Type"/> for which to return a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/>.</param>
            <returns>A <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance that represents the constructor to be used
            when creating a new instance of the <paramref name="implementingType"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.MostResolvableConstructorSelector.GetServiceName(System.Reflection.ParameterInfo)">
            <summary>
            Gets the service name based on the given <paramref name="parameter"/>.
            </summary>
            <param name="parameter">The <see cref="T:System.Reflection.ParameterInfo"/> for which to get the service name.</param>
            <returns>The name of the service for the given <paramref name="parameter"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ConstructorDependencySelector">
            <summary>
            Selects the constructor dependencies for a given <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ConstructorDependencySelector.Execute(System.Reflection.ConstructorInfo)">
            <summary>
            Selects the constructor dependencies for the given <paramref name="constructor"/>.
            </summary>
            <param name="constructor">The <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> for which to select the constructor dependencies.</param>
            <returns>A list of <see cref="T:GKarch.Glacier.Container.ConstructorDependency"/> instances that represents the constructor
            dependencies for the given <paramref name="constructor"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.PropertyDependencySelector">
            <summary>
            Selects the property dependencies for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.PropertyDependencySelector.#ctor(GKarch.Glacier.Container.IPropertySelector)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.PropertyDependencySelector"/> class.
            </summary>
            <param name="propertySelector">The <see cref="T:GKarch.Glacier.Container.IPropertySelector"/> that is
            responsible for selecting a list of injectable properties.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.PropertyDependencySelector.PropertySelector">
            <summary>
            Gets the <see cref="T:GKarch.Glacier.Container.IPropertySelector"/> that is responsible for selecting a
            list of injectable properties.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.PropertyDependencySelector.Execute(System.Type)">
            <summary>
            Selects the property dependencies for the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the property dependencies.</param>
            <returns>A list of <see cref="T:GKarch.Glacier.Container.PropertyDependency"/> instances that represents the property
            dependencies for the given <paramref name="type"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.TypeConstructionInfoBuilder">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance based on the implementing <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeConstructionInfoBuilder.#ctor(GKarch.Glacier.Container.IConstructorSelector,GKarch.Glacier.Container.IConstructorDependencySelector,GKarch.Glacier.Container.IPropertyDependencySelector,System.Func{System.Type,System.String,System.Delegate},System.Func{System.Type,System.String,System.Delegate})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.TypeConstructionInfoBuilder"/> class.
            </summary>
            <param name="constructorSelector">The <see cref="T:GKarch.Glacier.Container.IConstructorSelector"/> that is responsible
            for selecting the constructor to be used for constructor injection.</param>
            <param name="constructorDependencySelector">The <see cref="T:GKarch.Glacier.Container.IConstructorDependencySelector"/> that is
            responsible for selecting the constructor dependencies for a given <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/>.</param>
            <param name="propertyDependencySelector">The <see cref="T:GKarch.Glacier.Container.IPropertyDependencySelector"/> that is responsible
            for selecting the property dependencies for a given <see cref="T:System.Type"/>.</param>
            <param name="getConstructorDependencyExpression">A function delegate that returns the registered constructor dependency expression, if any.</param>
            <param name="getPropertyDependencyExpression">A function delegate that returns the registered property dependency expression, if any.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeConstructionInfoBuilder.Execute(GKarch.Glacier.Container.Registration)">
            <summary>
            Analyzes the <paramref name="registration"/> and returns a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance.
            </summary>
            <param name="registration">The <see cref="T:GKarch.Glacier.Container.Registration"/> that represents the implementing type to analyze.</param>
            <returns>A <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ConstructionInfoProvider">
            <summary>
            Keeps track of a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance for each <see cref="T:GKarch.Glacier.Container.Registration"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ConstructionInfoProvider.#ctor(GKarch.Glacier.Container.IConstructionInfoBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ConstructionInfoProvider"/> class.
            </summary>
            <param name="constructionInfoBuilder">The <see cref="T:GKarch.Glacier.Container.IConstructionInfoBuilder"/> that
            is responsible for building a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance based on a given <see cref="T:GKarch.Glacier.Container.Registration"/>.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ConstructionInfoProvider.GetConstructionInfo(GKarch.Glacier.Container.Registration)">
            <summary>
            Gets a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance for the given <paramref name="registration"/>.
            </summary>
            <param name="registration">The <see cref="T:GKarch.Glacier.Container.Registration"/> for which to get a <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance.</param>
            <returns>The <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instance that describes how to create an instance of the given <paramref name="registration"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ConstructionInfoProvider.Invalidate">
            <summary>
            Invalidates the <see cref="T:GKarch.Glacier.Container.IConstructionInfoProvider"/> and causes new <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> instances
            to be created when the <see cref="M:GKarch.Glacier.Container.IConstructionInfoProvider.GetConstructionInfo(GKarch.Glacier.Container.Registration)"/> method is called.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.ServiceRequest">
            <summary>
            Contains information about a service request that originates from a rule based service registration.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceRequest.#ctor(System.Type,System.String,GKarch.Glacier.Container.IServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ServiceRequest"/> class.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the requested service.</param>
            <param name="serviceName">The name of the requested service.</param>
            <param name="serviceFactory">The <see cref="T:GKarch.Glacier.Container.IServiceFactory"/> to be associated with this <see cref="T:GKarch.Glacier.Container.ServiceRequest"/>.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceRequest.ServiceType">
            <summary>
            Gets the service type.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceRequest.ServiceName">
            <summary>
            Gets the service name.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceRequest.ServiceFactory">
            <summary>
            Gets the <see cref="T:GKarch.Glacier.Container.IServiceFactory"/> that is associated with this <see cref="T:GKarch.Glacier.Container.ServiceRequest"/>.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.Registration">
            <summary>
            Base class for concrete registrations within the service container.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Registration.ServiceType">
            <summary>
            Gets or sets the service <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Registration.ImplementingType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that implements the <see cref="P:GKarch.Glacier.Container.Registration.ServiceType"/>.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Registration.FactoryExpression">
            <summary>
            Gets or sets the <see cref="T:System.Linq.Expressions.LambdaExpression"/> used to create a service instance.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.DecoratorRegistration">
            <summary>
            Contains information about a registered decorator.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.DecoratorRegistration.CanDecorate">
            <summary>
            Gets or sets a function delegate that determines if the decorator can decorate the service
            represented by the supplied <see cref="T:GKarch.Glacier.Container.ServiceRegistration"/>.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.DecoratorRegistration.ImplementingTypeFactory">
            <summary>
            Gets or sets a <see cref="T:System.Lazy`1"/> that defers resolving of the decorators implementing type.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.DecoratorRegistration.Index">
            <summary>
            Gets or sets the index of this <see cref="T:GKarch.Glacier.Container.DecoratorRegistration"/>.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.DecoratorRegistration.HasDeferredImplementingType">
            <summary>
            Gets a value indicating whether this registration has a deferred implementing type.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.ServiceRegistration">
            <summary>
            Contains information about a registered service.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceRegistration.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceRegistration.Lifetime">
            <summary>
            Gets or sets the <see cref="T:GKarch.Glacier.Container.ILifetime"/> instance that controls the lifetime of the service.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceRegistration.Value">
            <summary>
            Gets or sets the value that represents the instance of the service.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ServiceRegistration.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GKarch.Glacier.Container.ServiceRegistration"/> can be overridden
            by another registration.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceRegistration.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceRegistration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:GKarch.Glacier.Container.ConstructionInfo">
            <summary>
            Contains information about how to create a service instance.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ConstructionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ConstructionInfo"/> class.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ConstructionInfo.ImplementingType">
            <summary>
            Gets or sets the implementing type that represents the concrete class to create.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ConstructionInfo.Constructor">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.ConstructorInfo"/> that is used to create a service instance.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ConstructionInfo.PropertyDependencies">
            <summary>
            Gets a list of <see cref="T:GKarch.Glacier.Container.PropertyDependency"/> instances that represent
            the property dependencies for the target service instance.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ConstructionInfo.ConstructorDependencies">
            <summary>
            Gets a list of <see cref="T:GKarch.Glacier.Container.ConstructorDependency"/> instances that represent
            the property dependencies for the target service instance.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ConstructionInfo.FactoryDelegate">
            <summary>
            Gets or sets the function delegate to be used to create the service instance.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.Dependency">
            <summary>
            Represents a class dependency.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Dependency.ServiceType">
            <summary>
            Gets or sets the service <see cref="T:System.Type"/> of the <see cref="T:GKarch.Glacier.Container.Dependency"/>.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Dependency.ServiceName">
            <summary>
            Gets or sets the service name of the <see cref="T:GKarch.Glacier.Container.Dependency"/>.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Dependency.FactoryExpression">
            <summary>
            Gets or sets the <see cref="P:GKarch.Glacier.Container.Dependency.FactoryExpression"/> that represent getting the value of the <see cref="T:GKarch.Glacier.Container.Dependency"/>.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Dependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Dependency.IsRequired">
            <summary>
            Gets or sets a value indicating whether this dependency is required.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.Dependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.PropertyDependency">
            <summary>
            Represents a property dependency.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.PropertyDependency.Property">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.MethodInfo"/> that is used to set the property value.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.PropertyDependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.PropertyDependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ConstructorDependency">
            <summary>
            Represents a constructor dependency.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ConstructorDependency.Parameter">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.ParameterInfo"/> for this <see cref="T:GKarch.Glacier.Container.ConstructorDependency"/>.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ConstructorDependency.IsDecoratorTarget">
            <summary>
            Gets or sets a value indicating whether that this parameter represents
            the decoration target passed into a decorator instance.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ConstructorDependency.Name">
            <summary>
            Gets the name of the dependency accessor.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ConstructorDependency.ToString">
            <summary>
            Returns textual information about the dependency.
            </summary>
            <returns>A string that describes the dependency.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.PerContainerLifetime">
            <summary>
            Ensures that only one instance of a given service can exist within the current <see cref="T:GKarch.Glacier.Container.IServiceContainer"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.PerContainerLifetime.GetInstance(System.Func{System.Object},GKarch.Glacier.Container.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:GKarch.Glacier.Container.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.PerContainerLifetime.Dispose">
            <summary>
            Disposes the service instances managed by this <see cref="T:GKarch.Glacier.Container.PerContainerLifetime"/> instance.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.PerRequestLifeTime">
            <summary>
            Ensures that a new instance is created for each request in addition to tracking disposable instances.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.PerRequestLifeTime.GetInstance(System.Func{System.Object},GKarch.Glacier.Container.Scope)">
            <summary>
            Returns a service instance according to the specific lifetime characteristics.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:GKarch.Glacier.Container.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.PerScopeLifetime">
            <summary>
            Ensures that only one service instance can exist within a given <see cref="T:GKarch.Glacier.Container.Scope"/>.
            </summary>
            <remarks>
            If the service instance implements <see cref="T:System.IDisposable"/>,
            it will be disposed when the <see cref="T:GKarch.Glacier.Container.Scope"/> ends.
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Container.PerScopeLifetime.GetInstance(System.Func{System.Object},GKarch.Glacier.Container.Scope)">
            <summary>
            Returns the same service instance within the current <see cref="T:GKarch.Glacier.Container.Scope"/>.
            </summary>
            <param name="createInstance">The function delegate used to create a new service instance.</param>
            <param name="scope">The <see cref="T:GKarch.Glacier.Container.Scope"/> of the current service request.</param>
            <returns>The requested services instance.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ScopeManager">
            <summary>
            Manages a set of <see cref="T:GKarch.Glacier.Container.Scope"/> instances.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ScopeManager.CurrentScope">
            <summary>
            Gets the current <see cref="T:GKarch.Glacier.Container.Scope"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ScopeManager.BeginScope">
            <summary>
            Starts a new <see cref="T:GKarch.Glacier.Container.Scope"/>.
            </summary>
            <returns>A new <see cref="T:GKarch.Glacier.Container.Scope"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ScopeManager.EndScope(GKarch.Glacier.Container.Scope)">
            <summary>
            Ends the given <paramref name="scope"/> and updates the <see cref="P:GKarch.Glacier.Container.ScopeManager.CurrentScope"/> property.
            </summary>
            <param name="scope">The scope that is completed.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.Scope">
            <summary>
            Represents a scope.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.Scope.#ctor(GKarch.Glacier.Container.ScopeManager,GKarch.Glacier.Container.Scope)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.Scope"/> class.
            </summary>
            <param name="scopeManager">The <see cref="F:GKarch.Glacier.Container.Scope.scopeManager"/> that manages this <see cref="T:GKarch.Glacier.Container.Scope"/>.</param>
            <param name="parentScope">The parent <see cref="T:GKarch.Glacier.Container.Scope"/>.</param>
        </member>
        <member name="E:GKarch.Glacier.Container.Scope.Completed">
            <summary>
            Raised when the <see cref="T:GKarch.Glacier.Container.Scope"/> is completed.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Scope.ParentScope">
            <summary>
            Gets the parent <see cref="T:GKarch.Glacier.Container.Scope"/>.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Scope.ChildScope">
            <summary>
            Gets the child <see cref="T:GKarch.Glacier.Container.Scope"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.Scope.TrackInstance(System.IDisposable)">
            <summary>
            Registers the <paramref name="disposable"/> so that it is disposed when the scope is completed.
            </summary>
            <param name="disposable">The <see cref="T:System.IDisposable"/> object to register.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.Scope.Dispose">
            <summary>
            Disposes all instances tracked by this scope.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.CompositionRootTypeAttribute">
            <summary>
            Used at the assembly level to describe the composition root(s) for the target assembly.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.CompositionRootTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.CompositionRootTypeAttribute"/> class.
            </summary>
            <param name="compositionRootType">A <see cref="T:System.Type"/> that implements the <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> interface.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.CompositionRootTypeAttribute.CompositionRootType">
            <summary>
            Gets the <see cref="T:System.Type"/> that implements the <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> interface.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.CompositionRootAttributeExtractor">
            <summary>
            A class that is capable of extracting attributes of type
            <see cref="T:GKarch.Glacier.Container.CompositionRootTypeAttribute"/> from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.CompositionRootAttributeExtractor.GetAttributes(System.Reflection.Assembly)">
            <summary>
            Gets a list of attributes of type <see cref="T:GKarch.Glacier.Container.CompositionRootTypeAttribute"/> from
            the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly from which to extract
            <see cref="T:GKarch.Glacier.Container.CompositionRootTypeAttribute"/> attributes.</param>
            <returns>A list of attributes of type <see cref="T:GKarch.Glacier.Container.CompositionRootTypeAttribute"/></returns>
        </member>
        <member name="T:GKarch.Glacier.Container.CompositionRootTypeExtractor">
            <summary>
            Extracts concrete <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> implementations from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.CompositionRootTypeExtractor.#ctor(GKarch.Glacier.Container.ICompositionRootAttributeExtractor)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.CompositionRootTypeExtractor"/> class.
            </summary>
            <param name="compositionRootAttributeExtractor">The <see cref="T:GKarch.Glacier.Container.ICompositionRootAttributeExtractor"/>
            that is responsible for extracting attributes of type <see cref="T:GKarch.Glacier.Container.CompositionRootTypeAttribute"/> from
            a given <see cref="T:System.Reflection.Assembly"/>.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.CompositionRootTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts concrete <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> implementations found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of concrete <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> implementations found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.CachedTypeExtractor">
            <summary>
            A <see cref="T:GKarch.Glacier.Container.ITypeExtractor"/> cache decorator.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.CachedTypeExtractor.#ctor(GKarch.Glacier.Container.ITypeExtractor)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.CachedTypeExtractor"/> class.
            </summary>
            <param name="typeExtractor">The target <see cref="T:GKarch.Glacier.Container.ITypeExtractor"/>.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.CachedTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ConcreteTypeExtractor">
            <summary>
            Extracts concrete types from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ConcreteTypeExtractor.Execute(System.Reflection.Assembly)">
            <summary>
            Extracts concrete types found in the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> for which to extract types.</param>
            <returns>A set of concrete types found in the given <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.CompositionRootExecutor">
            <summary>
            A class that is responsible for instantiating and executing an <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.CompositionRootExecutor.#ctor(GKarch.Glacier.Container.IServiceRegistry,System.Func{System.Type,GKarch.Glacier.Container.ICompositionRoot})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.CompositionRootExecutor"/> class.
            </summary>
            <param name="serviceRegistry">The <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/> to be configured by the <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/>.</param>
            <param name="activator">The function delegate that is responsible for creating an instance of the <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/>.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.CompositionRootExecutor.Execute(System.Type)">
            <summary>
            Creates an instance of the <paramref name="compositionRootType"/> and executes the <see cref="M:GKarch.Glacier.Container.ICompositionRoot.Compose(GKarch.Glacier.Container.IServiceRegistry)"/> method.
            </summary>
            <param name="compositionRootType">The concrete <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> type to be instantiated and executed.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.AssemblyScanner">
            <summary>
            An assembly scanner that registers services based on the types contained within an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.AssemblyScanner.#ctor(GKarch.Glacier.Container.ITypeExtractor,GKarch.Glacier.Container.ITypeExtractor,GKarch.Glacier.Container.ICompositionRootExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.AssemblyScanner"/> class.
            </summary>
            <param name="concreteTypeExtractor">The <see cref="T:GKarch.Glacier.Container.ITypeExtractor"/> that is responsible for
            extracting concrete types from the assembly being scanned.</param>
            <param name="compositionRootTypeExtractor">The <see cref="T:GKarch.Glacier.Container.ITypeExtractor"/> that is responsible for
            extracting <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/> implementations from the assembly being scanned.</param>
            <param name="compositionRootExecutor">The <see cref="T:GKarch.Glacier.Container.ICompositionRootExecutor"/> that is
            responsible for creating and executing an <see cref="T:GKarch.Glacier.Container.ICompositionRoot"/>.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.AssemblyScanner.Scan(System.Reflection.Assembly,GKarch.Glacier.Container.IServiceRegistry,System.Func{GKarch.Glacier.Container.ILifetime},System.Func{System.Type,System.Type,System.Boolean})">
            <summary>
            Scans the target <paramref name="assembly"/> and registers services found within the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/> instance.</param>
            <param name="lifetimeFactory">The <see cref="T:GKarch.Glacier.Container.ILifetime"/> factory that controls the lifetime of the registered service.</param>
            <param name="shouldRegister">A function delegate that determines if a service implementation should be registered.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.AssemblyScanner.Scan(System.Reflection.Assembly,GKarch.Glacier.Container.IServiceRegistry)">
            <summary>
            Scans the target <paramref name="assembly"/> and executes composition roots found within the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan.</param>
            <param name="serviceRegistry">The target <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/> instance.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.PropertySelector">
            <summary>
            Selects the properties that represents a dependency to the target <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.PropertySelector.Execute(System.Type)">
            <summary>
            Selects properties that represents a dependency from the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to select the properties.</param>
            <returns>A list of properties that represents a dependency to the target <paramref name="type"/></returns>
        </member>
        <member name="M:GKarch.Glacier.Container.PropertySelector.IsInjectable(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the <paramref name="propertyInfo"/> represents an injectable property.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> that describes the target property.</param>
            <returns><b>true</b> if the property is injectable, otherwise <b>false</b>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.AssemblyLoader">
            <summary>
            Loads all assemblies from the application base directory that matches the given search pattern.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.AssemblyLoader.Load(System.String)">
            <summary>
            Loads a set of assemblies based on the given <paramref name="searchPattern"/>.
            </summary>
            <param name="searchPattern">The search pattern to use.</param>
            <returns>A list of assemblies based on the given <paramref name="searchPattern"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.AssemblyLoader.CanLoad(System.String)">
            <summary>
            Indicates if the current <paramref name="fileName"/> represent a file that can be loaded.
            </summary>
            <param name="fileName">The name of the target file.</param>
            <returns><b>true</b> if the file can be loaded, otherwise <b>false</b>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.KeyValue`2">
            <summary>
            Defines an immutable representation of a key and a value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:GKarch.Glacier.Container.KeyValue`2.Key">
            <summary>
            The key of this <see cref="T:GKarch.Glacier.Container.KeyValue`2"/> instance.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.KeyValue`2.Value">
            <summary>
            The key of this <see cref="T:GKarch.Glacier.Container.KeyValue`2"/> instance.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.KeyValue`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.KeyValue`2"/> class.
            </summary>
            <param name="key">The key of this <see cref="T:GKarch.Glacier.Container.KeyValue`2"/> instance.</param>
            <param name="value">The value of this <see cref="T:GKarch.Glacier.Container.KeyValue`2"/> instance.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.ImmutableList`1">
            <summary>
            Represents a simple "add only" immutable list.
            </summary>
            <typeparam name="T">The type of items contained in the list.</typeparam>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableList`1.Empty">
            <summary>
            Represents an empty <see cref="T:GKarch.Glacier.Container.ImmutableList`1"/>.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableList`1.Items">
            <summary>
            An array that contains the items in the <see cref="T:GKarch.Glacier.Container.ImmutableList`1"/>.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableList`1.Count">
            <summary>
            The number of items in the <see cref="T:GKarch.Glacier.Container.ImmutableList`1"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableList`1.#ctor(GKarch.Glacier.Container.ImmutableList{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ImmutableList`1"/> class.
            </summary>
            <param name="previousList">The list from which the previous items are copied.</param>
            <param name="value">The value to be added to the list.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableList`1.Add(`0)">
            <summary>
            Creates a new <see cref="T:GKarch.Glacier.Container.ImmutableList`1"/> that contains the new <paramref name="value"/>.
            </summary>
            <param name="value">The value to be added to the new list.</param>
            <returns>A new <see cref="T:GKarch.Glacier.Container.ImmutableList`1"/> that contains the new <paramref name="value"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ImmutableHashTable`2">
            <summary>
            A simple immutable add-only hash table.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTable`2.Empty">
            <summary>
            An empty <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTable`2.Count">
            <summary>
            Gets the number of items stored in the hash table.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTable`2.Buckets">
            <summary>
            Gets the hast table buckets.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTable`2.Divisor">
            <summary>
            Gets the divisor used to calculate the bucket index from the hash code of the key.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableHashTable`2.#ctor(GKarch.Glacier.Container.ImmutableHashTable{`0,`1},`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ImmutableHashTable`2"/> class.
            </summary>
            <param name="previous">The "previous" hash table that contains already existing values.</param>
            <param name="key">The key to be associated with the value.</param>
            <param name="value">The value to be added to the tree.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableHashTable`2.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:GKarch.Glacier.Container.ImmutableHashTable`2"/> class from being created.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.ImmutableHashTree`2">
            <summary>
            A balanced binary search tree implemented as an AVL tree.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTree`2.Empty">
            <summary>
            An empty <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTree`2.Key">
            <summary>
            The key of this <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTree`2.Value">
            <summary>
            The value of this <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTree`2.Duplicates">
            <summary>
            The list of <see cref="T:GKarch.Glacier.Container.KeyValue`2"/> instances where the
            <see cref="F:GKarch.Glacier.Container.KeyValue`2.Key"/> has the same hash code as this <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTree`2.HashCode">
            <summary>
            The hash code retrieved from the <see cref="F:GKarch.Glacier.Container.ImmutableHashTree`2.Key"/>.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTree`2.Left">
            <summary>
            The left node of this <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTree`2.Right">
            <summary>
            The right node of this <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/>.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTree`2.Height">
            <summary>
            The height of this node.
            </summary>
            <remarks>
            An empty node has a height of 0 and a node without children has a height of 1.
            </remarks>
        </member>
        <member name="F:GKarch.Glacier.Container.ImmutableHashTree`2.IsEmpty">
            <summary>
            Indicates that this <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/> is empty.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableHashTree`2.#ctor(`0,`1,GKarch.Glacier.Container.ImmutableHashTree{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/> class
            and adds a new entry in the <see cref="F:GKarch.Glacier.Container.ImmutableHashTree`2.Duplicates"/> list.
            </summary>
            <param name="key">The key for this node.</param>
            <param name="value">The value for this node.</param>
            <param name="hashTree">The <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/> that contains existing duplicates.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ImmutableHashTree`2.#ctor(`0,`1,GKarch.Glacier.Container.ImmutableHashTree{`0,`1},GKarch.Glacier.Container.ImmutableHashTree{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ImmutableHashTree`2"/> class.
            </summary>
            <param name="key">The key for this node.</param>
            <param name="value">The value for this node.</param>
            <param name="left">The left node.</param>
            <param name="right">The right node.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.Instruction">
            <summary>
            Represents an MSIL instruction to be emitted into a dynamic method.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.Instruction.#ctor(System.Reflection.Emit.OpCode,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.Instruction"/> class.
            </summary>
            <param name="code">The <see cref="T:System.Reflection.Emit.OpCode"/> to be emitted.</param>
            <param name="emitAction">The action to be performed against an <see cref="T:System.Reflection.Emit.ILGenerator"/>
            when this <see cref="T:GKarch.Glacier.Container.Instruction"/> is emitted.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.Instruction.Code">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.OpCode"/> to be emitted.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Instruction.Emit">
            <summary>
            Gets the action to be performed against an <see cref="T:System.Reflection.Emit.ILGenerator"/>
            when this <see cref="T:GKarch.Glacier.Container.Instruction"/> is emitted.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.Instruction.ToString">
            <summary>
            Returns the string representation of an <see cref="T:GKarch.Glacier.Container.Instruction"/>.
            </summary>
            <returns>The string representation of an <see cref="T:GKarch.Glacier.Container.Instruction"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.Instruction`1">
            <summary>
            Represents an MSIL instruction to be emitted into a dynamic method.
            </summary>
            <typeparam name="T">The type of argument used in this instruction.</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.Instruction`1.#ctor(System.Reflection.Emit.OpCode,`0,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.Instruction`1"/> class.
            </summary>
            <param name="code">The <see cref="T:System.Reflection.Emit.OpCode"/> to be emitted.</param>
            <param name="argument">The argument be passed along with the given <paramref name="code"/>.</param>
            <param name="emitAction">The action to be performed against an <see cref="T:System.Reflection.Emit.ILGenerator"/>
            when this <see cref="T:GKarch.Glacier.Container.Instruction"/> is emitted.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.Instruction`1.Argument">
            <summary>
            Gets the argument be passed along with the given <see cref="P:GKarch.Glacier.Container.Instruction.Code"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.Instruction`1.ToString">
            <summary>
            Returns the string representation of an <see cref="T:GKarch.Glacier.Container.Instruction`1"/>.
            </summary>
            <returns>The string representation of an <see cref="T:GKarch.Glacier.Container.Instruction`1"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.Emitter">
            <summary>
            An abstraction of the <see cref="T:System.Reflection.Emit.ILGenerator"/> class that provides information
            about the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.Emitter.#ctor(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.Emitter"/> class.
            </summary>
            <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator"/> used to emit MSIL instructions.</param>
            <param name="parameterTypes">The list of parameter types used by the current dynamic method.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.Emitter.StackType">
            <summary>
            Gets the <see cref="T:System.Type"/> currently on the stack.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.Emitter.Instructions">
            <summary>
            Gets a list containing each <see cref="T:GKarch.Glacier.Container.Instruction"/> to be emitted into the dynamic method.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.Emitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Puts the specified instruction onto the stream of instructions.
            </summary>
            <param name="code">The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.Emitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.Emitter.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.Emitter.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <summary>
            Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.Emitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.
            </summary>
            <param name="code">The MSIL instruction to be put onto the stream.</param>
            <param name="type">A <see cref="T:System.Type"/> representing the type metadata token.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.Emitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <summary>
            Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="constructor">A <see cref="T:System.Reflection.ConstructorInfo"/> representing a constructor.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.Emitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="localBuilder">A local variable.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.Emitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <summary>
            Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.
            </summary>
            <param name="code">The MSIL instruction to be emitted onto the stream.</param>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> representing a method.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.Emitter.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> object that represents the type of the local variable.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.LogicalThreadStorage`1">
            <summary>
            Provides storage per logical thread of execution.
            </summary>
            <typeparam name="T">The type of the value contained in this <see cref="T:GKarch.Glacier.Container.LogicalThreadStorage`1"/>.</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Container.LogicalThreadStorage`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.LogicalThreadStorage`1"/> class.
            </summary>
            <param name="valueFactory">The value factory used to create an instance of <typeparamref name="T"/>.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.LogicalThreadStorage`1.Value">
            <summary>
            Gets the value for the current logical thread of execution.
            </summary>
            <value>
            The value for the current logical thread of execution.
            </value>
        </member>
        <member name="T:GKarch.Glacier.Container.TypeHelper">
            <summary>
            Contains a set of extension method that represents
            a compability layer for reflection methods.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.GetMethodInfo(System.Delegate)">
            <summary>
            Gets the method represented by the delegate.
            </summary>
            <param name="del">The target <see cref="T:System.Delegate"/>.</param>
            <returns>The method represented by the delegate.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.GetPrivateMethod(System.Type,System.String)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> that represents a private method on the target <paramref name="type"/>.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <param name="name">The name of the private method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> that represents a private method on the target <paramref name="type"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.GetPrivateStaticMethod(System.Type,System.String)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> that represents a private static method on the target <paramref name="type"/>.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <param name="name">The name of the private method.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> that represents a private static method on the target <paramref name="type"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.GetPrivateStaticMethods(System.Type)">
            <summary>
            Gets an array of <see cref="T:System.Reflection.MethodInfo"/> objects that represents private static methods on the target <paramref name="type"/>.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>An array of <see cref="T:System.Reflection.MethodInfo"/> objects that represents private static methods on the target <paramref name="type"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets the custom attributes for this <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The target <see cref="T:System.Reflection.Assembly"/>.</param>
            <param name="attributeType">The type of <see cref="T:System.Attribute"/> objects to return.</param>
            <returns>The custom attributes for this <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.IsEnumerableOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IEnumerable`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.IsListOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IList`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.IsCollectionOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.ICollection`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.IsReadOnlyCollectionOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.IsReadOnlyListOfT(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.IsLazy(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Lazy`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Lazy`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.IsFunc(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Func`1"/> type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Func`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.IsFuncWithParameters(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an <see cref="T:System.Func`2"/>,
            <see cref="T:System.Func`3"/>, <see cref="T:System.Func`4"/> or an <see cref="T:System.Func`5"/>.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is an <see cref="T:System.Func`2"/>, <see cref="T:System.Func`3"/>, <see cref="T:System.Func`4"/> or an <see cref="T:System.Func`5"/>; otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.IsClosedGeneric(System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is a closed generic type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>true if the <see cref="T:System.Type"/> is a closed generic type; otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeHelper.GetElementType(System.Type)">
            <summary>
            Returns the <see cref="T:System.Type"/> of the object encompassed or referred to by the current array, pointer or reference type.
            </summary>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:System.Type"/> of the object encompassed or referred to by the current array, pointer, or reference type,
            or null if the current Type is not an array or a pointer, or is not passed by reference,
            or represents a generic type or a type parameter in the definition of a generic type or generic method.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.InterceptionContainerExtensions">
            <summary>
            Extends the <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/> interface by adding methods for 
            creating proxy-based decorators.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptionContainerExtensions.Intercept(GKarch.Glacier.Container.IServiceRegistry,System.Func{GKarch.Glacier.Container.ServiceRegistration,System.Boolean},System.Type[],System.Action{GKarch.Glacier.Container.IServiceFactory,GKarch.Glacier.Container.ProxyDefinition})">
            <summary>
            Decorates the service identified by the <paramref name="serviceSelector"/> delegate with a dynamic proxy type
            that is used to decorate the target type.
            </summary>
            <param name="serviceRegistry">The target <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/> instance.</param>
            <param name="serviceSelector">A function delegate that is used to determine if the proxy-based decorator should be applied to the target service.</param>
            <param name="additionalInterfaces">A list of additional interface that will be implemented by the proxy type.</param>
            <param name="defineProxyType">An action delegate that is used to define the proxy type.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptionContainerExtensions.Intercept(GKarch.Glacier.Container.IServiceRegistry,System.Func{GKarch.Glacier.Container.ServiceRegistration,System.Boolean},System.Action{GKarch.Glacier.Container.IServiceFactory,GKarch.Glacier.Container.ProxyDefinition})">
            <summary>
            Decorates the service identified by the <paramref name="serviceSelector"/> delegate with a dynamic proxy type
            that is used to decorate the target type.
            </summary>
            <param name="serviceRegistry">The target <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/> instance.</param>
            <param name="serviceSelector">A function delegate that is used to determine if the proxy-based decorator should be applied to the target service.</param>        
            <param name="defineProxyType">An action delegate that is used to define the proxy type.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptionContainerExtensions.Intercept(GKarch.Glacier.Container.IServiceRegistry,System.Func{GKarch.Glacier.Container.ServiceRegistration,System.Boolean},System.Func{GKarch.Glacier.Container.IServiceFactory,GKarch.Glacier.Container.IInterceptor})">
            <summary>
            Decorates the service identified by the <paramref name="serviceSelector"/> delegate with a dynamic proxy type
            that is used to decorate the target type.
            </summary>
            <param name="serviceRegistry">The target <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/> instance.</param>
            <param name="serviceSelector">A function delegate that is used to determine if the proxy-based decorator should be applied to the target service.</param>        
            <param name="getInterceptor">A function delegate that is used to create the <see cref="T:GKarch.Glacier.Container.IInterceptor"/> instance.</param>        
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptionContainerExtensions.Intercept(GKarch.Glacier.Container.IServiceRegistry,System.Func{System.Reflection.MethodInfo,System.Boolean},System.Func{GKarch.Glacier.Container.IInvocationInfo,System.Object})">
            <summary>
            Intercepts methods that matches the <paramref name="methodSelector"/> and uses the <paramref name="implementation"/> delegate 
            to implement the intercepted methods.
            </summary>
            <param name="serviceRegistry">The target <see cref="T:GKarch.Glacier.Container.IServiceRegistry"/> instance.</param>
            <param name="methodSelector">A function delegate used to select the methods to be implemented.</param>
            <param name="implementation">A delegate that represents the implementation of the intercepted methods.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.IProxy">
            <summary>
            Implemented by all proxy types.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.IProxy.Target">
            <summary>
            Gets the proxy target.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.IInvocationInfo">
            <summary>
            Represents a class that contains detailed information about the method being invoked.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.IInvocationInfo.Method">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> currently being invoked.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.IInvocationInfo.Proxy">
            <summary>
            Gets the <see cref="T:GKarch.Glacier.Container.IProxy"/> instance that intercepted the method call.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.IInvocationInfo.Arguments">
            <summary>
            Gets the arguments currently being passed to the target method.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IInvocationInfo.Proceed">
            <summary>
            Proceeds to the next <see cref="T:GKarch.Glacier.Container.IInterceptor"/>, or of at the end of the interceptor chain, 
            proceeds to the actual target.
            </summary>
            <returns>The return value from the method call.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IMethodBuilder">
            <summary>
            Represents a class that is capable of creating a delegate used to invoke 
            a method without using late-bound invocation.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IMethodBuilder.GetDelegate(System.Reflection.MethodInfo)">
            <summary>
            Gets a delegate that is used to invoke the <paramref name="targetMethod"/>.
            </summary>
            <param name="targetMethod">The <see cref="T:System.Reflection.MethodInfo"/> that represents the target method to invoke.</param>
            <returns>A delegate that represents compiled code used to invoke the <paramref name="targetMethod"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IDynamicMethodSkeleton">
            <summary>
            Represents the skeleton of a dynamic method.
            </summary>    
        </member>
        <member name="M:GKarch.Glacier.Container.IDynamicMethodSkeleton.GetILGenerator">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.ILGenerator"/> used to emit the method body.
            </summary>
            <returns>An <see cref="T:System.Reflection.Emit.ILGenerator"/> instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.IDynamicMethodSkeleton.CreateDelegate">
            <summary>
            Create a delegate used to invoke the dynamic method.
            </summary>
            <returns>A function delegate.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IProxyBuilder">
            <summary>
            Represents a class that is capable of creating a proxy <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IProxyBuilder.GetProxyType(GKarch.Glacier.Container.ProxyDefinition)">
            <summary>
            Gets a proxy type based on the given <paramref name="definition"/>.
            </summary>
            <param name="definition">A <see cref="T:GKarch.Glacier.Container.ProxyDefinition"/> instance that contains information about the 
            proxy type to be created.</param>
            <returns>A proxy <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IInterceptor">
            <summary>
            Represents a class that intercepts method calls.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IInterceptor.Invoke(GKarch.Glacier.Container.IInvocationInfo)">
            <summary>
            Invoked when a method call is intercepted.
            </summary>
            <param name="invocationInfo">The <see cref="T:GKarch.Glacier.Container.IInvocationInfo"/> instance that 
            contains information about the current method call.</param>
            <returns>The return value from the method.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ITypeBuilderFactory">
            <summary>
            Represents a class that is capable of creating a <see cref="T:System.Reflection.Emit.TypeBuilder"/> that 
            is used to build the proxy type.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ITypeBuilderFactory.CreateTypeBuilder(System.Type,System.Type[])">
            <summary>
            Creates a <see cref="T:System.Reflection.Emit.TypeBuilder"/> instance that is used to build a proxy 
            type that inherits/implements the <paramref name="targetType"/> with an optional 
            set of <paramref name="additionalInterfaces"/>.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/> that the <see cref="T:System.Reflection.Emit.TypeBuilder"/> will inherit/implement.</param>
            <param name="additionalInterfaces">A set of additional interfaces to be implemented.</param>
            <returns>A <see cref="T:System.Reflection.Emit.TypeBuilder"/> instance for which to build the proxy type.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ITypeBuilderFactory.CreateType(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Creates a proxy <see cref="T:System.Type"/> based on the given <paramref name="typeBuilder"/>.
            </summary>
            <param name="typeBuilder">The <see cref="T:System.Reflection.Emit.TypeBuilder"/> that represents the proxy type.</param>
            <returns>The proxy <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.IMethodSelector">
            <summary>
            Represents a class that is capable of selecting method that can be intercepted.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.IMethodSelector.Execute(System.Type,System.Type[])">
            <summary>
            Returns a list of method that can be intercepted.
            </summary>
            <param name="targetType">The proxy target type.</param>
            <param name="additionalInterfaces">A list of additional interfaces implemented by the proxy type.</param>
            <returns>An array containing method that can be intercepted.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.MethodInterceptorFactory">
            <summary>
            A factory class used to create a <see cref="T:GKarch.Glacier.Container.CompositeInterceptor"/> if the target method has 
            multiple interceptors.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.MethodInterceptorFactory.CreateMethodInterceptor(System.Lazy{GKarch.Glacier.Container.IInterceptor}[])">
            <summary>
            Creates a new <see cref="T:System.Lazy`1"/> that represents getting the <see cref="T:GKarch.Glacier.Container.IInterceptor"/> for a given method.
            </summary>
            <param name="interceptors">A list of interceptors that represents the interceptor chain for a given method.</param>
            <returns>A new <see cref="T:System.Lazy`1"/> that represents getting the <see cref="T:GKarch.Glacier.Container.IInterceptor"/> for a given method.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.TargetMethodInfo">
            <summary>
            Contains information about the target method being intercepted.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.TargetMethodInfo.ProceedDelegate">
            <summary>
            The function delegate used to invoke the target method.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Container.TargetMethodInfo.Method">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> that represents the target method.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.TargetMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.TargetMethodInfo"/> class.
            </summary>
            <param name="method">The target <see cref="T:System.Reflection.MethodInfo"/> being intercepted.</param>
        </member>
        <member name="T:GKarch.Glacier.Container.OpenGenericTargetMethodInfo">
            <summary>
            Contains information about the open generic target method being intercepted.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.OpenGenericTargetMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.OpenGenericTargetMethodInfo"/> class.
            </summary>
            <param name="openGenericMethod">The open generic target <see cref="T:System.Reflection.MethodInfo"/>.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.OpenGenericTargetMethodInfo.GetTargetMethodInfo(System.Type[])">
            <summary>
            Gets the <see cref="T:GKarch.Glacier.Container.TargetMethodInfo"/> that represents the closed generic <see cref="T:System.Reflection.MethodInfo"/>.
            based on the given <paramref name="typeArguments"/>.
            </summary>
            <param name="typeArguments">A list of types used to create a closed generic target <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>The <see cref="T:GKarch.Glacier.Container.TargetMethodInfo"/> that represents the closed generic <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.DynamicMethodBuilder">
            <summary>
            A class that is capable of creating a delegate used to invoke 
            a method without using late-bound invocation.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.DynamicMethodBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.DynamicMethodBuilder"/> class.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.DynamicMethodBuilder.GetDelegate(System.Reflection.MethodInfo)">
            <summary>
            Gets a delegate that is used to invoke the <paramref name="targetMethod"/>.
            </summary>
            <param name="targetMethod">The <see cref="T:System.Reflection.MethodInfo"/> that represents the target method to invoke.</param>
            <returns>A delegate that represents compiled code used to invoke the <paramref name="targetMethod"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.DynamicMethodBuilder.DynamicMethodSkeleton.GetILGenerator">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.ILGenerator"/> used to emit the method body.
            </summary>
            <returns>An <see cref="T:System.Reflection.Emit.ILGenerator"/> instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.DynamicMethodBuilder.DynamicMethodSkeleton.CreateDelegate">
            <summary>
            Create a delegate used to invoke the dynamic method.
            </summary>
            <returns>A function delegate.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.CachedMethodBuilder">
            <summary>
            An <see cref="T:GKarch.Glacier.Container.IMethodBuilder"/> cache decorator that ensures that 
            for a given <see cref="T:System.Reflection.MethodInfo"/>, only a single dynamic method is created.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.CachedMethodBuilder.#ctor(GKarch.Glacier.Container.IMethodBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.CachedMethodBuilder"/> class.
            </summary>
            <param name="methodBuilder">The target <see cref="T:GKarch.Glacier.Container.IMethodBuilder"/> instance.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.CachedMethodBuilder.GetDelegate(System.Reflection.MethodInfo)">
            <summary>
            Gets a delegate that is used to invoke the <paramref name="targetMethod"/>.
            </summary>
            <param name="targetMethod">The <see cref="T:System.Reflection.MethodInfo"/> that represents the target method to invoke.</param>
            <returns>A delegate that represents compiled code used to invoke the <paramref name="targetMethod"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.TargetInvocationInfo">
            <summary>
            An implementation of the <see cref="T:GKarch.Glacier.Container.IInvocationInfo"/> interface that forwards 
            method calls the actual target.
            </summary>    
        </member>
        <member name="M:GKarch.Glacier.Container.TargetInvocationInfo.#ctor(GKarch.Glacier.Container.TargetMethodInfo,GKarch.Glacier.Container.IProxy,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.TargetInvocationInfo"/> class.
            </summary>
            <param name="targetMethodInfo">The <see cref="T:GKarch.Glacier.Container.TargetMethodInfo"/> that contains 
            information about the target method.</param>
            <param name="proxy">The <see cref="T:GKarch.Glacier.Container.IProxy"/> instance that intercepted the method call.</param>
            <param name="arguments">The arguments currently being passed to the target method.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.TargetInvocationInfo.Method">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> currently being invoked.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.TargetInvocationInfo.Proxy">
            <summary>
            Gets the <see cref="T:GKarch.Glacier.Container.IProxy"/> instance that intercepted the method call.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.TargetInvocationInfo.Arguments">
            <summary>
            Gets the arguments currently being passed to the target method.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.TargetInvocationInfo.Proceed">
            <summary>
            Proceeds to the actual <see cref="P:GKarch.Glacier.Container.IProxy.Target"/>.
            </summary>
            <returns>The return value from the method call.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.InterceptorInvocationInfo">
            <summary>
            An implementation of the <see cref="T:GKarch.Glacier.Container.IInvocationInfo"/> interface that forwards 
            method calls to the next <see cref="T:GKarch.Glacier.Container.IInterceptor"/> in the interceptor chain.
            </summary>    
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptorInvocationInfo.#ctor(GKarch.Glacier.Container.IInvocationInfo,System.Lazy{GKarch.Glacier.Container.IInterceptor})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.InterceptorInvocationInfo"/> class.
            </summary>
            <param name="nextInvocationInfo">The next <see cref="T:GKarch.Glacier.Container.IInvocationInfo"/> used to invoke the <paramref name="nextInterceptor"/>.</param>
            <param name="nextInterceptor">The next <see cref="T:GKarch.Glacier.Container.IInterceptor"/> in the interceptor chain.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.InterceptorInvocationInfo.Method">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> currently being invoked.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.InterceptorInvocationInfo.Proxy">
            <summary>
            Gets the <see cref="T:GKarch.Glacier.Container.IProxy"/> instance that intercepted the method call.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.InterceptorInvocationInfo.Arguments">
            <summary>
            Gets the arguments currently being passed to the target method.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptorInvocationInfo.Proceed">
            <summary>
            Proceeds to the next <see cref="T:GKarch.Glacier.Container.IInterceptor"/> in the interceptor chain.
            </summary>
            <returns>The return value from the method call.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.CompositeInterceptor">
            <summary>
            A composite <see cref="T:GKarch.Glacier.Container.IInterceptor"/> that is responsible for 
            passing the <see cref="T:GKarch.Glacier.Container.IInvocationInfo"/> down the interceptor chain.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.CompositeInterceptor.#ctor(System.Lazy{GKarch.Glacier.Container.IInterceptor}[])">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.CompositeInterceptor"/> class.
            </summary>
            <param name="interceptors">The <see cref="T:GKarch.Glacier.Container.IInterceptor"/> chain to be invoked.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.CompositeInterceptor.Invoke(GKarch.Glacier.Container.IInvocationInfo)">
            <summary>
            Invoked when a method call is intercepted.
            </summary>
            <param name="invocationInfo">The <see cref="T:GKarch.Glacier.Container.IInvocationInfo"/> instance that 
            contains information about the current method call.</param>
            <returns>The return value from the method.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.InterceptorInfo">
            <summary>
            Contains information about a registered <see cref="T:GKarch.Glacier.Container.IInterceptor"/>.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.InterceptorInfo.InterceptorFactory">
            <summary>
            Gets or sets the function delegate used to create the <see cref="T:GKarch.Glacier.Container.IInterceptor"/> instance.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.InterceptorInfo.MethodSelector">
            <summary>
            Gets or sets the function delegate used to selected the methods to be intercepted.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.InterceptorInfo.Index">
            <summary>
            Gets or sets the index of this <see cref="T:GKarch.Glacier.Container.InterceptorInfo"/> instance.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Container.ProxyDefinition">
            <summary>
            Represents the definition of a proxy type.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ProxyDefinition.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ProxyDefinition"/> class.
            </summary>
            <param name="targetType">The type of object to proxy.</param>        
            <param name="additionalInterfaces">A list of additional interfaces to be implemented by the proxy type.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ProxyDefinition.#ctor(System.Type,System.Boolean,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ProxyDefinition"/> class.
            </summary>
            <param name="targetType">The type of object to proxy.</param>
            <param name="useLazyTarget">Indicates whether the proxy type 
            should implement a constructor with a <see cref="T:System.Lazy`1"/> parameter.</param>
            <param name="additionalInterfaces">A list of additional interfaces to be implemented by the proxy type.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ProxyDefinition.#ctor(System.Type,System.Func{System.Object},System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ProxyDefinition"/> class.
            </summary>
            <param name="targetType">The type of object to proxy.</param>
            <param name="targetFactory">A function delegate used to create the target instance.</param>
            <param name="additionalInterfaces">A list of additional interfaces to be implemented by the proxy type.</param>
        </member>
        <member name="P:GKarch.Glacier.Container.ProxyDefinition.TargetType">
            <summary>
            Gets the proxy target type.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ProxyDefinition.UseLazyTarget">
            <summary>
            Gets a value indicating whether the proxy type 
            should implement a constructor with a <see cref="T:System.Lazy`1"/> parameter.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ProxyDefinition.TargetFactory">
            <summary>
            Gets the function delegate used to create the proxy target.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ProxyDefinition.AdditionalInterfaces">
            <summary>
            Gets an list of additional interfaces to be implemented by the proxy type.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ProxyDefinition.Interceptors">
            <summary>
            Gets a list of the registered <see cref="T:GKarch.Glacier.Container.InterceptorInfo"/> instances.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ProxyDefinition.TypeAttributes">
            <summary>
            Gets a list of the registered <see cref="T:System.Reflection.CustomAttributeData"/> instances.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ProxyDefinition.Implement(System.Func{GKarch.Glacier.Container.IInterceptor},System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            Implements the methods identified by the <paramref name="methodSelector"/> by forwarding method calls
            to the <see cref="T:GKarch.Glacier.Container.IInterceptor"/> created by the <paramref name="interceptorFactory"/>.
            </summary>
            <param name="interceptorFactory">A function delegate used to create the <see cref="T:GKarch.Glacier.Container.IInterceptor"/> instance.</param>
            <param name="methodSelector">A function delegate used to select the methods to be implemented.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ProxyDefinition.Implement(System.Func{GKarch.Glacier.Container.IInterceptor})">
            <summary>
            Implements all methods by forwarding method calls
            to the <see cref="T:GKarch.Glacier.Container.IInterceptor"/> created by the <paramref name="interceptorFactory"/>.
            </summary>        
            <param name="interceptorFactory">A function delegate used to create the <see cref="T:GKarch.Glacier.Container.IInterceptor"/> instance.</param>       
            <returns>This instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ProxyDefinition.AddCustomAttributes(System.Reflection.CustomAttributeData[])">
            <summary>
            Adds a custom <see cref="T:System.Attribute"/> to the proxy type.
            </summary>
            <param name="customAttributeData">The <see cref="T:System.Reflection.CustomAttributeData"/> instance that 
            represents the custom attribute to be added to the proxy type.</param>
            <returns>This instance.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.InterceptionMethodInfoExtensions">
            <summary>
            Extends the <see cref="T:System.Reflection.MethodInfo"/> class.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptionMethodInfoExtensions.GetDeclaringType(System.Reflection.MethodInfo)">
            <summary>
            Gets the declaring type of the target <paramref name="method"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> for which to return the declaring type.</param>
            <returns>The type that declares the target <paramref name="method"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptionMethodInfoExtensions.IsDeclaredBy(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Gets a value that indicates whether the <paramref name="method"/> is declared by the given <paramref name="type"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> for which to check the declaring type.</param>
            <param name="type">The <see cref="T:System.Type"/> to check against the declaring type of the <paramref name="method"/>.</param>
            <returns>true if the <paramref name="method"/> is declared by the given <paramref name="type"/>, otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptionMethodInfoExtensions.IsDeclaredBy``1(System.Reflection.MethodInfo)">
            <summary>
            Gets a value that indicates whether the <paramref name="method"/> is declared <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to check against the declaring type of the <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> for which to check the declaring type.</param>
            <returns>true if the <paramref name="method"/> is declared by <typeparamref name="T"/>, otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptionMethodInfoExtensions.IsPropertySetter(System.Reflection.MethodInfo)">
            <summary>
            Gets a value that indicates whether the <paramref name="method"/> represent a property setter.
            </summary>
            <param name="method">The target <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>true if the <paramref name="method"/> represent a property setter, otherwise , false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptionMethodInfoExtensions.IsPropertyGetter(System.Reflection.MethodInfo)">
            <summary>
            Gets a value that indicates whether the <paramref name="method"/> represent a property getter.
            </summary>
            <param name="method">The target <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>true if the <paramref name="method"/> represent a property getter, otherwise , false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.InterceptionMethodInfoExtensions.GetProperty(System.Reflection.MethodInfo)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> for which the given <paramref name="method"/> represents a property accessor.
            </summary>
            <param name="method">The target <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> for which the given <paramref name="method"/> represents a property accessor.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.MethodSelector">
            <summary>
            A class that is capable of selecting method that can be intercepted.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.MethodSelector.Execute(System.Type,System.Type[])">
            <summary>
            Returns a list of method that can be intercepted.
            </summary>
            <param name="targetType">The proxy target type.</param>
            <param name="additionalInterfaces">A list of additional interfaces implemented by the proxy type.</param>
            <returns>An array containing method that can be intercepted.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.TypeBuilderFactory">
            <summary>
            A class that is capable of creating a <see cref="T:System.Reflection.Emit.TypeBuilder"/> that 
            is used to build the proxy type.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeBuilderFactory.CreateTypeBuilder(System.Type,System.Type[])">
            <summary>
            Creates a <see cref="T:System.Reflection.Emit.TypeBuilder"/> instance that is used to build a proxy 
            type that inherits/implements the <paramref name="targetType"/> with an optional 
            set of <paramref name="additionalInterfaces"/>.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/> that the <see cref="T:System.Reflection.Emit.TypeBuilder"/> will inherit/implement.</param>
            <param name="additionalInterfaces">A set of additional interfaces to be implemented.</param>
            <returns>A <see cref="T:System.Reflection.Emit.TypeBuilder"/> instance for which to build the proxy type.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeBuilderFactory.CreateType(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Creates a proxy <see cref="T:System.Type"/> based on the given <paramref name="typeBuilder"/>.
            </summary>
            <param name="typeBuilder">The <see cref="T:System.Reflection.Emit.TypeBuilder"/> that represents the proxy type.</param>
            <returns>The proxy <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.ProxyBuilder">
            <summary>
            A class that is capable of creating a proxy <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ProxyBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.ProxyBuilder"/> class.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Container.ProxyBuilder.MethodSelector">
            <summary>
            Gets or sets the <see cref="T:GKarch.Glacier.Container.IMethodSelector"/> instance that 
            is responsible for selecting methods that can be intercepted.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.ProxyBuilder.GetProxyType(GKarch.Glacier.Container.ProxyDefinition)">
            <summary>
            Gets a proxy type based on the given <paramref name="definition"/>.
            </summary>
            <param name="definition">A <see cref="T:GKarch.Glacier.Container.ProxyDefinition"/> instance that contains information about the 
            proxy type to be created.</param>
            <returns>A proxy <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Container.TypeArrayComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is capable of comparing 
            <see cref="T:System.Type"/> arrays.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeArrayComparer.Equals(System.Type[],System.Type[])">
            <summary>
            Determines if two <see cref="T:System.Type"/> arrays are equal.
            </summary>
            <param name="x">The first <see cref="T:System.Type"/> array.</param>
            <param name="y">The second <see cref="T:System.Type"/> array.</param>
            <returns>true if the specified type arrays are equal; otherwise, false.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.TypeArrayComparer.GetHashCode(System.Type[])">
            <summary>
            Returns a hash code for the given set of <paramref name="types"/>.
            </summary>
            <param name="types">The <see cref="T:System.Type"/> array for which to get the hash code.</param>        
            <returns>
            The hash code for the given set of <paramref name="types"/>.
            </returns>
        </member>
        <member name="T:GKarch.Glacier.Container.LambdaInterceptor">
            <summary>
            A <see cref="T:GKarch.Glacier.Container.IInterceptor"/> that uses a function delegate to 
            provide an implementation for intercepted methods.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Container.LambdaInterceptor.#ctor(System.Func{GKarch.Glacier.Container.IInvocationInfo,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Container.LambdaInterceptor"/> class.
            </summary>
            <param name="implementation">The function delegate to be used 
            as the implementation of the intercepted methods.</param>
        </member>
        <member name="M:GKarch.Glacier.Container.LambdaInterceptor.Invoke(GKarch.Glacier.Container.IInvocationInfo)">
            <summary>
            Invoked when a method call is intercepted.
            </summary>
            <param name="invocationInfo">The <see cref="T:GKarch.Glacier.Container.IInvocationInfo"/> instance that 
            contains information about the current method call.</param>
            <returns>The return value from the method.</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainerExtensions.UseLightInject(GKarch.Glacier.ICore,GKarch.Glacier.Container.IServiceContainer)">
            <summary>
            使用 LightInject 作为依赖解析器
            </summary>
            <param name="core">核心</param>
            <param name="container">LightInject 容器</param>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainerExtensions.CreateResolverFromSource(GKarch.Glacier.Container.IServiceContainer,GKarch.Glacier.Internal.ICoreSource)">
            <summary>
            通过核心源创建依赖解析器
            </summary>
            <param name="container">LightInject 容器</param>
            <param name="source">核心源</param>
            <returns>通过核心源创建的依赖解析器</returns>
        </member>
        <member name="M:GKarch.Glacier.Container.ServiceContainerExtensions.Populate(GKarch.Glacier.Container.IServiceContainer,GKarch.Glacier.Container.IServiceContainer)">
            <summary>
            为 <paramref name="container"/> 注册来自源容器的服务
            </summary>
            <param name="container">LightInject 容器</param>
            <param name="sourceContainer">源容器</param>
        </member>
        <member name="T:GKarch.Glacier.Internal.IHaveContainer">
            <summary>
            表示该类型关联服务容器
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.IHaveContainer.Container">
            <summary>
            容器
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.CoreRoot">
            <summary>
            root for core functionality
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.DefaultDependencyResolver">
            <summary>
            默认依赖解析器实现
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.DefaultDependencyResolver.Container">
            <summary>
            默认依赖解析器的容器
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultDependencyResolver.#ctor(GKarch.Glacier.Container.IServiceContainer)">
            <summary>
            创建默认依赖解析器
            </summary>
            <param name="container">容器</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultDependencyResolver.BeginScope">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Internal.DefaultResolverScope">
            <summary>
            默认依赖解析作用域实现
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.DefaultResolverScope.serviceContainer">
            <summary>
            核心容器
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.#ctor(GKarch.Glacier.Container.IServiceContainer,GKarch.Glacier.Container.Scope)">
            <summary>
            创建依赖解析作用域
            </summary>
            <param name="container">容器</param>
            <param name="scope">作用域</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.System#IServiceProvider#GetService(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.TryGet(System.Type,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.TryGet(System.Type,System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.TryGet``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.TryGet``1(System.String,``0@)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.Get(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.Get(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.Get``1">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.GetAll(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.GetAll``1">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.Inject(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DefaultResolverScope.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Internal.ICoreSource">
            <summary>
            Glacier核心源
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.ICoreSource.Resolver">
            <summary>
            核心依赖解析器
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.ICoreSource.SetComponent``1(``0)">
            <summary>
            设置核心组件
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="component">组件实现</param>
            <remarks>如果<paramref name="component"/>为空，则设置为默认行为。</remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.ICoreSource.RegisterFrom(System.Type)">
            <summary>
            注册组合根
            </summary>
            <param name="compositionRootType">组合根类型</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.ICoreSource.RegisterFrom``1(``0)">
            <summary>
            注册组合根
            </summary>
            <typeparam name="T">组合根类型</typeparam>
            <param name="compositionRoot">组合根</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.ICoreSource.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            注册程序集
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="T:GKarch.Glacier.Internal.CoreSource">
            <summary>
            Default core source implementation
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.CoreSource.Container">
            <summary>
            核心源容器
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.CoreSource.Resolver">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreSource.SetComponent``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreSource.RegisterFrom(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreSource.RegisterFrom``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreSource.RegisterAssembly(System.Reflection.Assembly)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreSource.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Internal.CoreSourceExtensions">
            <summary>
            核心源扩展
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreSourceExtensions.RegisterFrom``1(GKarch.Glacier.Internal.ICoreSource)">
            <summary>
            注册组合根
            </summary>
            <typeparam name="T">组合根类型</typeparam>
            <param name="source">核心源</param>
        </member>
        <member name="T:GKarch.Glacier.Internal.IDisposableObject">
            <summary>
            可销毁对象
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.IDisposableObject.IsDisposed">
            <summary>
            是否已销毁
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.DisposableObject">
            <summary>
            可销毁对象基类
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.DisposableObject.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DisposableObject.Dispose">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.DisposableObject.Dispose(System.Boolean)">
            <summary>
            销毁方法实现
            </summary>
            <param name="disposing">是否主动销毁</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.DisposableObject.ThrowIfDisposed">
            <summary>
            如果已销毁则抛出异常
            </summary>
            <exception cref="T:System.ObjectDisposedException">如果已销毁则抛出异常</exception>
        </member>
        <member name="T:GKarch.Glacier.Internal.IFluentSyntax">
            <summary>
            隐藏来自 <see cref="T:System.Object"/> 上不必要的方法
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.IFluentSyntax.Equals(System.Object)">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.IFluentSyntax.GetHashCode">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.IFluentSyntax.GetType">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.IFluentSyntax.ToString">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Node`2">
            <summary>
            节点基类实现
            </summary>
            <typeparam name="TKeyBit">键位元的类型</typeparam>
            <typeparam name="TValue">值的类型</typeparam>
        </member>
        <member name="T:GKarch.Glacier.Core">
            <summary>
            Glacier核心
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Core.#ctor">
            <summary>
            创建Glacier核心
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Core.#ctor(GKarch.Glacier.IGlacierSystem)">
            <summary>
            创建Glacier核心
            </summary>
            <param name="system">Glacier系统</param>
        </member>
        <member name="M:GKarch.Glacier.Core.#ctor(GKarch.Glacier.ICoreSettings)">
            <summary>
            通过设置创建Glacier核心
            </summary>
            <param name="settings">核心设置</param>
        </member>
        <member name="M:GKarch.Glacier.Core.#ctor(GKarch.Glacier.IGlacierSystem,GKarch.Glacier.ICoreSettings)">
            <summary>
            通过设置创建Glacier核心
            </summary>
            <param name="system">Glacier系统</param>
            <param name="settings">核心设置</param>
        </member>
        <member name="T:GKarch.Glacier.CoreBase">
            <summary>
            Glacier核心基类
            </summary>
        </member>
        <member name="P:GKarch.Glacier.CoreBase.Id">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.CoreBase.Name">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.CoreBase.Log">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.CoreBase.Resolver">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.CoreBase.Settings">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.CoreBase.Source">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.CoreBase.Container">
            <summary>
            核心容器
            </summary>
        </member>
        <member name="M:GKarch.Glacier.CoreBase.#ctor(GKarch.Glacier.IGlacierSystem)">
            <summary>
            创建Glacier核心
            </summary>
            <param name="system">Glacier系统</param>
        </member>
        <member name="M:GKarch.Glacier.CoreBase.#ctor(GKarch.Glacier.IGlacierSystem,GKarch.Glacier.ICoreSettings)">
            <summary>
            通过设置创建Glacier核心
            </summary>
            <param name="system">Glacier系统</param>
            <param name="settings">核心设置</param>
        </member>
        <member name="M:GKarch.Glacier.CoreBase.#ctor(GKarch.Glacier.IGlacierSystem,GKarch.Glacier.Container.IServiceContainer,GKarch.Glacier.ICoreSettings)">
            <summary>
            通过核心站点容器和设置创建Glacier核心
            </summary>
            <param name="system">Glacier系统</param>
            <param name="container">核心源容器</param>
            <param name="settings">核心设置</param>
        </member>
        <member name="M:GKarch.Glacier.CoreBase.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Formatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a human-readable representation of a particular object.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="processedObjects"></param>
            <param name="nestedPropertyLevel">
                The level of nesting for the supplied value. This is used for indenting the format string for objects that have
                no <see cref="M:System.Object.ToString"/> override.
            </param>
            <param name="useLineBreaks">
            Indicates whether the formatter should use line breaks when the specific <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> supports it.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:GKarch.Glacier.IGlacierSystem">
            <summary>
            Glacier系统接口
            </summary>
        </member>
        <member name="P:GKarch.Glacier.IGlacierSystem.Bootstrapper">
            <summary>
            启动器核心
            </summary>
        </member>
        <member name="P:GKarch.Glacier.IGlacierSystem.LogManager">
            <summary>
            日志记录器管理器
            </summary>
        </member>
        <member name="P:GKarch.Glacier.IGlacierSystem.Core">
            <summary>
            默认核心
            </summary>
        </member>
        <member name="P:GKarch.Glacier.IGlacierSystem.Log">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="P:GKarch.Glacier.IGlacierSystem.Resolver">
            <summary>
            依赖解析器
            </summary>
            <remarks>不设置或者设置为<lang>null</lang>则使用默认解析器</remarks>
        </member>
        <member name="T:GKarch.Glacier.GlacierSystem">
            <summary>
            Glacier系统
            </summary>
        </member>
        <member name="P:GKarch.Glacier.GlacierSystem.Default">
            <summary>
            默认Glacier系统
            </summary>
        </member>
        <member name="P:GKarch.Glacier.GlacierSystem.Core">
            <summary>
            默认Glacier核心
            </summary>
        </member>
        <member name="P:GKarch.Glacier.GlacierSystem.Log">
            <summary>
            默认日志记录器
            </summary>
        </member>
        <member name="P:GKarch.Glacier.GlacierSystem.Resolver">
            <summary>
            默认依赖解析器
            </summary>
        </member>
        <member name="P:GKarch.Glacier.GlacierSystem.Bootstrapper">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.GlacierSystem.LogManager">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.GlacierSystem.GKarch#Glacier#IGlacierSystem#Core">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.GlacierSystem.GKarch#Glacier#IGlacierSystem#Log">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.GlacierSystem.GKarch#Glacier#IGlacierSystem#Resolver">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.GlacierSystem.Reset">
            <summary>
            Reset the default core for testing.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.GlacierSystem.GKarch#Glacier#ICoreRegistry#Register(GKarch.Glacier.ICore)">
            <summary>
            Register the core and set a random name.
            </summary>
            <param name="core">The core.</param>
        </member>
        <member name="M:GKarch.Glacier.GlacierSystem.GKarch#Glacier#ICoreRegistry#Unregister(GKarch.Glacier.ICore)">
            <summary>
            Unregister the core.
            </summary>
            <param name="core">The core.</param>
        </member>
        <member name="T:GKarch.Glacier.ICore">
            <summary>
            Glacier核心
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ICore.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ICore.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ICore.Log">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ICore.Resolver">
            <summary>
            依赖解析器
            </summary>
            <remarks>不设置或者设置为<c>null</c>则使用默认解析器</remarks>
        </member>
        <member name="P:GKarch.Glacier.ICore.Settings">
            <summary>
            核心设置
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ICore.System">
            <summary>
            Glacier系统
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ICore.Source">
            <summary>
            核心源，提供对核心组件的配置功能
            </summary>
        </member>
        <member name="T:GKarch.Glacier.ICoreSettings">
            <summary>
            Glacier核心设置
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ICoreSettings.Name">
            <summary>
            核心名称
            </summary>
            <remarks>默认值为<c>null</c>，表示使用自动生成的核心名称</remarks>
        </member>
        <member name="P:GKarch.Glacier.ICoreSettings.UseIsolatedResolver">
            <summary>
            是否优先使用独立依赖解析器
            </summary>
            <remarks>
            默认值为<c>false</c>，表示当没有自行设置依赖解析器时，优先使用全局依赖解析器；
            如果设置为<c>true</c>，表示当没有自行设置依赖解析器时，优先使用独立依赖解析器。
            </remarks>
        </member>
        <member name="P:GKarch.Glacier.ICoreSettings.AutoComposition">
            <summary>
            核心容器是否自动加载扩展
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ICoreSettings.CompositionPattern">
            <summary>
            核心容器扩展搜索模式
            </summary>
        </member>
        <member name="T:GKarch.Glacier.CoreSettings">
            <summary>
            核心设置默认实现
            </summary>
        </member>
        <member name="P:GKarch.Glacier.CoreSettings.Name">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.CoreSettings.UseIsolatedResolver">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.CoreSettings.AutoComposition">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.CoreSettings.CompositionPattern">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.IDependencyScope">
            <summary>
            依赖解析作用域
            </summary>
        </member>
        <member name="M:GKarch.Glacier.IDependencyScope.TryGet(System.Type,System.Object@)">
            <summary>
            尝试按类型获取实例
            </summary>
            <param name="type">类型</param>
            <param name="instance">获取的实例</param>
            <returns>是否成功获取实例</returns>
            <see cref="M:GKarch.Glacier.IDependencyScope.Get(System.Type)"/>
        </member>
        <member name="M:GKarch.Glacier.IDependencyScope.TryGet(System.Type,System.String,System.Object@)">
            <summary>
            尝试按类型和名称获取实例
            </summary>
            <param name="type">类型</param>
            <param name="name">名称</param>
            <param name="instance">获取的实例</param>
            <returns>是否成功获取实例</returns>
            <see cref="M:GKarch.Glacier.IDependencyScope.Get(System.Type,System.String)"/>
        </member>
        <member name="M:GKarch.Glacier.IDependencyScope.TryGet``1(``0@)">
            <summary>
            尝试按泛型类型获取实例
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="instance">获取的实例</param>
            <returns>是否成功获取实例</returns>
            <see cref="M:GKarch.Glacier.IDependencyScope.Get``1"/>
        </member>
        <member name="M:GKarch.Glacier.IDependencyScope.TryGet``1(System.String,``0@)">
            <summary>
            尝试按泛型类型获取实例
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="instance">获取的实例</param>
            <returns>是否成功获取实例</returns>
            <see cref="M:GKarch.Glacier.IDependencyScope.Get``1(System.String)"/>
        </member>
        <member name="M:GKarch.Glacier.IDependencyScope.Get(System.Type)">
            <summary>
            按类型获取实例
            </summary>
            <param name="type">类型</param>
            <returns>获取的实例</returns>
            <see cref="M:GKarch.Glacier.IDependencyScope.TryGet(System.Type,System.Object@)"/>
        </member>
        <member name="M:GKarch.Glacier.IDependencyScope.Get(System.Type,System.String)">
            <summary>
            按类型和名称获取实例
            </summary>
            <param name="type">类型</param>
            <param name="name">名称</param>
            <returns>获取的实例</returns>
            <see cref="M:GKarch.Glacier.IDependencyScope.TryGet(System.Type,System.String,System.Object@)"/>
        </member>
        <member name="M:GKarch.Glacier.IDependencyScope.Get``1">
            <summary>
            按泛型类型获取实例
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns>获取的实例</returns>
            <see cref="M:GKarch.Glacier.IDependencyScope.TryGet``1(``0@)"/>
        </member>
        <member name="M:GKarch.Glacier.IDependencyScope.Get``1(System.String)">
            <summary>
            按泛型类型和名称获取实例
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <returns>获取的实例</returns>
            <see cref="M:GKarch.Glacier.IDependencyScope.TryGet``1(System.String,``0@)"/>
        </member>
        <member name="M:GKarch.Glacier.IDependencyScope.GetAll(System.Type)">
            <summary>
            按类型获取所有实例
            </summary>
            <param name="type">类型</param>
            <returns>获取的所有实例</returns>
        </member>
        <member name="M:GKarch.Glacier.IDependencyScope.GetAll``1">
            <summary>
            按泛型类型获取所有实例
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns>获取的所有实例</returns>
        </member>
        <member name="M:GKarch.Glacier.IDependencyScope.Inject(System.Object)">
            <summary>
            对已有对象进行依赖注入
            </summary>
            <param name="obj">需进行依赖注入的对象</param>
            <returns>依赖注入后的对象</returns>
        </member>
        <member name="T:GKarch.Glacier.IDependencyResolver">
            <summary>
            依赖解析器
            </summary>
        </member>
        <member name="M:GKarch.Glacier.IDependencyResolver.BeginScope">
            <summary>
            新建一个依赖解析作用域
            </summary>
            <returns>新建的依赖解析作用域</returns>
        </member>
        <member name="T:GKarch.Glacier.FormatMessageHandler">
            <summary>
            这种原型的方法可以被例如 <see cref="M:GKarch.Glacier.ILog.Debug(System.Action{GKarch.Glacier.FormatMessageHandler})"/> 使用，
            向底层输出系统“提交”信息，提高性能。
            </summary>
            <param name="format">格式化字符串，见 <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">格式化参数，见 <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <seealso cref="T:GKarch.Glacier.ILog"/>
        </member>
        <member name="T:GKarch.Glacier.ILog">
            <summary>
            统一日志接口
            </summary>
            <remarks>
            <para>实现者应该延迟调用 <see cref="M:System.Object.ToString"/> 方法以提高性能。</para>
            <para>
            每一种 <see cref="T:GKarch.Glacier.ILog"/> 上的方法都提供了支持 <see cref="T:System.Action`1"/> 参数的重载，
            使用这种重载可以延迟信息的格式化，格式化字符串的消耗比较大，如果信息根本不会被记录（比如因为 <see cref="T:GKarch.Glacier.LogLevel"/> 的设置）, 
            就可以避免格式化字符串带来的性能损失。
            </para>
            </remarks>
            <example>
            下面的例子演示了使用回调方式的记录，<see cref="M:System.Random.NextDouble"/> 和 <see cref="M:System.String.Format(System.String,System.Object[])"/> 只有当 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 启用是才会被调用：
            <code>
            Log.Debug( m=&gt;m(&quot;result is {0}&quot;, random.NextDouble()) );
            Log.Debug(delegate(m) { m(&quot;result is {0}&quot;, random.NextDouble()); });
            </code>
            </example>
            <seealso cref="T:System.Action`1"/>
        </member>
        <member name="P:GKarch.Glacier.ILog.IsTraceEnabled">
            <summary>
            判断是否启用 <see cref="F:GKarch.Glacier.LogLevel.Trace"/> 级记录。
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ILog.IsDebugEnabled">
            <summary>
            判断是否启用 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 级记录。
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ILog.IsInfoEnabled">
            <summary>
            判断是否启用 <see cref="F:GKarch.Glacier.LogLevel.Info"/> 级记录。
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ILog.IsWarnEnabled">
            <summary>
            判断是否启用 <see cref="F:GKarch.Glacier.LogLevel.Warn"/> 级记录。
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ILog.IsErrorEnabled">
            <summary>
            判断是否启用 <see cref="F:GKarch.Glacier.LogLevel.Error"/> 级记录。
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ILog.IsFatalEnabled">
            <summary>
            判断是否启用 <see cref="F:GKarch.Glacier.LogLevel.Fatal"/> 级记录。
            </summary>
        </member>
        <member name="M:GKarch.Glacier.ILog.Trace(System.Object)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Trace"/> 级记录消息对象。
            </summary>
            <param name="message">需记录的消息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Trace(System.Object,System.Exception)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Trace"/> 级记录消息对象，并包括一个 <see cref="T:System.Exception"/> 异常对象的堆栈信息。
            </summary>
            <param name="message">需记录的消息</param>
            <param name="exception">需记录的异常</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.TraceFormat(System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Trace"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.TraceFormat(System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Trace"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Trace"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Trace"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Trace(System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Trace"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Trace(System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Trace"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包含它的堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Trace(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Trace"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Trace(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Trace"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包含它的堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Debug(System.Object)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 级记录消息对象。
            </summary>
            <param name="message">需记录的消息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Debug(System.Object,System.Exception)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 级记录消息对象，并包括一个 <see cref="T:System.Exception"/> 异常对象的堆栈信息。
            </summary>
            <param name="message">需记录的消息</param>
            <param name="exception">需记录的异常，包含它的堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.DebugFormat(System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.DebugFormat(System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Debug(System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Debug(System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包含它的堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Debug(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Debug(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Debug"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包含它的堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Info(System.Object)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Info"/> 级记录消息对象。
            </summary>
            <param name="message">需记录的消息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Info(System.Object,System.Exception)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Info"/> 级记录消息对象，并包括一个 <see cref="T:System.Exception"/> 异常对象的堆栈信息。
            </summary>
            <param name="message">需记录的消息</param>
            <param name="exception">需记录的异常，包含它的堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.InfoFormat(System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Info"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.InfoFormat(System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Info"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Info"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Info"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Info(System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Info"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Info(System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Info"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包含它的堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Info(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Info"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Info(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Info"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包括堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Warn(System.Object)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Warn"/> 级记录消息对象。
            </summary>
            <param name="message">需记录的消息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Warn(System.Object,System.Exception)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Warn"/> 级记录消息对象，并包括一个 <see cref="T:System.Exception"/> 异常对象的堆栈信息。
            </summary>
            <param name="message">需记录的消息</param>
            <param name="exception">需记录的异常，包括堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Warn"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.WarnFormat(System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Warn"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Warn"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Warn"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Warn(System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Warn"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Warn(System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Warn"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包括堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Warn(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Warn"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Warn(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Warn"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包含它的堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Error(System.Object)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Error"/> 级记录消息对象。
            </summary>
            <param name="message">需记录的消息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Error(System.Object,System.Exception)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Error"/> 级记录消息对象，并包括一个 <see cref="T:System.Exception"/> 异常对象的堆栈信息。
            </summary>
            <param name="message">需记录的消息</param>
            <param name="exception">需记录的异常，包括堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Error"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.ErrorFormat(System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Error"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Error"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Error"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Error(System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Error"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Error(System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Error"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包括堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Error(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Error"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Error(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Error"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包括堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Fatal(System.Object)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Fatal"/> 级记录消息对象。
            </summary>
            <param name="message">需记录的消息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Fatal"/> 级记录消息对象，并包括一个 <see cref="T:System.Exception"/> 异常对象的堆栈信息。
            </summary>
            <param name="message">需记录的消息</param>
            <param name="exception">需记录的异常，包括堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.FatalFormat(System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Fatal"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.FatalFormat(System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Fatal"/> 级记录消息。
            </summary>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Fatal"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            使用 <see cref="F:GKarch.Glacier.LogLevel.Fatal"/> 级记录消息。
            </summary>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="format">格式化字符串，见<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">需记录的异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Fatal(System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Fatal"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Fatal(System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Fatal"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包含它的堆栈信息</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Fatal(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler})">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Fatal"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
        </member>
        <member name="M:GKarch.Glacier.ILog.Fatal(System.IFormatProvider,System.Action{GKarch.Glacier.FormatMessageHandler},System.Exception)">
            <summary>
            通过回调方法获得消息，并使用 <see cref="F:GKarch.Glacier.LogLevel.Fatal"/> 级记录消息。
            </summary>
            <remarks>
            使用这个方法可以避免因为loglevel的设置而不必要的生成消息的损耗。
            </remarks>
            <param name="formatProvider">提供有关此实例的区域性特定格式设置信息，见<see cref="T:System.IFormatProvider"/> </param>
            <param name="formatMessageCallback">回调方法，当与日志级别匹配时才会被调用</param>
            <param name="exception">需记录的异常，包括堆栈信息</param>
        </member>
        <member name="P:GKarch.Glacier.ILog.GlobalVariablesContext">
            <summary>
            返回全局变量上下文
            </summary>
        </member>
        <member name="P:GKarch.Glacier.ILog.ThreadVariablesContext">
            <summary>
            返回线程变量上下文
            </summary>
        </member>
        <member name="T:GKarch.Glacier.LogLevel">
            <summary>
            7种日志级别
            </summary>
        </member>
        <member name="F:GKarch.Glacier.LogLevel.All">
            <summary>
            记录所有级别
            </summary>
        </member>
        <member name="F:GKarch.Glacier.LogLevel.Trace">
            <summary>
            Trace 跟踪级
            </summary>
        </member>
        <member name="F:GKarch.Glacier.LogLevel.Debug">
            <summary>
            Debug 调试级
            </summary>
        </member>
        <member name="F:GKarch.Glacier.LogLevel.Info">
            <summary>
            Info 信息级
            </summary>
        </member>
        <member name="F:GKarch.Glacier.LogLevel.Warn">
            <summary>
            Warn 警告级
            </summary>
        </member>
        <member name="F:GKarch.Glacier.LogLevel.Error">
            <summary>
            Error 错误级
            </summary>
        </member>
        <member name="F:GKarch.Glacier.LogLevel.Fatal">
            <summary>
            Fatal 致命级
            </summary>
        </member>
        <member name="F:GKarch.Glacier.LogLevel.Off">
            <summary>
            不进行记录
            </summary>
        </member>
        <member name="T:GKarch.Glacier.INode">
            <summary>
            节点
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.Parent">
            <summary>
            该节点的父节点
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.Children">
            <summary>
            该节点的直接子节点
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.KeyBit">
            <summary>
            获取该节点关联的键位元
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.HasValue">
            <summary>
            判断该节点是否有值
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.Value">
            <summary>
            获取或设置该节点的值
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.Values">
            <summary>
            获取该节点及其直接子节点的值
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.Count">
            <summary>
            获取该节点的直接子节点的数量
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.IsRoot">
            <summary>
            判断该节点是否为根节点
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.IsLeaf">
            <summary>
            判断该节点是否为叶子节点（不含子节点）
            </summary>
        </member>
        <member name="M:GKarch.Glacier.INode.ClearValue">
            <summary>
            清除该节点的值。
            </summary>
        </member>
        <member name="M:GKarch.Glacier.INode.GetChild(System.String)">
            <summary>
            尝试按指定键获取相关联的子节点。
            </summary>
            <param name="key">键</param>
            <returns>如果与该键对应的子节点存在，则为该子节点，否则为<c>null</c></returns>
        </member>
        <member name="M:GKarch.Glacier.INode.RemoveChild(System.String)">
            <summary>
            删除与指定键对应的子节点及其子代节点。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:GKarch.Glacier.INode.MoveToChild``1(System.String)">
            <summary>
            按指定键查找对应的子节点，如不存在则增加一个与指定键对应的子节点，并返回该子节点。
            </summary>
            <param name="key">键</param>
            <returns>如果指定键已存在，则返回其对应的子节点，否则返回新建的子节点</returns>
        </member>
        <member name="M:GKarch.Glacier.INode.Trim">
            <summary>
            删除所有子节点。
            </summary>
        </member>
        <member name="M:GKarch.Glacier.INode.Clear">
            <summary>
            清空该节点存储的值，并删除所有子节点。
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.CountAll">
            <summary>
            获取该节点的子代节点总数
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.Descendants">
            <summary>
            获取该节点的所有子代节点
            </summary>
        </member>
        <member name="P:GKarch.Glacier.INode.AllValues">
            <summary>
            获取该节点及其子代节点的值
            </summary>
        </member>
        <member name="M:GKarch.Glacier.INode.Trim(System.Int32)">
            <summary>
            删除该节点指定深度下的所有子代节点
            </summary>
            <param name="depth">深度，0表示直接子节点</param>
            <exception cref="T:System.ArgumentException">如果节点深度小于0，则抛出异常</exception>
        </member>
        <member name="M:GKarch.Glacier.INode.AddChild(System.String,GKarch.Glacier.INode)">
            <summary>
            添加子节点，将其从原父节点下移动到该节点下
            </summary>
            <param name="key">子节点的新键</param>
            <param name="child">需添加的子节点</param>
            <returns>如果与该键对应的子节点已存在，则为<c>false</c>，否则为<c>true</c></returns>
        </member>
        <member name="M:GKarch.Glacier.INode.LinkChild(System.String,GKarch.Glacier.INode)">
            <summary>
            链接子节点，将其添加到该节点下
            </summary>
            <param name="key">子节点的新键</param>
            <param name="child">需添加的子节点</param>
            <returns>如果与该键对应的子节点已存在，则为<c>false</c>，否则为<c>true</c></returns>
        </member>
        <member name="P:GKarch.Glacier.INode.Item(System.String)">
            <summary>
            获取或设置指定键的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:GKarch.Glacier.INode`1">
            <summary>
            泛型节点
            </summary>
            <typeparam name="T">值的类型</typeparam>
        </member>
        <member name="P:GKarch.Glacier.INode`1.Value">
            <summary>
            获取或设置该节点的值
            </summary>
        </member>
        <member name="M:GKarch.Glacier.INode`1.MoveToChild``1(System.String)">
            <summary>
            按指定键查找对应的子节点，如不存在则增加一个与指定键对应的子节点，并返回该子节点。
            </summary>
            <typeparam name="TVal">子节点的值的类型</typeparam>
            <param name="key">键</param>
            <returns>如果指定键已存在，则返回其对应的子节点，否则返回新建的子节点</returns>
        </member>
        <member name="M:GKarch.Glacier.NodeExtensions.Get``1(GKarch.Glacier.INode,System.String)">
            <summary>
            获取指定键的值
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="node">节点</param>
            <param name="key">键</param>
            <returns>值，如果没有值，则返回<c>default(T)</c></returns>
        </member>
        <member name="M:GKarch.Glacier.NodeExtensions.Get``1(GKarch.Glacier.INode,System.String,``0)">
            <summary>
            获取指定键的值
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="node">节点</param>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值，如果没有值，则返回<paramref name="defaultValue"/></returns>
        </member>
        <member name="T:GKarch.Glacier.IPolicy">
            <summary>
            瞬态异常处理策略
            </summary>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.Execute(System.Action,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            使用该策略执行委托
            </summary>
            <param name="action">需执行的委托</param>
            <param name="contextData">用户数据</param>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.Execute``1(System.Func{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            使用该策略执行委托
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="action">需执行的委托</param>
            <param name="contextData">用户数据</param>
            <returns>委托返回值</returns>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.ExecuteAndCapture(System.Action,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            使用该策略执行委托并捕获异常
            </summary>
            <param name="action">需执行的委托</param>
            <param name="contextData">用户数据</param>
            <returns>策略执行结果</returns>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.ExecuteAndCapture``1(System.Func{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            使用该策略执行委托并捕获异常
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="action">需执行的委托</param>
            <param name="contextData">用户数据</param>
            <returns>策略执行结果</returns>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            使用该策略执行异步任务
            </summary>
            <param name="action">需执行的异步任务</param>
            <param name="contextData">用户数据</param>
            <param name="continueOnCapturedContext">是否在捕获的上下文继续执行</param>
            <returns>异步任务结果</returns>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            使用该策略执行异步任务
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="action">需执行的异步任务</param>
            <param name="contextData">用户数据</param>
            <param name="continueOnCapturedContext">是否在捕获的上下文继续执行</param>
            <returns>异步策略执行结果</returns>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            使用该策略执行异步任务
            </summary>
            <param name="action">需执行的异步任务</param>
            <param name="cancellationToken">取消标记</param>
            <param name="contextData">用户数据</param>
            <param name="continueOnCapturedContext">是否在捕获的上下文继续执行</param>
            <returns>异步策略执行结果</returns>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            使用该策略执行异步任务
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="action">需执行的异步任务</param>
            <param name="cancellationToken">取消标记</param>
            <param name="contextData">用户数据</param>
            <param name="continueOnCapturedContext">是否在捕获的上下文继续执行</param>
            <returns>异步策略执行结果</returns>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.ExecuteAndCaptureAsync(System.Func{System.Threading.Tasks.Task},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            使用该策略执行委托并捕获异常
            </summary>
            <param name="action">需执行的异步任务</param>
            <param name="contextData">用户数据</param>
            <param name="continueOnCapturedContext">是否在捕获的上下文继续执行</param>
            <returns>异步策略执行结果</returns>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.ExecuteAndCaptureAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            使用该策略执行委托并捕获异常
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="action">需执行的异步任务</param>
            <param name="contextData">用户数据</param>
            <param name="continueOnCapturedContext">是否在捕获的上下文继续执行</param>
            <returns>异步策略执行结果</returns>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.ExecuteAndCaptureAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            使用该策略执行委托并捕获异常
            </summary>
            <param name="action">需执行的异步任务</param>
            <param name="cancellationToken">取消标记</param>
            <param name="contextData">用户数据</param>
            <param name="continueOnCapturedContext">是否在捕获的上下文继续执行</param>
            <returns>异步策略执行结果</returns>
        </member>
        <member name="M:GKarch.Glacier.IPolicy.ExecuteAndCaptureAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            使用该策略执行委托并捕获异常
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="action">需执行的异步任务</param>
            <param name="cancellationToken">取消标记</param>
            <param name="contextData">用户数据</param>
            <param name="continueOnCapturedContext">是否在捕获的上下文继续执行</param>
            <returns>异步策略执行结果</returns>
        </member>
        <member name="T:GKarch.Glacier.PolicyResult">
            <summary>
            策略执行结果
            </summary>
        </member>
        <member name="P:GKarch.Glacier.PolicyResult.Success">
            <summary>
            是否成功执行
            </summary>
        </member>
        <member name="P:GKarch.Glacier.PolicyResult.FinalException">
            <summary>
            最后一次异常（若成功执行，则为<c>null</c>）
            </summary>
        </member>
        <member name="P:GKarch.Glacier.PolicyResult.Unhandled">
            <summary>
            若未成功执行，是否发生未捕获的异常
            </summary>
        </member>
        <member name="T:GKarch.Glacier.PolicyResult`1">
            <summary>
            策略执行结果
            </summary>
        </member>
        <member name="P:GKarch.Glacier.PolicyResult`1.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="T:GKarch.Glacier.IPolicyBuilder">
            <summary>
            策略构造器
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Policy">
            <summary>
            瞬态异常处理策略
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Policy.Handle``1">
            <summary>
            定义该策略可处理的异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <returns>策略构造器</returns>
        </member>
        <member name="M:GKarch.Glacier.Policy.Handle``1(System.Func{``0,System.Boolean})">
            <summary>
            使用过滤器定义该策略可处理的异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="exceptionPredicate">异常过滤器</param>
            <returns>策略构造器</returns>
        </member>
        <member name="M:GKarch.Glacier.Policy.Execute(System.Action,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Policy.Execute``1(System.Func{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Policy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Policy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Policy.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Policy.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Policy.ExecuteAndCapture(System.Action,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Policy.ExecuteAndCapture``1(System.Func{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Policy.ExecuteAndCaptureAsync(System.Func{System.Threading.Tasks.Task},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Policy.ExecuteAndCaptureAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Policy.ExecuteAndCaptureAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Policy.ExecuteAndCaptureAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.PolicyExtensions.Or``1(GKarch.Glacier.IPolicyBuilder)">
            <summary>
            添加该策略可处理的异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
        </member>
        <member name="M:GKarch.Glacier.PolicyExtensions.Or``1(GKarch.Glacier.IPolicyBuilder,System.Func{``0,System.Boolean})">
            <summary>
            添加该策略可处理的异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="policyBuilder">策略生成器</param>
            <param name="exceptionPredicate">异常选择器</param>
        </member>
        <member name="M:GKarch.Glacier.FirePolicyExtensions.Fire(GKarch.Glacier.IPolicyBuilder)">
            <summary>
            执行并忽略异常
            </summary>
        </member>
        <member name="M:GKarch.Glacier.FirePolicyExtensions.Fire(GKarch.Glacier.IPolicyBuilder,System.Action{System.Exception})">
            <summary>
            执行，在异常时调用 <paramref name="onException"/>，给出异常
            </summary>
            <param name="policyBuilder">策略生成器</param>
            <param name="onException">在异常时执行的委托</param>
        </member>
        <member name="M:GKarch.Glacier.FirePolicyExtensions.Fire(GKarch.Glacier.IPolicyBuilder,System.Action{System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            执行，在异常时调用 <paramref name="onException"/>，给出异常以及用户数据
            </summary>
            <param name="policyBuilder">策略生成器</param>
            <param name="onException">在异常时执行的委托</param>
        </member>
        <member name="M:GKarch.Glacier.RetryPolicyExtensions.Retry(GKarch.Glacier.IPolicyBuilder)">
            <summary>
            重试 1 次
            </summary>
        </member>
        <member name="M:GKarch.Glacier.RetryPolicyExtensions.Retry(GKarch.Glacier.IPolicyBuilder,System.Int32)">
            <summary>
            重试 <paramref name="retryCount"/> 次
            </summary>
            <param name="policyBuilder">策略生成器</param>
            <param name="retryCount">重试次数</param>
        </member>
        <member name="M:GKarch.Glacier.RetryPolicyExtensions.Retry(GKarch.Glacier.IPolicyBuilder,System.Action{System.Exception,System.Int32})">
            <summary>
            重试 1 次，并在重试时调用 <paramref name="onRetry"/>，给出异常以及重试次数
            </summary>
            <param name="policyBuilder">策略生成器</param>
            <param name="onRetry">在重试时调用的委托</param>
        </member>
        <member name="M:GKarch.Glacier.RetryPolicyExtensions.Retry(GKarch.Glacier.IPolicyBuilder,System.Int32,System.Action{System.Exception,System.Int32})">
            <summary>
            重试 <paramref name="retryCount"/> 次，并在重试时调用 <paramref name="onRetry"/>，给出异常以及重试次数
            </summary>
            <param name="policyBuilder">策略生成器</param>
            <param name="retryCount">重试次数</param>
            <param name="onRetry">在重试时调用的委托</param>
        </member>
        <member name="M:GKarch.Glacier.RetryPolicyExtensions.Retry(GKarch.Glacier.IPolicyBuilder,System.Action{System.Exception,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            重试 1 次，并在重试时调用 <paramref name="onRetry"/>，给出异常、重试次数以及用户数据
            </summary>
            <param name="policyBuilder">策略生成器</param>
            <param name="onRetry">在重试时调用的委托</param>
        </member>
        <member name="M:GKarch.Glacier.RetryPolicyExtensions.Retry(GKarch.Glacier.IPolicyBuilder,System.Int32,System.Action{System.Exception,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            重试 <paramref name="retryCount"/> 次，并在重试时调用 <paramref name="onRetry"/>，给出异常、重试次数以及用户数据
            </summary>
            <param name="policyBuilder">策略生成器</param>
            <param name="retryCount">重试次数</param>
            <param name="onRetry">在重试时调用的委托</param>
        </member>
        <member name="T:GKarch.Glacier.Logging.ILoggerProvider">
            <summary>
            日志记录器工厂，提供日志记录器
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Logging.ILoggerProvider.GetLogger(System.Type)">
            <summary>
            按类型获取日志记录器
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:GKarch.Glacier.Logging.ILoggerProvider.GetLogger(System.String)">
            <summary>
            按名称获取日志记录器
            </summary>
            <param name="key">名称</param>
        </member>
        <member name="T:GKarch.Glacier.Logging.DefaultLoggerProvider">
            <summary>
            默认日志提供器，提供 'nop'、'debug'、'trace'、'console' 四种日志记录器
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Logging.DefaultLoggerProvider.#ctor(GKarch.Glacier.Internal.Logging.ILoggerFactoryAdapter)">
            <summary>
            创建 <see cref="T:GKarch.Glacier.Logging.DefaultLoggerProvider"/> 实例
            </summary>
            <param name="adapter">内部日志记录器实现</param>
        </member>
        <member name="M:GKarch.Glacier.Logging.DefaultLoggerProvider.GKarch#Glacier#Logging#ILoggerProvider#GetLogger(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Logging.DefaultLoggerProvider.GKarch#Glacier#Logging#ILoggerProvider#GetLogger(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Logging.IVariablesContext">
            <summary>
            日志记录器的变量上下文
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Logging.IVariablesContext.Set(System.String,System.Object)">
            <summary>
            添加或更新变量。
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:GKarch.Glacier.Logging.IVariablesContext.Get(System.String)">
            <summary>
            获取变量值
            </summary>
            <param name="key">键</param>
            <returns>值，若键不存在则为<c>null</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Logging.IVariablesContext.Contains(System.String)">
            <summary>
            检查键是否存在
            </summary>
            <param name="key">键</param>
            <returns>存在则为<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Logging.IVariablesContext.Remove(System.String)">
            <summary>
            移除一个变量
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:GKarch.Glacier.Logging.IVariablesContext.Clear">
            <summary>
            清除所有变量
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Logging.NoOpVariablesContext">
            <summary>
            A null-functionality implementation of <see cref="T:GKarch.Glacier.Logging.IVariablesContext" />
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Logging.NoOpVariablesContext.Set(System.String,System.Object)">
            <summary>
            Sets the value of a new or existing variable within the global context
            </summary>
            <param name="key">The key of the variable that is to be added</param>
            <param name="value">The value to add</param>
        </member>
        <member name="M:GKarch.Glacier.Logging.NoOpVariablesContext.Get(System.String)">
            <summary>
            Gets the value of a variable within the global context
            </summary>
            <param name="key">The key of the variable to get</param>
            <returns>The value or null if not found</returns>
        </member>
        <member name="M:GKarch.Glacier.Logging.NoOpVariablesContext.Contains(System.String)">
            <summary>
            Checks if a variable is set within the global context
            </summary>
            <param name="key">The key of the variable to check for</param>
            <returns>True if the variable is set</returns>
        </member>
        <member name="M:GKarch.Glacier.Logging.NoOpVariablesContext.Remove(System.String)">
            <summary>
            Removes a variable from the global context by key
            </summary>
            <param name="key">The key of the variable to remove</param>
        </member>
        <member name="M:GKarch.Glacier.Logging.NoOpVariablesContext.Clear">
            <summary>
            Clears the global context variables
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Logging.LoggerWrapper">
            <summary>
            Wrapper for bridging between Glacier.Internal.Logging.ILog and Glacier.ILog
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Logging.LoggerWrapper.HandlerClosure">
            <summary>
            Replacement for "h => formatMessageCallback((format, args) => h(format, args))"
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Logging.VariablesContextWrapper">
            <summary>
            Wrapper for bridging between Glacier.Internal.Logging.IVariablesContext and Glacier.Logging.IVariablesContext
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Logging.ILogManager">
            <summary>
            日志记录器管理器
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Logging.ILogManager.Provider">
            <summary>
            获取或设置日志记录器工厂
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Logging.ILogManager.GetLogger``1">
            <summary>
            按类型获取日志记录器
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:GKarch.Glacier.Logging.ILogManager.GetLogger(System.Type)">
            <summary>
            按类型获取日志记录器
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:GKarch.Glacier.Logging.ILogManager.GetLogger(System.String)">
            <summary>
            按名称获取日志记录器
            </summary>
            <param name="key">名称</param>
        </member>
        <member name="M:GKarch.Glacier.Logging.ILogManager.Reset">
            <summary>
            重置管理器，使用配置中的设置
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Logging.LogManager.#ctor">
            <summary>
            Performs static 1-time init of LogManager by calling <see cref="M:GKarch.Glacier.Logging.LogManager.Reset"/>
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Logging.LogManager.Reset">
            <summary>
            Reset the <see cref="N:GKarch.Glacier.Internal.Logging" /> infrastructure to its default settings. This means, that configuration settings
            will be re-read from section <c>&lt;common/logging&gt;</c> of your <c>app.config</c>.
            </summary>
            <remarks>
            This is mainly used for unit testing, you wouldn't normally use this in your applications.<br/>
            <b>Note:</b><see cref="T:GKarch.Glacier.ILog"/> instances already handed out from this LogManager are not(!) affected. 
            Resetting LogManager only affects new instances being handed out.
            </remarks>
        </member>
        <member name="P:GKarch.Glacier.Logging.LogManager.Provider">
            <summary>
            Gets or sets the adapter.
            </summary>
            <value>The adapter.</value>
        </member>
        <member name="M:GKarch.Glacier.Logging.LogManager.GetLogger``1">
            <summary>
            Gets the logger by calling <see cref="M:GKarch.Glacier.Internal.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)"/>
            on the currently configured <see cref="P:GKarch.Glacier.Logging.LogManager.Provider"/> using the specified type.
            </summary>
            <returns>the logger instance obtained from the current <see cref="P:GKarch.Glacier.Logging.LogManager.Provider"/></returns>
        </member>
        <member name="M:GKarch.Glacier.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets the logger by calling <see cref="M:GKarch.Glacier.Internal.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)"/>
            on the currently configured <see cref="P:GKarch.Glacier.Logging.LogManager.Provider"/> using the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>the logger instance obtained from the current <see cref="P:GKarch.Glacier.Logging.LogManager.Provider"/></returns>
        </member>
        <member name="M:GKarch.Glacier.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Gets the logger by calling <see cref="M:GKarch.Glacier.Internal.Logging.ILoggerFactoryAdapter.GetLogger(System.String)"/>
            on the currently configured <see cref="P:GKarch.Glacier.Logging.LogManager.Provider"/> using the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>the logger instance obtained from the current <see cref="P:GKarch.Glacier.Logging.LogManager.Provider"/></returns>
        </member>
        <member name="M:GKarch.Glacier.Logging.LogManager.BuildLoggerFactory">
            <summary>
            Builds the logger factory adapter.
            </summary>
            <returns>a factory adapter instance. Is never <c>null</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_CannotActivateAbstractOrInterface(System.Object)">
            <summary>
            Cannot create instance of type '{0}' because it is either abstract or an interface.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_CommitWhenKeyMissing(System.Object)">
            <summary>
            Unable to commit because the following keys are missing from the configuration file: {0}.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_CommitWhenNewKeyFound(System.Object)">
            <summary>
            Unable to commit because a new key was added to the configuration file after last load operation. The newly added key is '{0}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_DuplicatedKeyInSwitchMappings(System.Object)">
            <summary>
            Keys in switch mappings are case-insensitive. A duplicated key '{0}' was found.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_FailedBinding(System.Object,System.Object)">
            <summary>
            Failed to convert '{0}' to type '{1}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_FailedToActivate(System.Object)">
            <summary>
            Failed to create instance of type '{0}'.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Strings.Error_InvalidFilePath">
            <summary>
            File path must be a non-empty string.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_InvalidSwitchMapping(System.Object)">
            <summary>
            The switch mappings contain an invalid switch '{0}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_KeyIsDuplicated(System.Object)">
            <summary>
            A duplicate key '{0}' was found.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_MissingParameterlessConstructor(System.Object)">
            <summary>
            Cannot create instance of type '{0}' because it is missing a public parameterless constructor.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Strings.Error_NoCommitableProvider">
            <summary>
            No registered configuration provider is capable of committing changes.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_ShortSwitchNotDefined(System.Object)">
            <summary>
            The short switch '{0}' is not defined in the switch mappings.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_UnrecognizedArgumentFormat(System.Object)">
            <summary>
            Unrecognized argument format: '{0}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_UnrecognizedLineFormat(System.Object)">
            <summary>
            Unrecognized line format: '{0}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_UnsupportedMultidimensionalArray(System.Object)">
            <summary>
            Cannot create instance of type '{0}' because multidimensional arrays are not supported.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Strings.Error_ValueIsMissing(System.Object)">
            <summary>
            Value for switch '{0}' is missing.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.VersionUtility.TrimVersion(System.Version)">
            <summary>
            Trims trailing zeros in revision and build.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.VersionUtility.ParseVersionSpec(System.String)">
            <summary>
            The version string is either a simple version or an arithmetic range
            e.g.
                 1.0         --> 1.0 ≤ x
                 (,1.0]      --> x ≤ 1.0
                 (,1.0)      --> x &lt; 1.0
                 [1.0]       --> x == 1.0
                 (1.0,)      --> 1.0 &lt; x
                 (1.0, 2.0)   --> 1.0 &lt; x &lt; 2.0
                 [1.0, 2.0]   --> 1.0 ≤ x ≤ 2.0
            </summary>
        </member>
        <member name="M:GKarch.Glacier.VersionUtility.GetSafeRange(GKarch.Glacier.SemanticVersion)">
            <summary>
            The safe range is defined as the highest build and revision for a given major and minor version
            </summary>
        </member>
        <member name="M:GKarch.Glacier.VersionUtility.GetPossibleVersions(GKarch.Glacier.SemanticVersion)">
            <summary>
            Returns all possible versions for a version. i.e. 1.0 would return 1.0, 1.0.0, 1.0.0.0
            </summary>
        </member>
        <member name="P:GKarch.Glacier.SemanticVersion.Version">
            <summary>
            Gets the normalized version portion.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.SemanticVersion.SpecialVersion">
            <summary>
            Gets the optional special version.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.SemanticVersion.Parse(System.String)">
            <summary>
            Parses a version string using loose semantic versioning rules that allows 2-4 version components followed by an optional special version.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.SemanticVersion.TryParse(System.String,GKarch.Glacier.SemanticVersion@)">
            <summary>
            Parses a version string using loose semantic versioning rules that allows 2-4 version components followed by an optional special version.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.SemanticVersion.TryParseStrict(System.String,GKarch.Glacier.SemanticVersion@)">
            <summary>
            Parses a version string using strict semantic versioning rules that allows exactly 3 components and an optional special version.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.SemanticVersion.ParseOptionalVersion(System.String)">
            <summary>
            Attempts to parse the version token as a SemanticVersion.
            </summary>
            <returns>An instance of SemanticVersion if it parses correctly, null otherwise.</returns>
        </member>
        <member name="T:GKarch.Glacier.Settings.ISettings">
            <summary>
            设置
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Settings.ISettings.Get``1(System.String,``0)">
            <summary>
            获取一项设置
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="key">该设置的键</param>
            <param name="defaultValue">默认值</param>
            <returns><paramref name="key"/>对应设置的值</returns>
            <seealso cref="M:GKarch.Glacier.Settings.SettingsExtensions.Get``1(GKarch.Glacier.Settings.ISettings,System.Linq.Expressions.Expression{System.Func{``0}},``0)"/>
        </member>
        <member name="M:GKarch.Glacier.Settings.ISettings.Set``1(System.String,``0)">
            <summary>
            设置一项设置
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="key">该设置的键</param>
            <param name="value">该设置的值</param>
            <seealso cref="M:GKarch.Glacier.Settings.SettingsExtensions.Set``1(GKarch.Glacier.Settings.ISettings,System.Linq.Expressions.Expression{System.Func{``0}},``0)"/>
        </member>
        <member name="T:GKarch.Glacier.Settings.SettingsExtensions">
            <summary>
            设置的扩展方法
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Settings.SettingsExtensions.Get``1(GKarch.Glacier.Settings.ISettings,System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            获取一项设置
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="settings">设置</param>
            <param name="propertyExpr">获取属性的表达式</param>
            <param name="defaultValue">默认值</param>
            <returns><paramref name="propertyExpr"/>对应设置的值</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/>或<paramref name="propertyExpr"/>值为<c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyExpr"/>不是获取属性的表达式</exception>
            <seealso cref="M:GKarch.Glacier.Settings.ISettings.Get``1(System.String,``0)"/>
        </member>
        <member name="M:GKarch.Glacier.Settings.SettingsExtensions.Set``1(GKarch.Glacier.Settings.ISettings,System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            设置一项设置
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="settings">设置</param>
            <param name="propertyExpr">该设置的键</param>
            <param name="value">该设置的值</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/>或<paramref name="propertyExpr"/>值为<c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyExpr"/>不是获取属性的表达式</exception>
            <seealso cref="M:GKarch.Glacier.Settings.ISettings.Set``1(System.String,``0)"/>
        </member>
        <member name="T:GKarch.Glacier.Settings.SettingsBase">
            <summary>
            设置默认实现
            </summary>
            <remarks>默认设置实现从<see cref="T:System.Dynamic.DynamicObject"/>继承，可以被作为<c>dynamic</c>对象使用。</remarks>
        </member>
        <member name="M:GKarch.Glacier.Settings.SettingsBase.Get``1(System.String,``0)">
            <inheritdoc />
            <remarks><paramref name="key"/>大小写无关</remarks>
        </member>
        <member name="M:GKarch.Glacier.Settings.SettingsBase.Set``1(System.String,``0)">
            <inheritdoc />
            <remarks><paramref name="key"/>大小写无关</remarks>
        </member>
        <member name="M:GKarch.Glacier.Settings.SettingsBase.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Settings.SettingsBase.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc />
        </member>
    </members>
</doc>
