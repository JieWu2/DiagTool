<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GKarch.Tundra.Misc</name>
    </assembly>
    <members>
        <member name="T:GKarch.Tundra.Misc.Keeper">
            <summary>
            单一实例工具
            </summary>
            <remarks>可以通过 <c>keeper:enabled</c> 配置来控制是否启用。</remarks>
        </member>
        <member name="P:GKarch.Tundra.Misc.Keeper.Default">
            <summary>
            默认单例工具
            </summary>
        </member>
        <member name="M:GKarch.Tundra.Misc.Keeper.#ctor">
            <summary>
            创建单例工具实例
            </summary>
            <remarks>使用全局核心</remarks>
        </member>
        <member name="M:GKarch.Tundra.Misc.Keeper.#ctor(System.String)">
            <summary>
            创建单例工具实例
            </summary>
            <param name="key">互斥体 key</param>
        </member>
        <member name="M:GKarch.Tundra.Misc.Keeper.#ctor(GKarch.Glacier.ICore,System.String)">
            <summary>
            创建单例工具实例
            </summary>
            <param name="core">Glacier 核心</param>
            <param name="key">互斥体 key</param>
        </member>
        <member name="M:GKarch.Tundra.Misc.Keeper.Test">
            <inheritdoc />
            <remarks>使用 1s 超时时间等待正在退出的实例</remarks>
        </member>
        <member name="M:GKarch.Tundra.Misc.Keeper.Pulse(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Tundra.Misc.Keeper.Close">
            <summary>
            释放单例，在程序退出时调用。
            </summary>
        </member>
        <member name="T:GKarch.Tundra.Misc.MiscRoot">
            <summary>
            Tundra.Misc 组合根，注册 Keeper、Timer 等功能
            </summary>
        </member>
        <member name="M:GKarch.Tundra.Misc.MiscRoot.Compose(GKarch.Glacier.Container.IServiceRegistry)">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Tundra.Timers.HybridTimer">
            <summary>
            混合定时器
            </summary>
        </member>
        <member name="F:GKarch.Tundra.Timers.HybridTimer._working">
            <summary>should continue to run</summary>
        </member>
        <member name="M:GKarch.Tundra.Timers.HybridTimer.#ctor">
            <summary>
            创建混合定时器实例
            </summary>
            <remarks>使用全局核心，默认 10ms 间隔，<see cref="F:System.Threading.ThreadPriority.Highest"/>优先级</remarks>
        </member>
        <member name="M:GKarch.Tundra.Timers.HybridTimer.#ctor(System.Int32)">
            <summary>
            创建混合定时器实例
            </summary>
            <param name="interval">触发间隔，以微秒（μs）为单位</param>
            <remarks>使用全局核心，默认<see cref="F:System.Threading.ThreadPriority.Highest"/>优先级</remarks>
        </member>
        <member name="M:GKarch.Tundra.Timers.HybridTimer.#ctor(System.Int32,System.Threading.ThreadPriority)">
            <summary>
            创建混合定时器实例
            </summary>
            <param name="interval">触发间隔，以微秒（μs）为单位</param>
            <param name="priority">线程优先级</param>
            <remarks>使用全局核心，10ms 间隔</remarks>
        </member>
        <member name="M:GKarch.Tundra.Timers.HybridTimer.#ctor(GKarch.Glacier.ICore,System.Int32,System.Threading.ThreadPriority)">
            <summary>
            创建混合定时器实例
            </summary>
            <param name="core">Glacier 核心</param>
            <param name="interval">触发间隔，以微秒（μs）为单位</param>
            <param name="priority">线程优先级</param>
        </member>
        <member name="M:GKarch.Tundra.Timers.HybridTimer.#ctor(GKarch.Glacier.ICore)">
            <summary>
            创建混合定时器实例
            </summary>
            <param name="core">Glacier 核心</param>
            <remarks>默认 10ms 间隔，<see cref="F:System.Threading.ThreadPriority.Highest"/>优先级</remarks>
        </member>
        <member name="M:GKarch.Tundra.Timers.HybridTimer.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Tundra.Timers.HybridTimer.Interval">
            <inheritdoc />
            <remarks>以微秒（μs）为单位</remarks>
        </member>
        <member name="P:GKarch.Tundra.Timers.HybridTimer.TriggerMode">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Tundra.Timers.HybridTimer.SpinReserve">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Tundra.Timers.HybridTimer.Priority">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Tundra.Timers.HybridTimer.Enabled">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Tundra.Timers.HybridTimer.BlockMode">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Tundra.Timers.HybridTimer.Start">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Tundra.Timers.HybridTimer.Stop">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Tundra.Timers.HybridTimer.StopAndWait(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Tundra.Timers.HybridTimer.Abort">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Tundra.Timers.IBlocker">
            <summary>
            Interface to support sleep, wait and poll block modes.
            </summary>
        </member>
        <member name="T:GKarch.Tundra.Timers.Blocker">
            <summary>
            Base class for blockers, implement core <see cref="M:GKarch.Tundra.Timers.Blocker.Block(GKarch.Tundra.Timers.MicroStopwatch,System.Int64,System.Int64,System.Nullable{System.Int32})"/> code.
            </summary>
        </member>
        <member name="T:GKarch.Tundra.Timers.Poller">
            <summary>
            Poll via Socket
            </summary>
        </member>
        <member name="M:GKarch.Tundra.Timers.Poller.Poll(System.Int32)">
            <summary>
            Poll
            </summary>
            <param name="amount">timeout in microseconds</param>
        </member>
        <member name="T:GKarch.Tundra.Timers.ITimer">
            <summary>
            定时器接口
            </summary>
        </member>
        <member name="P:GKarch.Tundra.Timers.ITimer.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:GKarch.Tundra.Timers.ITimer.Interval">
            <summary>
            触发间隔时间
            </summary>
        </member>
        <member name="M:GKarch.Tundra.Timers.ITimer.Start">
            <summary>
            开始
            </summary>
            <remarks>如果成功启动，则返回<c>true</c>；否则表示定时器已经开始，或<see cref="P:GKarch.Tundra.Timers.ITimer.Interval"/>的值无效。</remarks>
        </member>
        <member name="M:GKarch.Tundra.Timers.ITimer.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="P:GKarch.Tundra.Timers.ITimer.Tick">
            <summary>
            触发时的事件
            </summary>
            <remarks>
            <see cref="P:GKarch.Tundra.Timers.ITimer.TickEx"/>优先级更高，如果设置则不使用<see cref="P:GKarch.Tundra.Timers.ITimer.Tick"/>。
            Tick 相当于 TickEx 返回 <c>0</c>。
            </remarks>
        </member>
        <member name="P:GKarch.Tundra.Timers.ITimer.TickEx">
            <summary>
            触发时的事件
            </summary>
            <remarks>
            如果设置了<see cref="P:GKarch.Tundra.Timers.ITimer.TickEx"/>则不使用<see cref="P:GKarch.Tundra.Timers.ITimer.Tick"/>。
            返回值会加入下次间隔时间，从而进行动态调整，无需调整时返回 <c>0</c>。
            </remarks>
        </member>
        <member name="T:GKarch.Tundra.Timers.IHybridTimer">
            <summary>
            混合定时器接口
            </summary>
        </member>
        <member name="P:GKarch.Tundra.Timers.IHybridTimer.TriggerMode">
            <summary>
            触发模式
            </summary>
            <remarks>默认为<see cref="F:GKarch.Tundra.Timers.TriggerMode.FixedFrame"/>，即固定时间框架。</remarks>
        </member>
        <member name="P:GKarch.Tundra.Timers.IHybridTimer.BlockMode">
            <summary>
            阻塞模式
            </summary>
            <remarks>默认为<see cref="F:GKarch.Tundra.Timers.BlockMode.None"/>，即不进行阻塞，使用自旋等待。</remarks>
        </member>
        <member name="P:GKarch.Tundra.Timers.IHybridTimer.SpinReserve">
            <summary>
            保留用来进行自旋的时间
            </summary>
            <remarks>
            <para>
            默认为<c>null</c>，表示使用默认值；负值表示不阻塞只自旋；
            <c>0</c>表示只阻塞不自旋；正值表示期望保留给自旋的时间，先阻塞再自旋。
            </para>
            <para>如果<see cref="P:GKarch.Tundra.Timers.IHybridTimer.BlockMode"/>设置为<see cref="F:GKarch.Tundra.Timers.BlockMode.None"/>，则始终自旋。</para>
            </remarks>
        </member>
        <member name="P:GKarch.Tundra.Timers.IHybridTimer.Priority">
            <summary>
            线程优先级
            </summary>
            <remarks>默认为<see cref="F:System.Threading.ThreadPriority.Highest"/>，定时器启动后设置无效。</remarks>
        </member>
        <member name="M:GKarch.Tundra.Timers.IHybridTimer.StopAndWait(System.Int32)">
            <summary>
            停止并等待定时器结束
            </summary>
            <param name="timeout">超时时间，以毫秒（ms）为单位</param>
            <returns><c>true</c>表示正常停止，<c>false</c>表示超时结束</returns>
        </member>
        <member name="M:GKarch.Tundra.Timers.IHybridTimer.Abort">
            <summary>
            中止定时器线程
            </summary>
            <remarks>使用<see cref="M:System.Threading.Thread.Abort"/>中止定时器线程。危险方法，一般场景请勿使用。</remarks>
        </member>
        <member name="T:GKarch.Tundra.Timers.TriggerMode">
            <summary>
            触发模式
            </summary>
        </member>
        <member name="F:GKarch.Tundra.Timers.TriggerMode.FixedFrame">
            <summary>
            固定时间框架
            </summary>
        </member>
        <member name="F:GKarch.Tundra.Timers.TriggerMode.DelayableFrame">
            <summary>
            可推迟时间框架
            </summary>
        </member>
        <member name="F:GKarch.Tundra.Timers.TriggerMode.FixedWait">
            <summary>
            固定等待时间
            </summary>
        </member>
        <member name="T:GKarch.Tundra.Timers.BlockMode">
            <summary>
            阻塞模式
            </summary>
        </member>
        <member name="F:GKarch.Tundra.Timers.BlockMode.None">
            <summary>
            不进行阻塞，使用自旋等待
            </summary>
        </member>
        <member name="F:GKarch.Tundra.Timers.BlockMode.Sleep">
            <summary>
            使用 <see cref="M:System.Threading.Thread.Sleep(System.Int32)"/> 进行阻塞
            </summary>
        </member>
        <member name="F:GKarch.Tundra.Timers.BlockMode.WaitHandle">
            <summary>
            使用 <see cref="!:AutoResetEvent.WaitOne(int)"/> 进行阻塞
            </summary>
        </member>
        <member name="F:GKarch.Tundra.Timers.BlockMode.Poll">
            <summary>
            使用 <see cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)"/> 进行阻塞
            </summary>
        </member>
        <member name="T:GKarch.Tundra.Timers.TimerExtentions">
            <summary>
            定时器扩展方法
            </summary>
        </member>
        <member name="M:GKarch.Tundra.Timers.TimerExtentions.StopAndWait(GKarch.Tundra.Timers.IHybridTimer)">
            <summary>
            停止并等待定时器结束
            </summary>
            <param name="timer">定时器</param>
        </member>
        <member name="T:GKarch.Tundra.Timers.MmTimer">
            <summary>
            多媒体定时器
            </summary>
            <remarks>使用 winmm.dll 中的 timeSetEvent 定时</remarks>
        </member>
        <member name="M:GKarch.Tundra.Timers.MmTimer.#ctor">
            <summary>
            创建多媒体定时器实例
            </summary>
            <remarks>使用全局核心，默认 10ms 间隔</remarks>
        </member>
        <member name="M:GKarch.Tundra.Timers.MmTimer.#ctor(System.Int32)">
            <summary>
            创建多媒体定时器实例
            </summary>
            <param name="interval">触发间隔，以毫秒（ms）为单位</param>
        </member>
        <member name="M:GKarch.Tundra.Timers.MmTimer.#ctor(GKarch.Glacier.ICore,System.Int32)">
            <summary>
            创建多媒体定时器实例
            </summary>
            <param name="core">Glacier 核心</param>
            <param name="interval">触发间隔，以毫秒（ms）为单位</param>
        </member>
        <member name="M:GKarch.Tundra.Timers.MmTimer.#ctor(GKarch.Glacier.ICore)">
            <summary>
            创建多媒体定时器实例
            </summary>
            <param name="core">Glacier 核心</param>
            <remarks>默认 10ms 间隔</remarks>
        </member>
        <member name="M:GKarch.Tundra.Timers.MmTimer.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Tundra.Timers.MmTimer.Enabled">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Tundra.Timers.MmTimer.Interval">
            <inheritdoc />
            <remarks>以毫秒（ms）为单位。启动后修改会停止并新建定时器，有一定延迟</remarks>
        </member>
        <member name="M:GKarch.Tundra.Timers.MmTimer.Start">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Tundra.Timers.MmTimer.Stop">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Tundra.Timers.SafeTimeEventHandle">
            <summary>
            Safe handle to ensure kill the timer when unused.
            </summary>
        </member>
        <member name="T:GKarch.Tundra.Timers.TimerBase">
            <summary>
            定时器基类
            </summary>
        </member>
        <member name="F:GKarch.Tundra.Timers.TimerBase.core">
            <summary>
            Glacier 核心
            </summary>
        </member>
        <member name="P:GKarch.Tundra.Timers.TimerBase.Enabled">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Tundra.Timers.TimerBase.Interval">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Tundra.Timers.TimerBase.Start">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Tundra.Timers.TimerBase.Stop">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Tundra.Timers.TimerBase.Tick">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Tundra.Timers.TimerBase.TickEx">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Tundra.Timers.TimerBase.#ctor(GKarch.Glacier.ICore,System.Int32)">
            <summary>
            创建定时器实例
            </summary>
            <param name="core">Glacier 核心，<c>null</c>表示使用全局核心</param>
            <param name="interval">间隔时间</param>
        </member>
        <member name="M:GKarch.Tundra.Timers.TimerBase.OnTick">
            <summary>
            触发事件
            </summary>
        </member>
    </members>
</doc>
