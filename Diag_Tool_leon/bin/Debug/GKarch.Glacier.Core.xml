<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GKarch.Glacier.Core</name>
    </assembly>
    <members>
        <member name="T:GKarch.Fomalhaut.Auth.ILicenseGenerator">
            <summary>
            许可证底层接口，对 LicenseServer 提供功能
            </summary>
        </member>
        <member name="M:GKarch.Fomalhaut.Auth.ILicenseGenerator.CreateResponse(GKarch.Fomalhaut.Auth.IAuthBag)">
            <summary>
            生成授权响应（可包含许可证）
            </summary>
            <param name="bag">授权包</param>
            <returns>生成的授权响应</returns>
        </member>
        <member name="M:GKarch.Fomalhaut.Auth.ILicenseGenerator.Open(System.String,System.Boolean)">
            <summary>
            打开授权数据
            </summary>
            <param name="data">授权数据（激活请求或结果）</param>
            <param name="isResponse"></param>
            <returns>解析的激活数据</returns>
        </member>
        <member name="T:GKarch.Fomalhaut.Auth.ILicenseManager">
            <summary>
            The license manager interface for license client.
            </summary>
        </member>
        <member name="M:GKarch.Fomalhaut.Auth.ILicenseManager.Activate(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            授权操作接口（激活、更新、解除激活）
            </summary>
            <returns>操作结果</returns>
        </member>
        <member name="M:GKarch.Fomalhaut.Auth.ILicenseManager.CheckFeature(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取指定产品的详细信息
            </summary>
            <returns>包含详细信息的产品</returns>
        </member>
        <member name="M:GKarch.Fomalhaut.Auth.ILicenseManager.GetLicense">
            <summary>
            获取本地许可证列表
            </summary>
            <returns>许可证列表</returns>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.ILicenseManager.WebTask">
            <summary>
            最新发起的网络操作的 Task
            </summary>
        </member>
        <member name="T:GKarch.Fomalhaut.Auth.ActivationResponse">
            <summary>操作结果</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.ActivationResponse.Code">
            <summary>结果状态</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.ActivationResponse.Message">
            <summary>结果信息</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.FeatureInfo.Code">
            <summary>产品编码</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.FeatureInfo.Version">
            <summary>产品版本</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.FeatureInfo.PublishTime">
            <summary>发布时间</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.FeatureInfo.ImageUrl">
            <summary>产品图片Url</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.FeatureInfo.Url">
            <summary>产品说明Url</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.FeatureInfo.Description">
            <summary>产品简介</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.FeatureInfo.Activated">
            <summary>是否已激活</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.FeatureInfo.User">
            <summary>已激活时对应订阅的所有者</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.FeatureInfo.Serial">
            <summary>已激活时对应订阅的序列号</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.FeatureInfo.Edition">
            <summary>已激活时对应订阅的类型</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.LicenseInfo.Sku">
            <summary>许可证对应的订阅编码</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.LicenseInfo.User">
            <summary>非试用订阅的所有者</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.LicenseInfo.Serial">
            <summary>序列号</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.LicenseInfo.Edition">
            <summary>是否是试用</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.LicenseInfo.ExpiryTime">
            <summary>非试用订阅的过期时间</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.LicenseInfo.Deadline">
            <summary>试用订阅的剩余天数</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.LicenseInfo.ImageUrl">
            <summary>图片Url</summary>
        </member>
        <member name="P:GKarch.Fomalhaut.Auth.LicenseInfo.Features">
            <summary>包含的产品</summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.AdvancedCircuitBreakerSyntax">
            <summary>
            Fluent API for defining a Circuit Breaker <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/>. 
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.AdvancedCircuitBreakerSyntax.AdvancedCircuitBreaker(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Double,System.TimeSpan,System.Int32,System.TimeSpan)">
            <summary>
            <para> Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will function like a Circuit Breaker.</para>
            <para>The circuit will break if, within any timeslice of duration <paramref name="samplingDuration"/>, the proportion of actions resulting in a handled exception exceeds <paramref name="failureThreshold"/>, provided also that the number of actions through the circuit in the timeslice is at least <paramref name="minimumThroughput" />. </para>
            <para>The circuit will stay broken for the <paramref name="durationOfBreak" />. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException" /> containing the exception
            that broke the circuit.
            </para>
            <para>If the first action after the break duration period results in a handled exception, the circuit will break
            again for another <paramref name="durationOfBreak" />; if no exception is thrown, the circuit will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="failureThreshold">The failure threshold at which the circuit will break (a number between 0 and 1; eg 0.5 represents breaking if 50% or more of actions result in a handled failure).</param>
            <param name="samplingDuration">The duration of the timeslice over which failure ratios are assessed.</param>
            <param name="minimumThroughput">The minimum throughput: this many actions or more must pass through the circuit in the timeslice, for statistics to be considered significant and the circuit-breaker to come into action.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <returns>The policy instance.</returns>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onBreak</exception>
            <exception cref="T:System.ArgumentNullException">onReset</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.AdvancedCircuitBreakerSyntax.AdvancedCircuitBreaker(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{System.Exception,System.TimeSpan},System.Action)">
            <summary>
            <para>The circuit will break if, within any timeslice of duration <paramref name="samplingDuration"/>, the proportion of actions resulting in a handled exception exceeds <paramref name="failureThreshold"/>, provided also that the number of actions through the circuit in the timeslice is at least <paramref name="minimumThroughput" />. </para>
            <para>The circuit will stay broken for the <paramref name="durationOfBreak" />. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException" /> containing the exception
            that broke the circuit.
            </para>
            <para>If the first action after the break duration period results in a handled exception, the circuit will break
            again for another <paramref name="durationOfBreak" />; if no exception is thrown, the circuit will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="failureThreshold">The failure threshold at which the circuit will break (a number between 0 and 1; eg 0.5 represents breaking if 50% or more of actions result in a handled failure.</param>
            <param name="samplingDuration">The duration of the timeslice over which failure ratios are assessed.</param>
            <param name="minimumThroughput">The minimum throughput: this many actions or more must pass through the circuit in the timeslice, for statistics to be considered significant and the circuit-breaker to come into action.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <param name="onBreak">The action to call when the circuit transitions to an <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Open"/> state.</param>
            <param name="onReset">The action to call when the circuit resets to a <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Closed"/> state.</param>
            <returns>The policy instance.</returns>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onBreak</exception>
            <exception cref="T:System.ArgumentNullException">onReset</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.AdvancedCircuitBreakerSyntax.AdvancedCircuitBreaker(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{System.Exception,System.TimeSpan,GKarch.Glacier.Internal.Polly.Context},System.Action{GKarch.Glacier.Internal.Polly.Context})">
            <summary>
            <para>The circuit will break if, within any timeslice of duration <paramref name="samplingDuration"/>, the proportion of actions resulting in a handled exception exceeds <paramref name="failureThreshold"/>, provided also that the number of actions through the circuit in the timeslice is at least <paramref name="minimumThroughput" />. </para>
            <para>The circuit will stay broken for the <paramref name="durationOfBreak" />. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException" /> containing the exception
            that broke the circuit.
            </para>
            <para>If the first action after the break duration period results in a handled exception, the circuit will break
            again for another <paramref name="durationOfBreak" />; if no exception is thrown, the circuit will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="failureThreshold">The failure threshold at which the circuit will break (a number between 0 and 1; eg 0.5 represents breaking if 50% or more of actions result in a handled failure.</param>
            <param name="samplingDuration">The duration of the timeslice over which failure ratios are assessed.</param>
            <param name="minimumThroughput">The minimum throughput: this many actions or more must pass through the circuit in the timeslice, for statistics to be considered significant and the circuit-breaker to come into action.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <param name="onBreak">The action to call when the circuit transitions to an <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Open"/> state.</param>
            <param name="onReset">The action to call when the circuit resets to a <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Closed"/> state.</param>
            <returns>The policy instance.</returns>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onBreak</exception>
            <exception cref="T:System.ArgumentNullException">onReset</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.AdvancedCircuitBreakerSyntax.AdvancedCircuitBreaker(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{System.Exception,System.TimeSpan},System.Action,System.Action)">
            <summary>
            <para>The circuit will break if, within any timeslice of duration <paramref name="samplingDuration"/>, the proportion of actions resulting in a handled exception exceeds <paramref name="failureThreshold"/>, provided also that the number of actions through the circuit in the timeslice is at least <paramref name="minimumThroughput" />. </para>
            <para>The circuit will stay broken for the <paramref name="durationOfBreak" />. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException" /> containing the exception
            that broke the circuit.
            </para>
            <para>If the first action after the break duration period results in a handled exception, the circuit will break
            again for another <paramref name="durationOfBreak" />; if no exception is thrown, the circuit will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="failureThreshold">The failure threshold at which the circuit will break (a number between 0 and 1; eg 0.5 represents breaking if 50% or more of actions result in a handled failure.</param>
            <param name="samplingDuration">The duration of the timeslice over which failure ratios are assessed.</param>
            <param name="minimumThroughput">The minimum throughput: this many actions or more must pass through the circuit in the timeslice, for statistics to be considered significant and the circuit-breaker to come into action.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <param name="onBreak">The action to call when the circuit transitions to an <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Open"/> state.</param>
            <param name="onReset">The action to call when the circuit resets to a <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Closed"/> state.</param>
            <param name="onHalfOpen">The action to call when the circuit transitions to <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.HalfOpen"/> state, ready to try action executions again. </param>
            <returns>The policy instance.</returns>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onBreak</exception>
            <exception cref="T:System.ArgumentNullException">onReset</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.AdvancedCircuitBreakerSyntax.AdvancedCircuitBreaker(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Double,System.TimeSpan,System.Int32,System.TimeSpan,System.Action{System.Exception,System.TimeSpan,GKarch.Glacier.Internal.Polly.Context},System.Action{GKarch.Glacier.Internal.Polly.Context},System.Action)">
            <summary>
            <para> Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy" /> that will function like a Circuit Breaker.</para>
            <para>The circuit will break if, within any timeslice of duration <paramref name="samplingDuration"/>, the proportion of actions resulting in a handled exception exceeds <paramref name="failureThreshold"/>, provided also that the number of actions through the circuit in the timeslice is at least <paramref name="minimumThroughput" />. </para>
            <para>The circuit will stay broken for the <paramref name="durationOfBreak" />. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException" /> containing the exception
            that broke the circuit.
            </para>
            <para>If the first action after the break duration period results in a handled exception, the circuit will break
            again for another <paramref name="durationOfBreak" />; if no exception is thrown, the circuit will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="failureThreshold">The failure threshold at which the circuit will break (a number between 0 and 1; eg 0.5 represents breaking if 50% or more of actions result in a handled failure.</param>
            <param name="samplingDuration">The duration of the timeslice over which failure ratios are assessed.</param>
            <param name="minimumThroughput">The minimum throughput: this many actions or more must pass through the circuit in the timeslice, for statistics to be considered significant and the circuit-breaker to come into action.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <param name="onBreak">The action to call when the circuit transitions to an <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Open" /> state.</param>
            <param name="onReset">The action to call when the circuit resets to a <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Closed" /> state.</param>
            <param name="onHalfOpen">The action to call when the circuit transitions to <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.HalfOpen" /> state, ready to try action executions again.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">
            onBreak
            or
            onReset
            or
            onHalfOpen
            </exception>
            <exception cref="T:System.ArgumentNullException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onBreak</exception>
            <exception cref="T:System.ArgumentNullException">onReset</exception>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.CircuitState">
            <summary>
            Describes the possible states the circuit of a CircuitBreaker may be in.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Polly.CircuitState.Closed">
            <summary>
            Closed - When the circuit is closed.  Execution of actions is allowed.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Polly.CircuitState.Open">
            <summary>
            Open - When the automated controller has opened the circuit (typically due to some failure threshold being exceeded by recent actions). Execution of actions is blocked.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Polly.CircuitState.HalfOpen">
            <summary>
            Half-open - When the circuit is half-open, it is recovering from an open state.  The duration of break of the preceding open state has typically passed.  In the half-open state, actions may be executed, but the results of these actions may be treated with criteria different to normal operation, to decide if the circuit has recovered sufficiently to be placed back in to the closed state, or if continuing failures mean the circuit should revert to open perhaps more quickly than in normal operation.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Polly.CircuitState.Isolated">
            <summary>
            Isolated - When the circuit has been placed into a fixed open state by a call to <see cref="M:GKarch.Glacier.Internal.Polly.CircuitBreakerPolicy.Isolate"/>.  This isolates the circuit manually, blocking execution of all actions until a call to <see cref="M:GKarch.Glacier.Internal.Polly.CircuitBreakerPolicy.Reset"/> is made.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.IsolatedCircuitException">
            <summary>
            Exception thrown when a circuit is isolated (held open) by manual override.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.IsolatedCircuitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Polly.IsolatedCircuitException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.IsolatedCircuitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Polly.IsolatedCircuitException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.PolicyResult">
            <summary>
            The captured result of executing a policy
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.PolicyResult.Outcome">
            <summary>
              The outcome of executing the policy
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.PolicyResult.FinalException">
            <summary>
             The final exception captured. Will be null if policy executed successfully
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.PolicyResult.ExceptionType">
            <summary>
             The exception type of the final exception captured. Will be null if policy executed successfully
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.PolicyResult`1">
            <summary>
            The captured result of executing a policy
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.PolicyResult`1.Outcome">
            <summary>
              The outcome of executing the policy
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.PolicyResult`1.FinalException">
            <summary>
             The final exception captured. Will be null if policy executed successfully
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.PolicyResult`1.ExceptionType">
            <summary>
             The exception type of the final exception captured. Will be null if policy executed successfully
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.PolicyResult`1.Result">
            <summary>
            The result of executing the policy. Will be default(TResult) is the policy failed
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.OutcomeType">
            <summary>
            Represents the outcome of executing a policy
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Polly.OutcomeType.Successful">
            <summary>
            Indicates that the policy ultimately executed successfully
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Polly.OutcomeType.Failure">
            <summary>
            Indicates that the policy ultimately failed
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.ExceptionType">
            <summary>
            Represents the type of exception resulting from a failed policy
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Polly.ExceptionType.HandledByThisPolicy">
            <summary>
            An exception type that has been defined to be handled by this policy
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Polly.ExceptionType.Unhandled">
            <summary>
            An exception type that has been not been defined to be handled by this policy
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.CircuitBreakerSyntax">
            <summary>
            Fluent API for defining a Circuit Breaker <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/>. 
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.CircuitBreakerSyntax.CircuitBreaker(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Int32,System.TimeSpan)">
            <summary>
            <para> Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will function like a Circuit Breaker.</para>
            <para>The circuit will break after <paramref name="exceptionsAllowedBeforeBreaking"/>
            exceptions that are handled by this policy are raised. </para>
            <para>The circuit will stay broken for the <paramref name="durationOfBreak"/>. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException"/> containing the exception 
            that broke the circuit.
            </para>
            <para>If the first action after the break duration period results in a handled exception, the circuit will break
            again for another <paramref name="durationOfBreak"/>; if no exception is thrown, the circuit will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="exceptionsAllowedBeforeBreaking">The number of exceptions that are allowed before opening the circuit.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <returns>The policy instance.</returns>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onBreak</exception>
            <exception cref="T:System.ArgumentNullException">onReset</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.CircuitBreakerSyntax.CircuitBreaker(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Int32,System.TimeSpan,System.Action{System.Exception,System.TimeSpan},System.Action)">
            <summary>
            <para> Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will function like a Circuit Breaker.</para>
            <para>The circuit will break after <paramref name="exceptionsAllowedBeforeBreaking"/>
            exceptions that are handled by this policy are raised. </para>
            <para>The circuit will stay broken for the <paramref name="durationOfBreak"/>. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException"/> containing the exception 
            that broke the circuit.
            </para>
            <para>If the first action after the break duration period results in a handled exception, the circuit will break
            again for another <paramref name="durationOfBreak"/>; if no exception is thrown, the circuit will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="exceptionsAllowedBeforeBreaking">The number of exceptions that are allowed before opening the circuit.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <param name="onBreak">The action to call when the circuit transitions to an <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Open"/> state.</param>
            <param name="onReset">The action to call when the circuit resets to a <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Closed"/> state.</param>
            <returns>The policy instance.</returns>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onBreak</exception>
            <exception cref="T:System.ArgumentNullException">onReset</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.CircuitBreakerSyntax.CircuitBreaker(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Int32,System.TimeSpan,System.Action{System.Exception,System.TimeSpan,GKarch.Glacier.Internal.Polly.Context},System.Action{GKarch.Glacier.Internal.Polly.Context})">
            <summary>
            <para> Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will function like a Circuit Breaker.</para>
            <para>The circuit will break after <paramref name="exceptionsAllowedBeforeBreaking"/>
            exceptions that are handled by this policy are raised. </para>
            <para>The circuit will stay broken for the <paramref name="durationOfBreak"/>. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException"/> containing the exception 
            that broke the circuit.
            </para>
            <para>If the first action after the break duration period results in a handled exception, the circuit will break
            again for another <paramref name="durationOfBreak"/>; if no exception is thrown, the circuit will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="exceptionsAllowedBeforeBreaking">The number of exceptions that are allowed before opening the circuit.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <param name="onBreak">The action to call when the circuit transitions to an <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Open"/> state.</param>
            <param name="onReset">The action to call when the circuit resets to a <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Closed"/> state.</param>
            <returns>The policy instance.</returns>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onBreak</exception>
            <exception cref="T:System.ArgumentNullException">onReset</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.CircuitBreakerSyntax.CircuitBreaker(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Int32,System.TimeSpan,System.Action{System.Exception,System.TimeSpan},System.Action,System.Action)">
            <summary>
            <para> Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will function like a Circuit Breaker.</para>
            <para>The circuit will break after <paramref name="exceptionsAllowedBeforeBreaking"/>
            exceptions that are handled by this policy are raised. </para>
            <para>The circuit will stay broken for the <paramref name="durationOfBreak"/>. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException"/> containing the exception 
            that broke the circuit.
            </para>
            <para>If the first action after the break duration period results in a handled exception, the circuit will break
            again for another <paramref name="durationOfBreak"/>; if no exception is thrown, the circuit will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="exceptionsAllowedBeforeBreaking">The number of exceptions that are allowed before opening the circuit.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <param name="onBreak">The action to call when the circuit transitions to an <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Open"/> state.</param>
            <param name="onReset">The action to call when the circuit resets to a <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Closed"/> state.</param>
            <param name="onHalfOpen">The action to call when the circuit transitions to <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.HalfOpen"/> state, ready to try action executions again. </param>
            <returns>The policy instance.</returns>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onBreak</exception>
            <exception cref="T:System.ArgumentNullException">onReset</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.CircuitBreakerSyntax.CircuitBreaker(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Int32,System.TimeSpan,System.Action{System.Exception,System.TimeSpan,GKarch.Glacier.Internal.Polly.Context},System.Action{GKarch.Glacier.Internal.Polly.Context},System.Action)">
            <summary>
            <para> Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will function like a Circuit Breaker.</para>
            <para>The circuit will break after <paramref name="exceptionsAllowedBeforeBreaking"/>
            exceptions that are handled by this policy are raised. </para>
            <para>The circuit will stay broken for the <paramref name="durationOfBreak"/>. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException"/> containing the exception 
            that broke the circuit.
            </para>
            <para>If the first action after the break duration period results in a handled exception, the circuit will break
            again for another <paramref name="durationOfBreak"/>; if no exception is thrown, the circuit will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="exceptionsAllowedBeforeBreaking">The number of exceptions that are allowed before opening the circuit.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <param name="onBreak">The action to call when the circuit transitions to an <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Open"/> state.</param>
            <param name="onReset">The action to call when the circuit resets to a <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.Closed"/> state.</param>
            <param name="onHalfOpen">The action to call when the circuit transitions to <see cref="F:GKarch.Glacier.Internal.Polly.CircuitState.HalfOpen"/> state, ready to try action executions again. </param>
            <returns>The policy instance.</returns>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onBreak</exception>
            <exception cref="T:System.ArgumentNullException">onReset</exception>
            <exception cref="T:System.ArgumentNullException">onHalfOpen</exception>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException">
            <summary>
            Exception thrown when a circuit is broken.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.BrokenCircuitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException"/> class.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.BrokenCircuitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.BrokenCircuitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.BrokenCircuitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Polly.BrokenCircuitException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.CircuitBreakerPolicy">
            <summary>
            A circuit-breaker policy that can be applied to delegates.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.CircuitBreakerPolicy.CircuitState">
            <summary>
            Gets the state of the underlying circuit.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.CircuitBreakerPolicy.LastException">
            <summary>
            Gets the last exception handled by the circuit-breaker.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.CircuitBreakerPolicy.Isolate">
            <summary>
            Isolates (opens) the circuit manually, and holds it in this state until a call to <see cref="M:GKarch.Glacier.Internal.Polly.CircuitBreakerPolicy.Reset"/> is made.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.CircuitBreakerPolicy.Reset">
            <summary>
            Closes the circuit, and resets any statistics controlling automated circuit-breaking.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.Context">
            <summary>
            A readonly dictionary of string key / object value pairs
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.ContextualPolicy">
            <summary>
            Transient exception handling policies that can be applied to delegates.
            These policies can be called with arbitrary context data.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ContextualPolicy.Execute(System.Action,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the specified action within the policy.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="contextData">Arbitrary data that is passed to the exception policy.</param>
            <exception cref="T:System.ArgumentNullException">contextData</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ContextualPolicy.ExecuteAndCapture(System.Action,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the specified action within the policy and returns the captured result.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="contextData">Arbitrary data that is passed to the exception policy.</param>
            <exception cref="T:System.ArgumentNullException">contextData</exception>
            <returns>The captured result</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ContextualPolicy.Execute``1(System.Func{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the specified action within the policy and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="action">The action to perform.</param>
            <param name="contextData">Arbitrary data that is passed to the exception policy.</param>
            <exception cref="T:System.ArgumentNullException">contextData</exception>
            <returns>
            The value returned by the action
            </returns>
            <exception cref="T:System.ArgumentNullException">contextData</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ContextualPolicy.ExecuteAndCapture``1(System.Func{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the specified action within the policy and returns the captured result.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="contextData">Arbitrary data that is passed to the exception policy.</param>
            <exception cref="T:System.ArgumentNullException">contextData</exception>
            <returns>The captured result</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.OrSyntax">
            <summary>
            Fluent API for chaining exceptions that will be handled by a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/>. 
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.OrSyntax.Or``1(GKarch.Glacier.Internal.Polly.PolicyBuilder)">
            <summary>
            Specifies the type of exception that this policy can handle.
            </summary>
            <typeparam name="TException">The type of the exception to handle.</typeparam>
            <param name="policyBuilder">The current builder to chain off.</param>
            <returns>The PolicyBuilder instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.OrSyntax.Or``1(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Func{``0,System.Boolean})">
            <summary>
            Specifies the type of exception that this policy can handle with addition filters on this exception type.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="policyBuilder">The current builder to chain off.</param>
            <param name="exceptionPredicate">The exception predicate to filter the type of exception this policy can handle.</param>
            <returns>The PolicyBuilder instance.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.Policy">
            <summary>
            Transient exception handling policies that can
            be applied to delegates
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.Policy.Execute(System.Action)">
            <summary>
            Executes the specified action within the policy.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.Policy.Execute(System.Action,GKarch.Glacier.Internal.Polly.Context)">
            <summary>
            Executes the specified action within the policy.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="context">Arbitrary data that is passed to the exception policy.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.Policy.ExecuteAndCapture(System.Action)">
            <summary>
            Executes the specified action within the policy and returns the captured result
            </summary>
            <param name="action">The action to perform.</param>
            <returns>The captured result</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.Policy.ExecuteAndCapture(System.Action,GKarch.Glacier.Internal.Polly.Context)">
            <summary>
            Executes the specified action within the policy and returns the captured result
            </summary>
            <param name="action">The action to perform.</param>
            <param name="context">Arbitrary data that is passed to the exception policy.</param>
            <returns>The captured result</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.Policy.Execute``1(System.Func{``0},GKarch.Glacier.Internal.Polly.Context)">
            <summary>
            Executes the specified action within the policy and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="action">The action to perform.</param>
            <param name="context">Arbitrary data that is passed to the exception policy.</param>
            <returns>The value returned by the action</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.Policy.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified action within the policy and returns the Result.
            </summary>
            <typeparam name="TResult">The type of the Result.</typeparam>
            <param name="action">The action to perform.</param>
            <returns>The value returned by the action</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.Policy.ExecuteAndCapture``1(System.Func{``0})">
            <summary>
            Executes the specified action within the policy and returns the captured result
            </summary>
            <param name="action">The action to perform.</param>
            <returns>The captured result</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.Policy.ExecuteAndCapture``1(System.Func{``0},GKarch.Glacier.Internal.Polly.Context)">
            <summary>
            Executes the specified action within the policy and returns the captured result.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="context">Arbitrary data that is passed to the exception policy.</param>
            <returns>The captured result</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.Policy.Handle``1">
            <summary>
            Specifies the type of exception that this policy can handle.
            </summary>
            <typeparam name="TException">The type of the exception to handle.</typeparam>
            <returns>The PolicyBuilder instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.Policy.Handle``1(System.Func{``0,System.Boolean})">
            <summary>
            Specifies the type of exception that this policy can handle with addition filters on this exception type.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="exceptionPredicate">The exception predicate to filter the type of exception this policy can handle.</param>
            <returns>The PolicyBuilder instance.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.PolicyBuilder">
            <summary>
            Builder class that holds the list of current exception predicates.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.PolicyBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.PolicyBuilder.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.PolicyBuilder.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.PolicyBuilder.GetType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the current instance.
            </summary>
            <returns>
            The <see cref="T:System.Type" /> instance that represents the exact runtime type of the current instance.
            </returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.RetrySyntax">
            <summary>
            Fluent API for defining a Retry <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/>. 
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.Retry(GKarch.Glacier.Internal.Polly.PolicyBuilder)">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will retry once.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.Retry(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Int32)">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will retry <paramref name="retryCount"/> times.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.Retry(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Action{System.Exception,System.Int32})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will retry once
            calling <paramref name="onRetry"/> on retry with the raised exception and retry count.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.Retry(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Int32,System.Action{System.Exception,System.Int32})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will retry <paramref name="retryCount"/> times
            calling <paramref name="onRetry"/> on each retry with the raised exception and retry count.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.Retry(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Action{System.Exception,System.Int32,GKarch.Glacier.Internal.Polly.Context})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will retry once
            calling <paramref name="onRetry"/> on retry with the raised exception, retry count and context data.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.Retry(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Int32,System.Action{System.Exception,System.Int32,GKarch.Glacier.Internal.Polly.Context})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will retry <paramref name="retryCount"/> times
            calling <paramref name="onRetry"/> on each retry with the raised exception, retry count and context data.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.RetryForever(GKarch.Glacier.Internal.Polly.PolicyBuilder)">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will retry indefinitely.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.RetryForever(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Action{System.Exception})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will retry indefinitely
            calling <paramref name="onRetry"/> on each retry with the raised exception.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.RetryForever(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Action{System.Exception,GKarch.Glacier.Internal.Polly.Context})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will retry indefinitely
            calling <paramref name="onRetry"/> on each retry with the raised exception and context data.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.WaitAndRetry(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Int32,System.Func{System.Int32,System.TimeSpan})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will wait and retry <paramref name="retryCount"/> times.
            On each retry, the duration to wait is calculated by calling <paramref name="sleepDurationProvider"/> with
            the current retry attempt allowing an exponentially increasing wait time (exponential backoff).
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="sleepDurationProvider">The function that provides the duration to wait for for a particular retry attempt.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.WaitAndRetry(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Int32,System.Func{System.Int32,System.TimeSpan},System.Action{System.Exception,System.TimeSpan})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will wait and retry <paramref name="retryCount"/> times
            calling <paramref name="onRetry"/> on each retry with the raised exception and the current sleep duration.
            On each retry, the duration to wait is calculated by calling <paramref name="sleepDurationProvider"/> with
            the current retry attempt allowing an exponentially increasing wait time (exponential backoff).
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="sleepDurationProvider">The function that provides the duration to wait for for a particular retry attempt.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException">
            sleepDurationProvider
            or
            onRetry
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.WaitAndRetry(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Int32,System.Func{System.Int32,System.TimeSpan},System.Action{System.Exception,System.TimeSpan,GKarch.Glacier.Internal.Polly.Context})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will wait and retry <paramref name="retryCount"/> times
            calling <paramref name="onRetry"/> on each retry with the raised exception, current sleep duration and context data.
            On each retry, the duration to wait is calculated by calling <paramref name="sleepDurationProvider"/> with
            the current retry attempt allowing an exponentially increasing wait time (exponential backoff).
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="sleepDurationProvider">The function that provides the duration to wait for for a particular retry attempt.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than or equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException">
            sleepDurationProvider
            or
            onRetry
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.WaitAndRetry(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will wait and retry as many times as there are provided <paramref name="sleepDurations"/>
            On each retry, the duration to wait is the current <paramref name="sleepDurations"/> item.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="sleepDurations">The sleep durations to wait for on each retry.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.WaitAndRetry(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{System.Exception,System.TimeSpan})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will wait and retry as many times as there are provided <paramref name="sleepDurations"/>
            calling <paramref name="onRetry"/> on each retry with the raised exception and the current sleep duration.
            On each retry, the duration to wait is the current <paramref name="sleepDurations"/> item.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="sleepDurations">The sleep durations to wait for on each retry.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            sleepDurations
            or
            onRetry
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.WaitAndRetry(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{System.Exception,System.TimeSpan,GKarch.Glacier.Internal.Polly.Context})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will wait and retry as many times as there are provided <paramref name="sleepDurations"/>
            calling <paramref name="onRetry"/> on each retry with the raised exception, current sleep duration and context data.
            On each retry, the duration to wait is the current <paramref name="sleepDurations"/> item.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="sleepDurations">The sleep durations to wait for on each retry.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            sleepDurations
            or
            onRetry
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.WaitAndRetryForever(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Func{System.Int32,System.TimeSpan})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will wait and retry indefinitely.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="sleepDurationProvider">The function that provides the duration to wait for for a particular retry attempt.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">sleepDurationProvider</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.WaitAndRetryForever(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Func{System.Int32,System.TimeSpan},System.Action{System.Exception,System.TimeSpan})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will wait and retry indefinitely
            calling <paramref name="onRetry"/> on each retry with the raised exception.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="sleepDurationProvider"></param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">sleepDurationProvider</exception>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.RetrySyntax.WaitAndRetryForever(GKarch.Glacier.Internal.Polly.PolicyBuilder,System.Func{System.Int32,System.TimeSpan},System.Action{System.Exception,System.TimeSpan,GKarch.Glacier.Internal.Polly.Context})">
            <summary>
            Builds a <see cref="T:GKarch.Glacier.Internal.Polly.Policy"/> that will wait and retry indefinitely
            calling <paramref name="onRetry"/> on each retry with the raised exception and
            execution context.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="sleepDurationProvider"></param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">sleepDurationProvider</exception>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.RetryPolicy">
            <summary>
            A retry policy that can be applied to delegates.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2">
            http://www.cuttingedge.it/blogs/steven/pivot/entry.php?id=29
            <summary>
            Provides the base class for a generic read-only dictionary.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
            <remarks>
            <para>
            An instance of the <b>ReadOnlyDictionary</b> generic class is
            always read-only. A dictionary that is read-only is simply a
            dictionary with a wrapper that prevents modifying the
            dictionary; therefore, if changes are made to the underlying
            dictionary, the read-only dictionary reflects those changes. 
            See <see cref="T:System.Collections.Generic.Dictionary`2"/> for a modifiable version of 
            this class.
            </para>
            <para>
            <b>Notes to Implementers</b> This base class is provided to 
            make it easier for implementers to create a generic read-only
            custom dictionary. Implementers are encouraged to extend this
            base class instead of creating their own. 
            </para>
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:ReadOnlyDictionary`2" /> class that wraps
            the supplied <paramref name="values"/>.
            </summary>
            <param name="values">The <see cref="T:IDictionary`2" />
            that will be wrapped.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the dictionary is null.
            </exception>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the
            <see cref="T:ReadOnlyDictionary`2"></see>.
            </summary>
            <value>The number of key/value pairs.</value>
            <returns>The number of key/value pairs contained in the
            <see cref="T:ReadOnlyDictionary`2"></see>.</returns>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.Keys">
            <summary>Gets a collection containing the keys in the
            <see cref="T:ReadOnlyDictionary{TKey,TValue}"></see>.</summary>
            <value>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 
            containing the keys.</value>
            <returns>A
            <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/>
            containing the keys in the
            <see cref="T:System.Collections.Generic.Dictionary`2"></see>.
            </returns>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection containing the values of the
            <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
            <value>The collection of values.</value>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <summary>Gets a value indicating whether the dictionary is read-only.
            This value will always be true.</summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the dictionary
            is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to dictionary.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <returns>
            The value associated with the specified key. If the specified key
            is not found, a get operation throws a 
            <see cref="T:System.Collections.Generic.KeyNotFoundException" />,
            and a set operation creates a new element with the specified key.
            </returns>
            <param name="key">The key of the value to get or set.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the key is null.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and key does not exist in the collection.
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)">
            <summary>This method is not supported by the 
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
            <param name="key">
            The object to use as the key of the element to add.</param>
            <param name="value">
            The object to use as the value of the element to add.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the <see cref="T:ReadOnlyDictionary`2" />
            contains the specified key.</summary>
            <returns>
            True if the <see cref="T:ReadOnlyDictionary`2" /> contains
            an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the
            <see cref="T:ReadOnlyDictionary`2"></see>.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the key is null.
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <summary>
            This method is not supported by the <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            True if the element is successfully removed; otherwise, false.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value
            associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns>
            <b>true</b> if the <see cref="T:ReadOnlyDictionary`2" /> contains
            an element with the specified key; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>This method is not supported by the
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
            <param name="item">
            The object to add to the <see cref="T:ICollection`1"/>.
            </param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear">
            <summary>This method is not supported by the 
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:ICollection`1"/> contains a
            specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:ICollection`1"/>.
            </param>
            <returns>
            <b>true</b> if item is found in the <b>ICollection</b>; 
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a
            particular Array index. 
            </summary>
            <param name="array">The one-dimensional Array that is the
            destination of the elements copied from ICollection.
            The Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>This method is not supported by the
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
            <param name="item">
            The object to remove from the ICollection.
            </param>
            <returns>Will never return a value.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Polly.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>. 
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination of the elements copied from 
            ICollection. The Array must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in Array at which copying begins.
            </param>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.Config">
            <summary>
            This class represents the main configuration object used by a project
            when configuring objects within the system. To put it simply, it's
            the internal representation of a HOCON (Human-Optimized Config Object Notation)
            configuration string.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.Config"/> class.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.#ctor(GKarch.Glacier.Internal.Hocon.HoconRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.Config"/> class.
            </summary>
            <param name="root">The root node to base this configuration.</param>
            <exception cref="T:System.ArgumentNullException">"The root value cannot be null."</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.#ctor(GKarch.Glacier.Internal.Hocon.Config,GKarch.Glacier.Internal.Hocon.Config)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.Config"/> class.
            </summary>
            <param name="source">The configuration to use as the primary source.</param>
            <param name="fallback">The configuration to use as a secondary source.</param>
            <exception cref="T:System.ArgumentNullException">The source configuration cannot be null.</exception>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.Config.Fallback">
            <summary>
            The configuration used as a secondary source.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.Config.IsEmpty">
            <summary>
            Determines if this root node contains any values
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.Config.Root">
            <summary>
            The root node of this configuration section
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.Config.Substitutions">
            <summary>
            An enumeration of substitutions values
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.Copy">
            <summary>
            Generates a deep clone of the current configuration.
            </summary>
            <returns>A deep clone of the current configuration</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetBoolean(System.String,System.Boolean)">
            <summary>
            Retrieves a boolean value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The boolean value defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetByteSize(System.String)">
            <summary>
            Retrieves a long value, optionally suffixed with a 'b', from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <returns>The long value defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetInt(System.String,System.Int32)">
            <summary>
            Retrieves an integer value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The integer value defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetLong(System.String,System.Int64)">
            <summary>
            Retrieves a long value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The long value defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetString(System.String,System.String)">
            <summary>
            Retrieves a string value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The string value defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetFloat(System.String,System.Single)">
            <summary>
            Retrieves a float value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The float value defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetDecimal(System.String,System.Decimal)">
            <summary>
            Retrieves a decimal value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The decimal value defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetDouble(System.String,System.Double)">
            <summary>
            Retrieves a double value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <returns>The double value defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetBooleanList(System.String)">
            <summary>
            Retrieves a list of boolean values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of boolean values defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetDecimalList(System.String)">
            <summary>
            Retrieves a list of decimal values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of decimal values defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetFloatList(System.String)">
            <summary>
            Retrieves a list of float values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of float values defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetDoubleList(System.String)">
            <summary>
            Retrieves a list of double values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of double values defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetIntList(System.String)">
            <summary>
            Retrieves a list of int values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of int values defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetLongList(System.String)">
            <summary>
            Retrieves a list of long values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of long values defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetByteList(System.String)">
            <summary>
            Retrieves a list of byte values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of byte values defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetStringList(System.String)">
            <summary>
            Retrieves a list of string values from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the values to retrieve.</param>
            <returns>The list of string values defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetConfig(System.String)">
            <summary>
            Retrieves a new configuration from the current configuration
            with the root node being the supplied path.
            </summary>
            <param name="path">The path that contains the configuration to retrieve.</param>
            <returns>A new configuration with the root node being the supplied path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetValue(System.String)">
            <summary>
            Retrieves a <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/> from a specific path.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <returns>The <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/> found at the location if one exists, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.GetTimeSpan(System.String,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Retrieves a <see cref="T:System.TimeSpan"/> value from the specified path in the configuration.
            </summary>
            <param name="path">The path that contains the value to retrieve.</param>
            <param name="default">The default value to return if the value doesn't exist.</param>
            <param name="allowInfinite"><c>true</c> if infinite timespans are allowed; otherwise <c>false</c>.</param>
            <returns>The <see cref="T:System.TimeSpan"/> value defined in the specified path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.ToString">
            <summary>
            Converts the current configuration to a string.
            </summary>
            <returns>A string containing the current configuration.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.WithFallback(GKarch.Glacier.Internal.Hocon.Config)">
            <summary>
            Configure the current configuration with a secondary source.
            </summary>
            <param name="fallback">The configuration to use as a secondary source.</param>
            <returns>The current configuration configured with the specified fallback.</returns>
            <exception cref="T:System.ArgumentException">Config can not have itself as fallback.</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.HasPath(System.String)">
            <summary>
            Determine if a HOCON configuration element exists at the specified location
            </summary>
            <param name="path">The location to check for a configuration value.</param>
            <returns><c>true</c> if a value was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.op_Addition(GKarch.Glacier.Internal.Hocon.Config,System.String)">
            <summary>
            Adds the supplied configuration string as a fallback to the supplied configuration.
            </summary>
            <param name="config">The configuration used as the source.</param>
            <param name="fallback">The string used as the fallback configuration.</param>
            <returns>The supplied configuration configured with the supplied fallback.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.op_Addition(System.String,GKarch.Glacier.Internal.Hocon.Config)">
            <summary>
            Adds the supplied configuration as a fallback to the supplied configuration string.
            </summary>
            <param name="configHocon">The configuration string used as the source.</param>
            <param name="fallbackConfig">The configuration used as the fallback.</param>
            <returns>A configuration configured with the supplied fallback.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.op_Implicit(System.String)~GKarch.Glacier.Internal.Hocon.Config">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:GKarch.Glacier.Internal.Hocon.Config"/>.
            </summary>
            <param name="str">The string that contains a configuration.</param>
            <returns>A configuration based on the supplied string.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Config.AsEnumerable">
            <summary>
            Retrieves an enumerable key value pair representation of the current configuration.
            </summary>
            <returns>The current configuration represented as an enumerable key value pair.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.ConfigExtensions">
            <summary>
            This class contains convenience methods for working with <see cref="T:GKarch.Glacier.Internal.Hocon.Config"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.ConfigExtensions.SafeWithFallback(GKarch.Glacier.Internal.Hocon.Config,GKarch.Glacier.Internal.Hocon.Config)">
            <summary>
            Retrieves the current configuration or the fallback
            configuration if the current one is null.
            </summary>
            <param name="config">The configuration used as the source.</param>
            <param name="fallback">The configuration to use as a secondary source.</param>
            <returns>The current configuration or the fallback configuration if the current one is null.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.ConfigExtensions.IsNullOrEmpty(GKarch.Glacier.Internal.Hocon.Config)">
            <summary>
            Determines if the supplied configuration has any usable content period.
            </summary>
            <param name="config">The configuration used as the source.</param>
            <returns><c>true></c> if the <see cref="T:GKarch.Glacier.Internal.Hocon.Config" /> is null or <see cref="P:GKarch.Glacier.Internal.Hocon.Config.IsEmpty" />; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.ConfigurationFactory">
            <summary>
            This class contains methods used to retrieve configuration information
            from a variety of sources including user-supplied strings, configuration
            files and assembly resources.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.ConfigurationFactory.Empty">
            <summary>
            Generates an empty configuration.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.ConfigurationFactory.ParseString(System.String,System.Func{System.String,GKarch.Glacier.Internal.Hocon.HoconRoot})">
            <summary>
            Generates a configuration defined in the supplied
            HOCON (Human-Optimized Config Object Notation) string.
            </summary>
            <param name="hocon">A string that contains configuration options to use.</param>
            <param name="includeCallback">callback used to resolve includes</param>
            <returns>The configuration defined in the supplied HOCON string.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.ConfigurationFactory.ParseString(System.String)">
            <summary>
            Generates a configuration defined in the supplied
            HOCON (Human-Optimized Config Object Notation) string.
            </summary>
            <param name="hocon">A string that contains configuration options to use.</param>
            <returns>The configuration defined in the supplied HOCON string.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.ConfigurationFactory.Default">
            <summary>
            Retrieves the default configuration that Akka.NET uses
            when no configuration has been defined.
            </summary>
            <returns>The configuration that contains default values for all options.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.ConfigurationFactory.FromResource(System.String)">
            <summary>
            Retrieves a configuration defined in a resource of the
            current executing assembly.
            </summary>
            <param name="resourceName">The name of the resource that contains the configuration.</param>
            <returns>The configuration defined in the current executing assembly.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.ConfigurationFactory.FromResource(System.String,System.Object)">
            <summary>
            Retrieves a configuration defined in a resource of the
            assembly containing the supplied instance object.
            </summary>
            <param name="resourceName">The name of the resource that contains the configuration.</param>
            <param name="instanceInAssembly">An instance object located in the assembly to search.</param>
            <returns>The configuration defined in the assembly that contains the instanced object.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.ConfigurationFactory.FromResource``1(System.String)">
            <summary>
            Retrieves a configuration defined in a resource of the assembly
            containing the supplied type <typeparamref name="TAssembly"/>.
            </summary>
            <typeparam name="TAssembly">A type located in the assembly to search.</typeparam>
            <param name="resourceName">The name of the resource that contains the configuration.</param>
            <returns>The configuration defined in the assembly that contains the type <typeparamref name="TAssembly"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.ConfigurationFactory.FromResource(System.String,System.Reflection.Assembly)">
            <summary>
            Retrieves a configuration defined in a resource of the supplied assembly.
            </summary>
            <param name="resourceName">The name of the resource that contains the configuration.</param>
            <param name="assembly">The assembly that contains the given resource.</param>
            <returns>The configuration defined in the assembly that contains the given resource.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.HoconArray">
            <summary>
            This class represents an array element in a HOCON (Human-Optimized Config Object Notation)
            configuration string.
            <code>
            root {
                items = [
                  "1",
                  "2"]
            }
            </code>
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconArray.IsString">
            <summary>
            Determines whether this element is a string.
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconArray.GetString">
            <summary>
            Retrieves the string representation of this element.
            </summary>
            <returns>
            The string representation of this element.
            </returns>
            <exception cref="T:System.NotImplementedException">
            This element is an array. It is not a string.
            Therefore this method will throw an exception.
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconArray.IsArray">
            <summary>
            Determines whether this element is an array.
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconArray.GetArray">
            <summary>
            Retrieves a list of elements associated with this element.
            </summary>
            <returns>
            A list of elements associated with this element.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconArray.ToString">
            <summary>
            Returns a HOCON string representation of this element.
            </summary>
            <returns>A HOCON string representation of this element.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.HoconLiteral">
            <summary>
            This class represents a string literal element in a HOCON (Human-Optimized Config Object Notation)
            configuration string.
            <code>
            akka {  
              actor {
                provider = "Akka.Remote.RemoteActorRefProvider, Akka.Remote"
              }
            }
            </code>
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.HoconLiteral.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconLiteral.IsString">
            <summary>
            Determines whether this element is a string.
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconLiteral.GetString">
            <summary>
            Retrieves the string representation of this element.
            </summary>
            <returns>The value of this element.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconLiteral.IsArray">
            <summary>
            Determines whether this element is an array.
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconLiteral.GetArray">
            <summary>
            Retrieves a list of elements associated with this element.
            </summary>
            <returns>
            A list of elements associated with this element.
            </returns>
            <exception cref="T:System.NotImplementedException">
            This element is a string literal. It is not an array.
            Therefore this method will throw an exception.
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconLiteral.ToString">
            <summary>
            Returns the string representation of this element.
            </summary>
            <returns>The value of this element.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.HoconObject">
            <summary>
            This class represents an object element in a HOCON (Human-Optimized Config Object Notation)
            configuration string.
            <code>
            akka {  
              actor {
                debug {  
                  receive = on 
                  autoreceive = on
                  lifecycle = on
                  event-stream = on
                  unhandled = on
                }
              }
            }
            </code>
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.HoconObject"/> class.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.HoconObject.Unwrapped">
            <summary>
            Retrieves the underlying map that contains the barebones
            object values.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.HoconObject.Items">
            <summary>
            Retrieves the underlying map that this element is based on.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconObject.IsString">
            <summary>
            Determines whether this element is a string.
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconObject.GetString">
            <summary>
            Retrieves the string representation of this element.
            </summary>
            <returns>The string representation of this element.</returns>
            <exception cref="T:System.NotImplementedException">
            This element is an object. It is not a string.
            Therefore this method will throw an exception.
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconObject.IsArray">
            <summary>
            Determines whether this element is an array.
            </summary>
            <returns><c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconObject.GetArray">
            <summary>
            Retrieves a list of elements associated with this element.
            </summary>
            <returns>A list of elements associated with this element.</returns>
            <exception cref="T:System.NotImplementedException">
            This element is an object. It is not an array.
            Therefore this method will throw an exception.
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconObject.GetKey(System.String)">
            <summary>
            Retrieves the value associated with the supplied key.
            </summary>
            <param name="key">The key associated with the value to retrieve.</param>
            <returns>
            The value associated with the supplied key or null
            if they key does not exist.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconObject.GetOrCreateKey(System.String)">
            <summary>
            Retrieves the value associated with the supplied key.
            If the supplied key is not found, then one is created
            with a blank value.
            </summary>
            <param name="key">The key associated with the value to retrieve.</param>
            <returns>The value associated with the supplied key.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconObject.ToString">
            <summary>
            Returns a HOCON string representation of this element.
            </summary>
            <returns>A HOCON string representation of this element.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconObject.ToString(System.Int32)">
            <summary>
            Returns a HOCON string representation of this element.
            </summary>
            <param name="indent">The number of spaces to indent the string.</param>
            <returns>A HOCON string representation of this element.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.Parser">
            <summary>
            This class contains methods used to parse HOCON (Human-Optimized Config Object Notation)
            configuration strings.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Parser.Parse(System.String,System.Func{System.String,GKarch.Glacier.Internal.Hocon.HoconRoot})">
            <summary>
            Parses the supplied HOCON configuration string into a root element.
            </summary>
            <param name="text">The string that contains a HOCON configuration string.</param>
            <param name="includeCallback">Callback used to resolve includes</param>
            <returns>The root element created from the supplied HOCON configuration string.</returns>
            <exception cref="T:System.Exception">
            This exception is thrown when an unresolved substitution is encountered.
            It also occurs when the end of the file has been reached while trying
            to read a value.
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Parser.ParseValue(GKarch.Glacier.Internal.Hocon.HoconValue,System.String)">
            <summary>
            Retrieves the next value token from the tokenizer and appends it
            to the supplied element <paramref name="owner"/>.
            </summary>
            <param name="owner">The element to append the next token.</param>
            <exception cref="T:System.Exception">End of file reached while trying to read a value</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Parser.ParseArray(System.String)">
            <summary>
            Retrieves the next array token from the tokenizer.
            </summary>
            <returns>An array of elements retrieved from the token.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.HoconRoot">
            <summary>
            This class represents the root element in a HOCON (Human-Optimized Config Object Notation)
            configuration string.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconRoot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.HoconRoot"/> class.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconRoot.#ctor(GKarch.Glacier.Internal.Hocon.HoconValue,System.Collections.Generic.IEnumerable{GKarch.Glacier.Internal.Hocon.HoconSubstitution})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.HoconRoot"/> class.
            </summary>
            <param name="value">The value to associate with this element.</param>
            <param name="substitutions">An enumeration of substitutions to associate with this element.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconRoot.#ctor(GKarch.Glacier.Internal.Hocon.HoconValue)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.HoconRoot"/> class.
            </summary>
            <param name="value">The value to associate with this element.</param>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.HoconRoot.Value">
            <summary>
            Retrieves the value associated with this element.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.HoconRoot.Substitutions">
            <summary>
            Retrieves an enumeration of substitutions associated with this element.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.HoconSubstitution">
            <summary>
            This class represents a substitution element in a HOCON (Human-Optimized Config Object Notation)
            configuration string.
            <code>
            akka {  
              defaultInstances = 10
              deployment{
                /user/time{
                  nr-of-instances = $defaultInstances
                }
              }
            }
            </code>
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconSubstitution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.HoconSubstitution"/> class.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconSubstitution.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.HoconSubstitution" /> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.HoconSubstitution.Path">
            <summary>
                The full path to the value which should substitute this instance.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.HoconSubstitution.ResolvedValue">
            <summary>
                The evaluated value from the Path property
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconSubstitution.IsString">
            <summary>
            Determines whether this element is a string.
            </summary>
            <returns><c>true</c> if this element is a string; otherwise <c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconSubstitution.GetString">
            <summary>
            Retrieves the string representation of this element.
            </summary>
            <returns>The string representation of this element.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconSubstitution.IsArray">
            <summary>
            Determines whether this element is an array.
            </summary>
            <returns><c>true</c> if this element is aan array; otherwise <c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconSubstitution.GetArray">
            <summary>
            Retrieves a list of elements associated with this element.
            </summary>
            <returns>A list of elements associated with this element.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconSubstitution.IsObject">
            <summary>
            Determines whether this element is a HOCON object.
            </summary>
            <returns><c>true</c> if this element is a HOCON object; otherwise <c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconSubstitution.GetObject">
            <summary>
            Retrieves the HOCON object representation of this element.
            </summary>
            <returns>The HOCON object representation of this element.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.TokenType">
            <summary>
            This enumeration defines the different types of tokens found within
            a HOCON (Human-Optimized Config Object Notation) configuration string.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.Comment">
            <summary>
            This token type represents a comment.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.Key">
            <summary>
            This token type represents the key portion of a key-value pair.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.LiteralValue">
            <summary>
            This token type represents the value portion of a key-value pair.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.Assign">
            <summary>
            This token type represents the assignment operator, <c>=</c> or <c>:</c> .
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.ObjectStart">
            <summary>
            This token type represents the beginning of an object, <c>{</c> .
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.ObjectEnd">
            <summary>
            This token type represents the end of an object, <c>}</c> .
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.Dot">
            <summary>
            This token type represents a namespace separator, <c>.</c> .
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.EoF">
            <summary>
            This token type represents the end of the configuration string.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.ArrayStart">
            <summary>
            This token type represents the beginning of an array, <c>[</c> .
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.ArrayEnd">
            <summary>
            This token type represents the end of an array, <c>]</c> .
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.Comma">
            <summary>
            This token type represents the separator in an array, <c>,</c> .
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Hocon.TokenType.Substitute">
            <summary>
            This token type represents a replacement variable, <c>$foo</c> .
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.Token">
            <summary>
            This class represents a token within a HOCON (Human-Optimized Config Object Notation)
            configuration string.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Token.#ctor(GKarch.Glacier.Internal.Hocon.TokenType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.Token"/> class.
            </summary>
            <param name="type">The type of token to associate with.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Token.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.Token"/> class.
            </summary>
            <param name="value">The string literal value to associate with this token.</param>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.Token.Value">
            <summary>
            The value associated with this token. If this token is
            a <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.LiteralValue"/>, then this property
            holds the string literal.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.Token.Type">
            <summary>
            The type that represents this token.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Token.Key(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a key token with a given <paramref name="key"/>.
            </summary>
            <param name="key">The key to associate with this token.</param>
            <returns>A key token with the given key.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Token.Substitution(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a substitution token with a given <paramref name="path"/>.
            </summary>
            <param name="path">The path to associate with this token.</param>
            <returns>A substitution token with the given path.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Token.LiteralValue(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a string literal token with a given <paramref name="value"/>.
            </summary>
            <param name="value">The value to associate with this token.</param>
            <returns>A string literal token with the given value.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.Tokenizer">
            <summary>
            This class contains methods used to tokenize a string.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Tokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.Tokenizer"/> class.
            </summary>
            <param name="text">The string that contains the text to tokenize.</param>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.Tokenizer.EoF">
            <summary>
            A value indicating whether the tokenizer has reached the end of the string.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Tokenizer.Matches(System.String)">
            <summary>
            Determines whether the given pattern matches the value at the current
            position of the tokenizer.
            </summary>
            <param name="pattern">The string that contains the characters to match.</param>
            <returns><c>true</c> if the pattern matches, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Tokenizer.Take(System.Int32)">
            <summary>
            Retrieves a string of the given length from the current position of the tokenizer.
            </summary>
            <param name="length">The length of the string to return.</param>
            <returns>
            The string of the given length. If the length exceeds where the
            current index is located, then null is returned.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Tokenizer.Matches(System.String[])">
            <summary>
            Determines whether any of the given patterns match the value at the current
            position of the tokenizer.
            </summary>
            <param name="patterns">The string array that contains the characters to match.</param>
            <returns><c>true</c> if any one of the patterns match, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Tokenizer.Peek">
            <summary>
            Retrieves the next character in the tokenizer without advancing its position.
            </summary>
            <returns>The character at the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Tokenizer.Take">
            <summary>
            Retrieves the next character in the tokenizer.
            </summary>
            <returns>The character at the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.Tokenizer.PullWhitespace">
            <summary>
            Advances the tokenizer to the next non-whitespace character.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.HoconTokenizer">
            <summary>
            This class contains methods used to tokenize HOCON (Human-Optimized Config Object Notation)
            configuration strings.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.HoconTokenizer"/> class.
            </summary>
            <param name="text">The string that contains the text to tokenize.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullWhitespaceAndComments">
            <summary>
            Advances the tokenizer to the next non-whitespace, non-comment token.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullRestOfLine">
            <summary>
            Retrieves the current line from where the current token
            is located in the string.
            </summary>
            <returns>The current line from where the current token is located.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullNext">
            <summary>
            Retrieves the next token from the string.
            </summary>
            <returns>The next token contained in the string.</returns>
            <exception cref="T:System.FormatException">
            This exception is thrown when an unknown token is encountered.
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullArrayEnd">
            <summary>
            Retrieves a <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ArrayEnd"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ArrayEnd"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsArrayEnd">
            <summary>
            Determines whether the current token matches an <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ArrayEnd"/> token.
            </summary>
            <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsArrayStart">
            <summary>
            Determines whether the current token matches an <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ArrayStart"/> token.
            </summary>
            <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullArrayStart">
            <summary>
            Retrieves a <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ArrayStart"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ArrayStart"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullDot">
            <summary>
            Retrieves a <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Dot"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Dot"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullComma">
            <summary>
            Retrieves a <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Comma"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Comma"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullStartOfObject">
            <summary>
            Retrieves a <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ObjectStart"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ObjectStart"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullObjectEnd">
            <summary>
            Retrieves a <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ObjectEnd"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ObjectEnd"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullAssignment">
            <summary>
            Retrieves a <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Assign"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Assign"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsComma">
            <summary>
            Determines whether the current token matches an <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Comma"/> token.
            </summary>
            <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsDot">
            <summary>
            Determines whether the current token matches an <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Dot"/> token.
            </summary>
            <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsObjectStart">
            <summary>
            Determines whether the current token matches an <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ObjectStart"/> token.
            </summary>
            <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsObjectEnd">
            <summary>
            Determines whether the current token matches an <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.ObjectEnd"/> token.
            </summary>
            <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsAssignment">
            <summary>
            Determines whether the current token matches an <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Assign"/> token.
            </summary>
            <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsStartOfQuotedText">
            <summary>
            Determines whether the current token matches the start of a quoted string.
            </summary>
            <returns><c>true</c> if token matches; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsStartOfTripleQuotedText">
            <summary>
            Determines whether the current token matches the start of a triple quoted string.
            </summary>
            <returns><c>true</c> if token matches; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullComment">
            <summary>
            Retrieves a <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Comment"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Comment"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullUnquotedKey">
            <summary>
            Retrieves an unquoted <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Key"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Key"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsUnquotedKey">
            <summary>
            Determines whether the current token is an unquoted key.
            </summary>
            <returns><c>true</c> if token is an unquoted key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsUnquotedKeyStart">
            <summary>
            Determines whether the current token is the start of an unquoted key.
            </summary>
            <returns><c>true</c> if token is the start of an unquoted key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullTripleQuotedText">
            <summary>
            Retrieves a triple quoted <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.LiteralValue"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.LiteralValue"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullQuotedText">
            <summary>
            Retrieves a quoted <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.LiteralValue"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.LiteralValue"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullQuotedKey">
            <summary>
            Retrieves a quoted <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Key"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Key"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullValue">
            <summary>
            Retrieves a value token from the tokenizer's current position.
            </summary>
            <returns>A value token from the tokenizer's current position.</returns>
            <exception cref="T:System.FormatException">
            Expected value: Null literal, Array, Quoted Text, Unquoted Text,
                Triple quoted Text, Object or End of array
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsSubstitutionStart">
            <summary>
            Determines whether the current token is the start of a substitution.
            </summary>
            <returns><c>true</c> if token is the start of a substitution; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullSubstitution">
            <summary>
            Retrieves a <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Substitute"/> token from the tokenizer's current position.
            </summary>
            <returns>A <see cref="F:GKarch.Glacier.Internal.Hocon.TokenType.Substitute"/> token from the tokenizer's current position.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsSpaceOrTab">
            <summary>
            Determines whether the current token is a space or a tab.
            </summary>
            <returns><c>true</c> if token is the start of a space or a tab; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsStartSimpleValue">
            <summary>
            Determines whether the current token is the start of an unquoted string literal.
            </summary>
            <returns><c>true</c> if token is the start of an unquoted string literal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullSpaceOrTab">
            <summary>
            Retrieves the current token, including whitespace and tabs, as a string literal token.
            </summary>
            <returns>A token that contains the string literal value.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.PullSimpleValue">
            <summary>
            Retrieves the current token as a string literal token.
            </summary>
            <returns>A token that contains the string literal value.</returns>
            <exception cref="T:System.FormatException">
            This exception is thrown when the tokenizer cannot find
            a string literal value from the current token.
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconTokenizer.IsValue">
            <summary>
            Determines whether the current token is a value.
            </summary>
            <returns><c>true</c> if the current token is a value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.HoconValue">
            <summary>
            This class represents the root type for a HOCON (Human-Optimized Config Object Notation)
            configuration object.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/> class.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.HoconValue.IsEmpty">
            <summary>
            Returns true if this HOCON value doesn't contain any elements
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Hocon.HoconValue.Values">
            <summary>
            The list of elements inside this HOCON value
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.AtKey(System.String)">
            <summary>
            Wraps this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/> into a new <see cref="T:GKarch.Glacier.Internal.Hocon.Config"/> object at the specified key.
            </summary>
            <param name="key">The key designated to be the new root element.</param>
            <returns>A <see cref="T:GKarch.Glacier.Internal.Hocon.Config"/> with the given key as the root element.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetObject">
            <summary>
            Retrieves the <see cref="T:GKarch.Glacier.Internal.Hocon.HoconObject"/> from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>The <see cref="T:GKarch.Glacier.Internal.Hocon.HoconObject"/> that represents this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.IsObject">
            <summary>
            Determines if this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/> is a <see cref="T:GKarch.Glacier.Internal.Hocon.HoconObject"/>.
            </summary>
            <returns><c>true</c> if this value is a <see cref="T:GKarch.Glacier.Internal.Hocon.HoconObject"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.AppendValue(GKarch.Glacier.Internal.Hocon.IHoconElement)">
            <summary>
            Adds the given element to the list of elements inside this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <param name="value">The element to add to the list.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.Clear">
            <summary>
            Clears the list of elements inside this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.NewValue(GKarch.Glacier.Internal.Hocon.IHoconElement)">
            <summary>
            Creates a fresh list of elements inside this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>
            and adds the given value to the list.
            </summary>
            <param name="value">The element to add to the list.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.IsString">
            <summary>
            Determines whether all the elements inside this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>
            are a string.
            </summary>
            <returns>
              <c>true</c>if all elements inside this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/> are a string; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetChildObject(System.String)">
            <summary>
            Retrieves the child object located at the given key.
            </summary>
            <param name="key">The key used to retrieve the child object.</param>
            <returns>The element at the given key.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetBoolean">
            <summary>
            Retrieves the boolean value from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>The boolean value represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            This exception occurs when the <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/> doesn't
            conform to the standard boolean values: "on", "off", "true", or "false"
            </exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetString">
            <summary>
            Retrieves the string value from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>The string value represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetDecimal">
            <summary>
            Retrieves the decimal value from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>The decimal value represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetFloat">
            <summary>
            Retrieves the float value from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>The float value represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetDouble">
            <summary>
            Retrieves the double value from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>The double value represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetLong">
            <summary>
            Retrieves the long value from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>The long value represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetInt">
            <summary>
            Retrieves the integer value from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>The integer value represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetByte">
            <summary>
            Retrieves the byte value from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>The byte value represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetByteList">
            <summary>
            Retrieves a list of byte values from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>A list of byte values represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetIntList">
            <summary>
            Retrieves a list of integer values from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>A list of integer values represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetLongList">
            <summary>
            Retrieves a list of long values from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>A list of long values represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetBooleanList">
            <summary>
            Retrieves a list of boolean values from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>A list of boolean values represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetFloatList">
            <summary>
            Retrieves a list of float values from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>A list of float values represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetDoubleList">
            <summary>
            Retrieves a list of double values from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>A list of double values represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetDecimalList">
            <summary>
            Retrieves a list of decimal values from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>A list of decimal values represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetStringList">
            <summary>
            Retrieves a list of string values from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>A list of string values represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetArray">
            <summary>
            Retrieves a list of values from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>A list of values represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.IsArray">
            <summary>
            Determines whether this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/> is an array.
            </summary>
            <returns>
              <c>true</c> if this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/> is an array; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetTimeSpan(System.Boolean)">
            <summary>
            Retrieves the time span value from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <param name="allowInfinite">A flag used to set infinite durations.</param>
            <returns>The time span value represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.GetByteSize">
            <summary>
            Retrieves the long value, optionally suffixed with a 'b', from this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>The long value represented by this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.ToString">
            <summary>
            Returns a HOCON string representation of this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <returns>A HOCON string representation of this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.HoconValue.ToString(System.Int32)">
            <summary>
            Returns a HOCON string representation of this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.
            </summary>
            <param name="indent">The number of spaces to indent the string.</param>
            <returns>A HOCON string representation of this <see cref="T:GKarch.Glacier.Internal.Hocon.HoconValue"/>.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.IMightBeAHoconObject">
            <summary>
            Marker interface to make it easier to retrieve HOCON
            (Human-Optimized Config Object Notation) objects for
            substitutions.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.IMightBeAHoconObject.IsObject">
            <summary>
            Determines whether this element is a HOCON object.
            </summary>
            <returns><c>true</c> if this element is a HOCON object; otherwise <c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.IMightBeAHoconObject.GetObject">
            <summary>
            Retrieves the HOCON object representation of this element.
            </summary>
            <returns>The HOCON object representation of this element.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Hocon.IHoconElement">
            <summary>
            This interface defines the contract needed to implement
            a HOCON (Human-Optimized Config Object Notation) element.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.IHoconElement.IsString">
            <summary>
            Determines whether this element is a string.
            </summary>
            <returns><c>true</c> if this element is a string; otherwise <c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.IHoconElement.GetString">
            <summary>
            Retrieves the string representation of this element.
            </summary>
            <returns>The string representation of this element.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.IHoconElement.IsArray">
            <summary>
            Determines whether this element is an array.
            </summary>
            <returns><c>true</c> if this element is aan array; otherwise <c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Hocon.IHoconElement.GetArray">
            <summary>
            Retrieves a list of elements associated with this element.
            </summary>
            <returns>A list of elements associated with this element.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.ExceptionExtensions.MustBeRethrown(System.Exception)">
            <summary>
            Determines whether the exception must be rethrown.
            </summary>
            <param name="exception">The exception.</param>
            <returns>True if the exception must be rethrown, false otherwise.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger">
            <summary>
            Abstract class providing a standard implementation of simple loggers.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.Name">
            <summary>
            The key of the logger.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.ShowLevel">
            <summary>
            Include the current log level in the log message.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.ShowDateTime">
            <summary>
            Include the current time in the log message.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.ShowLogName">
            <summary>
            Include the instance key in the log message.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.CurrentLogLevel">
            <summary>
            The current logging threshold. Messages recieved that are beneath this threshold will not be logged.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.DateTimeFormat">
            <summary>
            The date and time format to use in the log message.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.HasDateTimeFormat">
            <summary>
            Determines Whether <see cref="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.DateTimeFormat"/> is set.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.#ctor(System.String,GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates and initializes a the simple logger.
            </summary>
            <param name="logName">The key, usually type key of the calling class, of the logger.</param>
            <param name="logLevel">The current logging threshold. Messages recieved that are beneath this threshold will not be logged.</param>
            <param name="showlevel">Include level in the log message.</param>
            <param name="showDateTime">Include the current time in the log message.</param>
            <param name="showLogName">Include the instance key in the log message.</param>
            <param name="dateTimeFormat">The date and time format to use in the log message.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.FormatOutput(System.Text.StringBuilder,GKarch.Glacier.Internal.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Appends the formatted message to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="stringBuilder">the <see cref="T:System.Text.StringBuilder"/> that receives the formatted message.</param>
            <param name="level"></param>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.IsLevelEnabled(GKarch.Glacier.Internal.Logging.LogLevel)">
            <summary>
            Determines if the given log level is currently enabled.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.IsTraceEnabled">
            <summary>
            Returns <see langword="true" /> if the current <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.IsDebugEnabled">
            <summary>
            Returns <see langword="true" /> if the current <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.IsInfoEnabled">
            <summary>
            Returns <see langword="true" /> if the current <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info" />. If it is, only messages with a <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> of
            <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info" />, <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn" />, <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error" />, and 
            <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.IsWarnEnabled">
            <summary>
            Returns <see langword="true" /> if the current <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn" />. If it is, only messages with a <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> of
            <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn" />, <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error" />, and <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal" /> 
            will be sent to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.IsErrorEnabled">
            <summary>
            Returns <see langword="true" /> if the current <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error" />. If it is, only messages with a <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> of
            <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error" /> and <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLogger.IsFatalEnabled">
            <summary>
            Returns <see langword="true" /> if the current <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal" />. If it is, only messages with a <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> of
            <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.IVariablesContext">
            <summary>
            A context for logger variables
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.IVariablesContext.Set(System.String,System.Object)">
            <summary>
            Sets the value of a new or existing variable within the global context
            </summary>
            <param name="key">The key of the variable that is to be added</param>
            <param name="value">The value to add</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.IVariablesContext.Get(System.String)">
            <summary>
            Gets the value of a variable within the global context
            </summary>
            <param name="key">The key of the variable to get</param>
            <returns>The value or null if not found</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.IVariablesContext.Contains(System.String)">
            <summary>
            Checks if a variable is set within the global context
            </summary>
            <param name="key">The key of the variable to check for</param>
            <returns>True if the variable is set</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.IVariablesContext.Remove(System.String)">
            <summary>
            Removes a variable from the global context by key
            </summary>
            <param name="key">The key of the variable to remove</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.IVariablesContext.Clear">
            <summary>
            Clears the global context variables
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.NoOpVariablesContext">
            <summary>
            A null-functionality implementation of <see cref="T:GKarch.Glacier.Internal.Logging.IVariablesContext" />
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpVariablesContext.Set(System.String,System.Object)">
            <summary>
            Sets the value of a new or existing variable within the global context
            </summary>
            <param name="key">The key of the variable that is to be added</param>
            <param name="value">The value to add</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpVariablesContext.Get(System.String)">
            <summary>
            Gets the value of a variable within the global context
            </summary>
            <param name="key">The key of the variable to get</param>
            <returns>The value or null if not found</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpVariablesContext.Contains(System.String)">
            <summary>
            Checks if a variable is set within the global context
            </summary>
            <param name="key">The key of the variable to check for</param>
            <returns>True if the variable is set</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpVariablesContext.Remove(System.String)">
            <summary>
            Removes a variable from the global context by key
            </summary>
            <param name="key">The key of the variable to remove</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpVariablesContext.Clear">
            <summary>
            Clears the global context variables
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter">
            <summary>
            An implementation of <see cref="T:GKarch.Glacier.Internal.Logging.ILoggerFactoryAdapter"/> that caches loggers handed out by this factory.
            </summary>
            <remarks>
            Implementors just need to override <see cref="M:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)"/>.
            </remarks>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter.#ctor">
            <summary>
            Creates a new instance, the logger cache being case-sensitive.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter.#ctor(System.Boolean)">
            <summary>
            Creates a new instance, the logger cache being <paramref key="caseSensitiveLoggerCache"/>.
            </summary>
            <param name="caseSensitiveLoggerCache"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache">
            <summary>
            Purges all loggers from cache
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)">
            <summary>
            Create the specified named logger instance
            </summary>
            <remarks>
            Derived factories need to implement this method to create the
            actual logger instance.
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by <see cref="T:System.Type" />.
            </summary>
            <param name="type">Usually the <see cref="T:System.Type" /> of the current class.</param>
            <returns>
            An ILog instance either obtained from the internal cache or created by a call to <see cref="M:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)"/>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)">
            <summary>
            Get a ILog instance by key.
            </summary>
            <param name="key">Usually a <see cref="T:System.Type" />'s Name or FullName property.</param>
            <returns>
            An ILog instance either obtained from the internal cache or created by a call to <see cref="M:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)"/>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter.GetLoggerInternal(System.String)">
            <summary>
            Get or create a ILog instance by key.
            </summary>
            <param name="key">Usually a <see cref="T:System.Type" />'s Name or FullName property.</param>
            <returns>
            An ILog instance either obtained from the internal cache or created by a call to <see cref="M:GKarch.Glacier.Internal.Logging.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)"/>.
            </returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.AbstractLogger">
            <summary>
            Provides base implementation suitable for almost all logger adapters
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.AbstractLogger.FormatMessageCallbackFormattedMessage">
            <summary>
            Format message on demand.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.FormatMessageCallbackFormattedMessage.#ctor(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.AbstractLogger.FormatMessageCallbackFormattedMessage"/> class.
            </summary>
            <param name="formatMessageCallback">The format message callback.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.FormatMessageCallbackFormattedMessage.#ctor(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.AbstractLogger.FormatMessageCallbackFormattedMessage"/> class.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="formatMessageCallback">The format message callback.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.FormatMessageCallbackFormattedMessage.ToString">
            <summary>
            Calls <see cref="F:GKarch.Glacier.Internal.Logging.AbstractLogger.FormatMessageCallbackFormattedMessage.formatMessageCallback"/> and returns result.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.AbstractLogger.StringFormatFormattedMessage">
            <summary>
            Format string on demand.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.StringFormatFormattedMessage.#ctor(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.AbstractLogger.StringFormatFormattedMessage"/> class.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.StringFormatFormattedMessage.ToString">
            <summary>
            Runs <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> on supplied arguemnts.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.AbstractLogger.WriteHandler">
            <summary>
            Represents a method responsible for writing a message to the log system.
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Logging.AbstractLogger.Write">
            <summary>
            Holds the method for writing a message to the log system.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.#ctor">
            <summary>
            Creates a new logger instance using <see cref="M:GKarch.Glacier.Internal.Logging.AbstractLogger.WriteInternal(GKarch.Glacier.Internal.Logging.LogLevel,System.Object,System.Exception)"/> for 
            writing log events to the underlying log system.
            </summary>
            <seealso cref="M:GKarch.Glacier.Internal.Logging.AbstractLogger.GetWriteHandler"/>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.GetWriteHandler">
            <summary>
            Override this method to use a different method than <see cref="M:GKarch.Glacier.Internal.Logging.AbstractLogger.WriteInternal(GKarch.Glacier.Internal.Logging.LogLevel,System.Object,System.Exception)"/> 
            for writing log events to the underlying log system.
            </summary>
            <remarks>
            Usually you don't need to override thise method. The default implementation returns
            <c>null</c> to indicate that the default handler <see cref="M:GKarch.Glacier.Internal.Logging.AbstractLogger.WriteInternal(GKarch.Glacier.Internal.Logging.LogLevel,System.Object,System.Exception)"/> should be 
            used.
            </remarks>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractLogger.IsTraceEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractLogger.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractLogger.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractLogger.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractLogger.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractLogger.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
            <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.WriteInternal(GKarch.Glacier.Internal.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Actually sends the message to the underlying log system.
            </summary>
            <param name="level">the level of this log event.</param>
            <param name="message">the message to log</param>
            <param name="exception">the exception to log (may be null)</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Trace(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Trace(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.TraceFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Trace(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Trace(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Trace(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Trace(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Debug(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level including
            the stack Debug of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Debug(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Debug(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Debug(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Debug(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Info(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level including
            the stack Info of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Info(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Info(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Info(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Info(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Warn(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level including
            the stack Warn of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Warnrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Warnrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Warn(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Warn(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Warn(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Warn(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Error(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level including
            the stack Error of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Errorrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Errorrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Error(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Error(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Error(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Error(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Fatal(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level including
            the stack Fatal of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Fatalrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Fatalrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Fatal(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Fatal(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Fatal(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractLogger.Fatal(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractLogger.GlobalVariablesContext">
            <summary>
            Returns the global context for variables
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractLogger.ThreadVariablesContext">
            <summary>
            Returns the thread-specific context for variables
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter">
            <summary>
            Base factory implementation for creating simple <see cref="T:GKarch.Glacier.Internal.Logging.ILog" /> instances.
            </summary>
            <remarks>Default settings are LogLevel.All, showDateTime = true, showLogName = true, and no DateTimeFormat.
            The keys in the NameValueCollection to configure this adapter are the following
            <list type="bullet">
                <item>level</item>
                <item>showDateTime</item>
                <item>showLogName</item>
                <item>dateTimeFormat</item>
            </list>
            <example>
            Here is an example how to implement your own logging adapter:
            <code>
            public class ConsoleOutLogger : AbstractSimpleLogger
            {
              public ConsoleOutLogger(string logName, LogLevel logLevel, bool showLevel, bool showDateTime, 
            bool showLogName, string dateTimeFormat)
                  : base(logName, logLevel, showLevel, showDateTime, showLogName, dateTimeFormat)
              {
              }
            
              protected override void WriteInternal(LogLevel level, object message, Exception e)
              {
                  // Use a StringBuilder for better performance
                  StringBuilder sb = new StringBuilder();
                  FormatOutput(sb, level, message, e);
            
                  // Print to the appropriate destination
                  Console.Out.WriteLine(sb.ToString());
              }
            }
            
            public class ConsoleOutLoggerFactoryAdapter : AbstractSimpleLoggerFactoryAdapter
            {
              public ConsoleOutLoggerFactoryAdapter(NameValueCollection properties)
                  : base(properties)
              { }
            
              protected override ILog CreateLogger(string key, LogLevel level, bool showLevel, bool 
            showDateTime, bool showLogName, string dateTimeFormat)
              {
                  ILog log = new ConsoleOutLogger(key, level, showLevel, showDateTime, showLogName, 
            dateTimeFormat);
                  return log;
              }
            }
            </code>
            </example>
            </remarks>
            <author>Gilles Bayon</author>
            <author>Mark Pollack</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter.Level">
            <summary>
            The default <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel"/> to use when creating new <see cref="T:GKarch.Glacier.Internal.Logging.ILog"/> instances.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter.ShowLevel">
            <summary>
            The default setting to use when creating new <see cref="T:GKarch.Glacier.Internal.Logging.ILog"/> instances.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter.ShowDateTime">
            <summary>
            The default setting to use when creating new <see cref="T:GKarch.Glacier.Internal.Logging.ILog"/> instances.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter.ShowLogName">
            <summary>
            The default setting to use when creating new <see cref="T:GKarch.Glacier.Internal.Logging.ILog"/> instances.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter.DateTimeFormat">
            <summary>
            The default setting to use when creating new <see cref="T:GKarch.Glacier.Internal.Logging.ILog"/> instances.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter"/> class.
            </summary>
            <remarks>
            Looks for level, showDateTime, showLogName, dateTimeFormat items from 
            <paramref key="properties" /> for use when the GetLogger methods are called.
            <c>System.Configuration.ConfigurationManager</c> for more information on how to use the 
            standard .NET application configuraiton file (App.config/Web.config) 
            to configure this adapter.
            </remarks>
            <param name="properties">The key value collection, typically specified by the user in 
            a configuration section named common/logging.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter.#ctor(GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter"/> class with 
            default settings for the loggers created by this factory.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter.CreateLogger(System.String)">
            <summary>
            Create the specified logger instance
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter.CreateLogger(System.String,GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Derived factories need to implement this method to create the
            actual logger instance.
            </summary>
            <returns>a new logger instance. Must never be <c>null</c>!</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.ArgUtils">
            <summary>
            Various utility methods for using during factory and logger instance configuration
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.ArgUtils.ParseHandler`1">
            <summary>
            A delegate converting a string representation into the target type
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ArgUtils.#cctor">
            <summary>
            Initialize all members before any of this class' methods can be accessed (avoids beforeFieldInit)
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ArgUtils.RegisterTypeParser``1(GKarch.Glacier.Internal.Logging.ArgUtils.ParseHandler{``0})">
            <summary>
            Adds the parser to the list of known type parsers.
            </summary>
            <remarks>
            .NET intrinsic types are pre-registerd: short, int, long, float, double, decimal, bool
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ArgUtils.GetValue(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Retrieves the named value from the specified <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="values">may be null</param>
            <param name="key">the value's key</param>
            <returns>if <paramref key="values"/> is not null, the value returned by values[key]. <c>null</c> otherwise.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ArgUtils.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Retrieves the named value from the specified <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="values">may be null</param>
            <param name="key">the value's key</param>
            <param name="defaultValue">the default value, if not found</param>
            <returns>if <paramref key="values"/> is not null, the value returned by values[key]. <c>null</c> otherwise.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ArgUtils.TryParseEnum``1(``0,System.String)">
            <summary>
            Tries parsing <paramref key="stringValue"/> into an enum of the type of <paramref key="defaultValue"/>.
            </summary>
            <param name="defaultValue">the default value to return if parsing fails</param>
            <param name="stringValue">the string value to parse</param>
            <returns>the successfully parsed value, <paramref key="defaultValue"/> otherwise.</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ArgUtils.TryParse``1(``0,System.String)">
            <summary>
            Tries parsing <paramref key="stringValue"/> into the specified return type.
            </summary>
            <param name="defaultValue">the default value to return if parsing fails</param>
            <param name="stringValue">the string value to parse</param>
            <returns>the successfully parsed value, <paramref key="defaultValue"/> otherwise.</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.ConsoleOutLogger">
            <summary>
            Sends log messages to <see cref="P:System.Console.Out" />.
            </summary>
            <author>Gilles Bayon</author>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ConsoleOutLogger.#ctor(System.String,GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates and initializes a logger that writes messages to <see cref="P:System.Console.Out" />.
            </summary>
            <param name="logName">The name, usually type name of the calling class, of the logger.</param>
            <param name="logLevel">The current logging threshold. Messages recieved that are beneath this threshold will not be logged.</param>
            <param name="showLevel">Include the current log level in the log message.</param>
            <param name="showDateTime">Include the current time in the log message.</param>
            <param name="showLogName">Include the instance name in the log message.</param>
            <param name="dateTimeFormat">The date and time format to use in the log message.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ConsoleOutLogger.#ctor(System.String,GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates and initializes a logger that writes messages to <see cref="P:System.Console.Out" />.
            </summary>
            <param name="logName">The name, usually type name of the calling class, of the logger.</param>
            <param name="logLevel">The current logging threshold. Messages recieved that are beneath this threshold will not be logged.</param>
            <param name="showLevel">Include the current log level in the log message.</param>
            <param name="showDateTime">Include the current time in the log message.</param>
            <param name="showLogName">Include the instance name in the log message.</param>
            <param name="dateTimeFormat">The date and time format to use in the log message.</param>
            <param name="useColor">Use color when writing the log message.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ConsoleOutLogger.WriteInternal(GKarch.Glacier.Internal.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Do the actual logging by constructing the log message using a <see cref="T:System.Text.StringBuilder" /> then
            sending the output to <see cref="P:System.Console.Out" />.
            </summary>
            <param name="level">The <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> of the message.</param>
            <param name="message">The log message.</param>
            <param name="e">An optional <see cref="T:System.Exception" /> associated with the message.</param>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.ConsoleOutLoggerFactoryAdapter">
            <summary>
            Factory for creating <see cref="T:GKarch.Glacier.Internal.Logging.ILog" /> instances that write data to <see cref="P:System.Console.Out" />.
            </summary>
            <remarks>
            <example>
            Below is an example how to configure this adapter:
            <code>
            &lt;configuration&gt;
            
              &lt;configSections&gt;
                &lt;sectionGroup name=&quot;common&quot;&gt;
                  &lt;section name=&quot;logging&quot;
                           type=&quot;Common.Logging.ConfigurationSectionHandler, Common.Logging&quot;
                           requirePermission=&quot;false&quot; /&gt;
                &lt;/sectionGroup&gt;
              &lt;/configSections&gt;
            
              &lt;common&gt;
                &lt;logging&gt;
                  &lt;factoryAdapter type=&quot;Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter, Common.Logging&quot;&gt;
                    &lt;arg key=&quot;level&quot; value=&quot;ALL&quot; /&gt;
                  &lt;/factoryAdapter&gt;
                &lt;/logging&gt;
              &lt;/common&gt;
            
            &lt;/configuration&gt;
            </code>
            </example>
            </remarks>
            <seealso cref="T:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter"/>
            <seealso cref="!:LogManager.Adapter"/>
            <seealso cref="!:ConfigurationSectionHandler"/>
            <author>Gilles Bayon</author>
            <author>Mark Pollack</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ConsoleOutLoggerFactoryAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.ConsoleOutLoggerFactoryAdapter"/> class using default 
            settings.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ConsoleOutLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.ConsoleOutLoggerFactoryAdapter"/> class.
            </summary>
            <remarks>
            Looks for level, showDateTime, showLogName, dateTimeFormat items from 
            <paramref name="properties" /> for use when the GetLogger methods are called.
            <see cref="!:ConfigurationSectionHandler"/> for more information on how to use the 
            standard .NET application configuraiton file (App.config/Web.config) 
            to configure this adapter.
            </remarks>
            <param name="properties">The name value collection, typically specified by the user in 
            a configuration section named common/logging.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ConsoleOutLoggerFactoryAdapter.#ctor(GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter"/> class with 
            default settings for the loggers created by this factory.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ConsoleOutLoggerFactoryAdapter.#ctor(GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter"/> class with 
            default settings for the loggers created by this factory.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ConsoleOutLoggerFactoryAdapter.CreateLogger(System.String,GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GKarch.Glacier.Internal.Logging.ConsoleOutLogger"/> instance.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.DebugLoggerFactoryAdapter">
            <summary>
            Factory for creating <see cref="T:GKarch.Glacier.Internal.Logging.ILog" /> instances that write data using <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.
            </summary>
            <remarks>
            <example>
            Below is an example how to configure this adapter:
            <code>
            &lt;configuration&gt;
            
              &lt;configSections&gt;
                &lt;sectionGroup key=&quot;common&quot;&gt;
                  &lt;section key=&quot;logging&quot;
                           type=&quot;Common.Logging.ConfigurationSectionHandler, Common.Logging&quot;
                           requirePermission=&quot;false&quot; /&gt;
                &lt;/sectionGroup&gt;
              &lt;/configSections&gt;
            
              &lt;common&gt;
                &lt;logging&gt;
                  &lt;factoryAdapter type=&quot;Common.Logging.Simple.DebugLoggerFactoryAdapter, Common.Logging&quot;&gt;
                    &lt;arg key=&quot;level&quot; value=&quot;ALL&quot; /&gt;
                  &lt;/factoryAdapter&gt;
                &lt;/logging&gt;
              &lt;/common&gt;
            
            &lt;/configuration&gt;
            </code>
            </example>
            </remarks>
            <seealso cref="T:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter"/>
            <author>Gilles Bayon</author>
            <author>Mark Pollack</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.DebugLoggerFactoryAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.DebugLoggerFactoryAdapter"/> class using default 
            settings.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.DebugLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.DebugLoggerFactoryAdapter"/> class.
            </summary>
            <remarks>
            Looks for level, showDateTime, showLogName, dateTimeFormat items from 
            <paramref key="properties" /> for use when the GetLogger methods are called.
            <see cref="!:System.Configuration.ConfigurationManager"/> for more information on how to use the 
            standard .NET application configuraiton file (App.config/Web.config) 
            to configure this adapter.
            </remarks>
            <param name="properties">The key value collection, typically specified by the user in 
            a configuration section named common/logging.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.DebugLoggerFactoryAdapter.#ctor(GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter"/> class with 
            default settings for the loggers created by this factory.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.DebugLoggerFactoryAdapter.CreateLogger(System.String,GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GKarch.Glacier.Internal.Logging.DebugOutLogger"/> instance.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.DebugOutLogger">
            <summary>
            Sends log messages to <see cref="T:System.Diagnostics.Debug" />.
            </summary>
            <author>Gilles Bayon</author>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.DebugOutLogger.#ctor(System.String,GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates and initializes a logger that writes messages to <see cref="T:System.Diagnostics.Debug" />.
            </summary>
            <param name="logName">The key, usually type key of the calling class, of the logger.</param>
            <param name="logLevel">The current logging threshold. Messages recieved that are beneath this threshold will not be logged.</param>
            <param name="showLevel">Include the current log level in the log message.</param>
            <param name="showDateTime">Include the current time in the log message.</param>
            <param name="showLogName">Include the instance key in the log message.</param>
            <param name="dateTimeFormat">The date and time format to use in the log message.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.DebugOutLogger.WriteInternal(GKarch.Glacier.Internal.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Do the actual logging by constructing the log message using a <see cref="T:System.Text.StringBuilder" /> then
            sending the output to <see cref="P:System.Console.Out" />.
            </summary>
            <param name="level">The <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel" /> of the message.</param>
            <param name="message">The log message.</param>
            <param name="e">An optional <see cref="T:System.Exception" /> associated with the message.</param>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.ExceptionFormatter">
            <summary>
            Exception Formatter
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.FormatMessageHandler">
            <summary>
             The type of method that is passed into e.g. <see cref="M:GKarch.Glacier.Internal.Logging.ILog.Debug(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})"/> 
             and allows the callback method to "submit" it's message to the underlying output system.
            </summary>
            <param name="format">the format argument as in <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">the argument list as in <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <seealso cref="T:GKarch.Glacier.Internal.Logging.ILog"/>
             <author>Erich Eichinger</author>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.ILog">
            <summary>
            A simple logging interface abstracting logging APIs. 
            </summary>
            <remarks>
            <para>
            Implementations should defer calling a message's <see cref="M:System.Object.ToString"/> until the message really needs
            to be logged to avoid performance penalties.
            </para>
            <para>
            Each <see cref="T:GKarch.Glacier.Internal.Logging.ILog"/> log method offers to pass in a <see cref="T:System.Action`1"/> instead of the actual message.
            Using this style has the advantage to defer possibly expensive message argument evaluation and formatting (and formatting arguments!) until the message gets
            actually logged. If the message is not logged at all (e.g. due to <see cref="T:GKarch.Glacier.Internal.Logging.LogLevel"/> settings), 
            you won't have to pay the peformance penalty of creating the message.
            </para>
            </remarks>
            <example>
            The example below demonstrates using callback style for creating the message, where the call to the 
            <see cref="M:System.Random.NextDouble"/> and the underlying <see cref="M:System.String.Format(System.String,System.Object[])"/> only happens, if level <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> is enabled:
            <code>
            Log.Debug( m=&gt;m(&quot;result is {0}&quot;, random.NextDouble()) );
            Log.Debug(delegate(m) { m(&quot;result is {0}&quot;, random.NextDouble()); });
            </code>
            </example>
            <seealso cref="T:System.Action`1"/>
            <author>Mark Pollack</author>
            <author>Bruno Baia</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Trace(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Trace(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.TraceFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Trace(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Trace(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Trace(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Trace(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Debug(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.DebugFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Debug(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Debug(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Debug(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Debug(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Info(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.InfoFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Info(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Info(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Info(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Info(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Warn(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Warn(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Warn(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Warn(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Warn(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Error(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Error(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Error(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Error(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Error(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Fatal(System.Object)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.FatalFormat(System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Fatal(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Fatal(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Fatal(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILog.Fatal(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Log a message with the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level using a callback to obtain the message
            </summary>
            <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.ILog.IsTraceEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace"/> level.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.ILog.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug"/> level.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.ILog.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Error"/> level.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.ILog.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal"/> level.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.ILog.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Info"/> level.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.ILog.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn"/> level.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.ILog.GlobalVariablesContext">
            <summary>
            Returns the global context for variables
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.ILog.ThreadVariablesContext">
            <summary>
            Returns the thread-specific context for variables
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.ILoggerFactoryAdapter">
            <summary>
            LoggerFactoryAdapter interface is used internally by LogManager
            Only developers wishing to write new Common.Logging adapters need to
            worry about this interface.
            </summary>
            <author>Gilles Bayon</author>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by type.
            </summary>
            <param name="type">The type to use for the logger</param>
            <returns></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.ILoggerFactoryAdapter.GetLogger(System.String)">
            <summary>
            Get a ILog instance by key.
            </summary>
            <param name="key">The key of the logger</param>
            <returns></returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.LogLevel">
            <summary>
            The 7 possible logging levels
            </summary>
            <author>Gilles Bayon</author>
        </member>
        <member name="F:GKarch.Glacier.Internal.Logging.LogLevel.All">
            <summary>
            All logging levels
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Logging.LogLevel.Trace">
            <summary>
            A trace logging level
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Logging.LogLevel.Debug">
            <summary>
            A debug logging level
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Logging.LogLevel.Info">
            <summary>
            A info logging level
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Logging.LogLevel.Warn">
            <summary>
            A warn logging level
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Logging.LogLevel.Error">
            <summary>
            An error logging level
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Logging.LogLevel.Fatal">
            <summary>
            A fatal logging level
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.Logging.LogLevel.Off">
            <summary>
            Do not log anything.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.NoOpLogger">
            <summary>
            Silently ignores all log messages.
            </summary>
            <author>Gilles Bayon</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.NoOpLogger.IsTraceEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.NoOpLogger.IsDebugEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.NoOpLogger.IsInfoEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.NoOpLogger.IsWarnEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.NoOpLogger.IsErrorEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.NoOpLogger.IsFatalEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Trace(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Trace(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.TraceFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.TraceFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Trace(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Trace(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Trace(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Trace(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Debug(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Debug(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.DebugFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Debug(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Debug(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Debug(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Debug(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Debug.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Info(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Info(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.InfoFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Info(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Info(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Info(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Info(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Info.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Warn(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Warn(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.WarnFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Warnrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Warnrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Warn(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Warn(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Warn(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Warn(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Warn.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Error(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Error(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.ErrorFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Errorrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Errorrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Error(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Error(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Error(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Error(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Error.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Fatal(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.FatalFormat(System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Fatalrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting Fatalrmation.</param>
            <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])"/> </param>
            <param name="exception">The exception to log.</param>
            <param name="args">the list of message format arguments</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Fatal(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Fatal(System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Fatal(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler})">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLogger.Fatal(System.IFormatProvider,System.Action{GKarch.Glacier.Internal.Logging.FormatMessageHandler},System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
            <param name="exception">The exception to log, including its stack Fatal.</param>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.NoOpLogger.GlobalVariablesContext">
            <summary>
            Returns the global context for variables
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.NoOpLogger.ThreadVariablesContext">
            <summary>
            Returns the thread-specific context for variables
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.NoOpLoggerFactoryAdapter">
            <summary>
            Factory for creating <see cref="T:GKarch.Glacier.Internal.Logging.ILog" /> instances that silently ignores
            logging requests.
            </summary>
            <remarks>
            This logger adapter is the default used by Common.Logging if unconfigured. Using this logger adapter is the most efficient
            way to suppress any logging output.
            <example>
            Below is an example how to configure this adapter:
            <code>
            &lt;configuration&gt;
            
              &lt;configSections&gt;
                &lt;sectionGroup key=&quot;common&quot;&gt;
                  &lt;section key=&quot;logging&quot;
                           type=&quot;Common.Logging.ConfigurationSectionHandler, Common.Logging&quot;
                           requirePermission=&quot;false&quot; /&gt;
                &lt;/sectionGroup&gt;
              &lt;/configSections&gt;
            
              &lt;common&gt;
                &lt;logging&gt;
                  &lt;factoryAdapter type=&quot;Common.Logging.Simple.NoOpLoggerFactoryAdapter, Common.Logging&quot;&gt;
                    &lt;arg key=&quot;level&quot; value=&quot;ALL&quot; /&gt;
                  &lt;/factoryAdapter&gt;
                &lt;/logging&gt;
              &lt;/common&gt;
            
            &lt;/configuration&gt;
            </code>
            </example>
            </remarks>
            <author>Gilles Bayon</author>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLoggerFactoryAdapter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLoggerFactoryAdapter.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by type 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.NoOpLoggerFactoryAdapter.GKarch#Glacier#Internal#Logging#ILoggerFactoryAdapter#GetLogger(System.String)">
            <summary>
            Get a ILog instance by type key 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.TraceLogger">
            <summary>
            Logger sending everything to the trace output stream using <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
            <remarks>
            Beware not to use <see cref="!:CommonLoggingTraceListener"/> in combination with this logger as 
            this would result in an endless loop for obvious reasons!
            </remarks>
            <seealso cref="!:LogManager.Adapter"/>
            <seealso cref="!:ConfigurationSectionHandler"/>
            <author>Gilles Bayon</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.TraceLogger.FormatOutputMessage">
            <summary>
            Used to defer message formatting until it is really needed.
            </summary>
            <remarks>
            This class also improves performance when multiple 
            <see cref="T:System.Diagnostics.TraceListener"/>s are configured.
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.TraceLogger.#ctor(System.Boolean,System.String,GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new TraceLogger instance.
            </summary>
            <param name="useTraceSource">whether to use <see cref="T:System.Diagnostics.TraceSource"/> or <see cref="T:System.Diagnostics.Trace"/> for logging.</param>
            <param name="logName">the name of this logger</param>
            <param name="logLevel">the default log level to use</param>
            <param name="showLevel">Include the current log level in the log message.</param>
            <param name="showDateTime">Include the current time in the log message.</param>
            <param name="showLogName">Include the instance name in the log message.</param>
            <param name="dateTimeFormat">The date and time format to use in the log message.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.TraceLogger.IsLevelEnabled(GKarch.Glacier.Internal.Logging.LogLevel)">
            <summary>
            Determines if the given log level is currently enabled.
            checks <see cref="P:System.Diagnostics.TraceSource.Switch"/> if <see cref="P:GKarch.Glacier.Internal.Logging.TraceLoggerFactoryAdapter.UseTraceSource"/> is true.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.TraceLogger.WriteInternal(GKarch.Glacier.Internal.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Do the actual logging.
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.TraceLogger.OnDeserialization(System.Object)">
            <summary>
            Called after deserialization completed.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Logging.TraceLoggerFactoryAdapter">
            <summary>
            Factory for creating <see cref="T:GKarch.Glacier.Internal.Logging.ILog" /> instances that send 
            everything to the <see cref="T:System.Diagnostics.Trace"/> output stream.
            </summary>
            <remarks>
            Beware not to use <see cref="!:CommonLoggingTraceListener"/> in combination with this logger factory
            as this would result in an endless loop for obvious reasons!
            <example>
            Below is an example how to configure this adapter:
            <code>
            &lt;configuration&gt;
            
              &lt;configSections&gt;
                &lt;sectionGroup name=&quot;common&quot;&gt;
                  &lt;section name=&quot;logging&quot;
                           type=&quot;Common.Logging.ConfigurationSectionHandler, Common.Logging&quot;
                           requirePermission=&quot;false&quot; /&gt;
                &lt;/sectionGroup&gt;
              &lt;/configSections&gt;
            
              &lt;common&gt;
                &lt;logging&gt;
                  &lt;factoryAdapter type=&quot;Common.Logging.Simple.TraceLoggerFactoryAdapter, Common.Logging&quot;&gt;
                    &lt;arg key=&quot;level&quot; value=&quot;ALL&quot; /&gt;
                  &lt;/factoryAdapter&gt;
                &lt;/logging&gt;
              &lt;/common&gt;
            
            &lt;/configuration&gt;
            </code>
            </example>
            </remarks>
            <seealso cref="T:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter"/>
            <seealso cref="!:LogManager.Adapter"/>
            <seealso cref="!:ConfigurationSectionHandler"/>
            <author>Gilles Bayon</author>
            <author>Mark Pollack</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="P:GKarch.Glacier.Internal.Logging.TraceLoggerFactoryAdapter.UseTraceSource">
            <summary>
            Whether to use <see cref="T:System.Diagnostics.Trace"/>.<c>TraceXXXX(string,object[])</c> methods for logging
            or <see cref="T:System.Diagnostics.TraceSource"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.TraceLoggerFactoryAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.TraceLoggerFactoryAdapter"/> class using default settings.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.TraceLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.TraceLoggerFactoryAdapter"/> class.
            </summary>
            <remarks>
            Looks for level, showDateTime, showLogName, dateTimeFormat items from 
            <paramref name="properties" /> for use when the GetLogger methods are called.
            <see cref="!:ConfigurationSectionHandler"/> for more information on how to use the 
            standard .NET application configuration file (App.config/Web.config) 
            to configure this adapter.
            </remarks>
            <param name="properties">The name value collection, typically specified by the user in 
            a configuration section named common/logging.</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.TraceLoggerFactoryAdapter.#ctor(GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GKarch.Glacier.Internal.Logging.AbstractSimpleLoggerFactoryAdapter"/> class with 
            default settings for the loggers created by this factory.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Logging.TraceLoggerFactoryAdapter.CreateLogger(System.String,GKarch.Glacier.Internal.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:GKarch.Glacier.Internal.Logging.TraceLogger"/> instance.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.PathResolver">
            <summary>
            路径解析工具
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.PathResolver.ResolveAppRelativePath(System.String)">
            <summary>
            解析相对于应用程序的路径
            </summary>
            <param name="path">相对路径</param>
            <returns>解析后的绝对路径</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.PathResolver.ResolvePath(System.String)">
            <summary>
            解析路径
            </summary>
            <param name="path">路径</param>
            <returns>解析后的绝对路径</returns>
            <remarks>如果<paramref name="path" />为相对路径（或以'~/'或'~\'起始），则解析为相对于应用程序的路径；如果为绝对路径，则直接返回。</remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.PathResolver.ResolvePathList(System.String)">
            <summary>
            解析路径列表
            </summary>
            <param name="path">路径列表，可使用',', ';', '|'分割</param>
            <returns>解析后的路径</returns>
            <remarks>指定的<paramref name="path"/>将被分割并去掉空白，使用<see cref="M:GKarch.Glacier.Internal.PathResolver.ResolvePath(System.String)"/>解析并去掉重复结果。</remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotGte(System.Object,System.Object)">
            <summary>
            value '{0}' is not greater than or equal to limit '{1}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotGt(System.Object,System.Object)">
            <summary>
            value '{0}' is not greater than limit '{1}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotInRange_ToHigh(System.Object,System.Object)">
            <summary>
            value '{0}' is &gt; max '{1}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotInRange_ToLow(System.Object,System.Object)">
            <summary>
            value '{0}' is &lt; min '{1}'.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsEmptyCollection">
            <summary>
            Empty collection is not allowed.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsEmptyGuid">
            <summary>
            Empty Guid is not allowed.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotNull">
            <summary>
            Value can not be null.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.ExpressionUtils_GetRightMostMember_NoMemberFound(System.Object)">
            <summary>
            No MemberExpression found in expression: '{0}'.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotNullOrWhiteSpace">
            <summary>
            The string can't be left empty, null or consist of only whitespaces.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotFalse">
            <summary>
            Expected an expression that evaluates to false.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotTrue">
            <summary>
            Expected an expression that evaluates to true.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotOfType(System.Object)">
            <summary>
            The param is not of expected type: '{0}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotLt(System.Object,System.Object)">
            <summary>
            value '{0}' is not lower than limit '{1}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotLte(System.Object,System.Object)">
            <summary>
            value '{0}' is not lower than or equal to limit '{1}'.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotNullOrEmpty">
            <summary>
            The string can't be null or empty.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotInRange_ToLong(System.Object,System.Object,System.Object)">
            <summary>
            The string is too long. Must be between '{0}' and  '{1}'. Must be between '{0}' and '{1}' but was '{2}' characters long.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotInRange_ToShort(System.Object,System.Object,System.Object)">
            <summary>
            The string is not long enough. Must be between '{0}' and '{1}' but was '{2}' characters long.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_NoMatch(System.Object,System.Object)">
            <summary>
            value '{0}' does not match '{1}'
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotClass(System.Object)">
            <summary>
            The param was expected to be a class, but was type of: '{0}'.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotClass_WasNull">
            <summary>
            The param was expected to be a class, but was NULL.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_Is_Failed(System.Object,System.Object)">
            <summary>
            Value '{0}' is not '{1}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNot_Failed(System.Object,System.Object)">
            <summary>
            Value '{0}' is '{1}', which was not expected.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_SizeIs_Wrong(System.Object,System.Object)">
            <summary>
            Expected size '{0}' but found '{1}'.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_InvalidOperationException(System.Object)">
            <summary>
            Could not perform operation due to invalid state of '{0}'.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_AnyPredicateYieldedNone">
            <summary>
            The predicate did not match any elements.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_ContainsKey(System.Object)">
            <summary>
            Key '{0}' does not exist.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.CoreStrings.EnsureExtensions_IsNotGuid(System.Object)">
            <summary>
            Value '{0}' is not a valid GUID.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Ensure.That``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            Defines what to validate. Please read remarks.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">Resolves the value to validate and if no <paramref name="name"/> is specified, also the name of the param by looking at the calling path in the expression, to get which member that is being validated.</param>
            <param name="name">If specified, used as the name instead of being extracted from the expression.</param>
            <returns></returns>
            <remarks>
            When using the <paramref name="expression"/> for value resolving, a compile
            is done to get the value of the argument. This leads to worse performance compared to overloads
            where you pass the value explicitly.
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.Ensure.That``1(``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Defines what to validate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="expression">Used to extract the calling path, to get which member that is being validated. Used as param name.</param>
            <returns></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.AggregateExceptionValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.AggregateExceptionValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.DateTimeExtensions.ToDateTimeOffset(System.DateTime)">
            <summary>
            Converts an existing <see cref="T:System.DateTimeOffset"/> to a <see cref="T:System.DateTimeKind"/> but normalizes the <see cref="T:System.DateTime"/> 
            so that comparisons of converted <see cref="T:System.DateTime"/> instances retain the UTC/local agnostic behavior.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.DateTimeOffsetValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.DateTimeOffsetValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.DefaultValueFormatter.CanHandle(System.Object)">
            <summary>
              Determines whether this instance can handle the specified value.
            </summary>
            <param name = "value">The value.</param>
            <returns>
              <c>true</c> if this instance can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.DefaultValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.EnumerableValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.EnumerableValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.ExceptionValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.ExceptionValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.ExpressionValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.ExpressionValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Formatting.Formatter">
            <summary>
            Provides services for formatting an object being used in an assertion in a human readable format.
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Formatting.Formatter.Formatters">
            <summary>
            A list of objects responsible for formatting the objects represented by placeholders.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.Formatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a human-readable representation of a particular object.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="nestedPropertyLevel">
                The level of nesting for the supplied value. This is used for indenting the format string for objects that have
                no <see cref="M:System.Object.ToString"/> override.
            </param>
            <param name="useLineBreaks">
            Indicates whether the formatter should use line breaks when the specific <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> supports it.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.Formatter.RemoveFormatter(GKarch.Glacier.Internal.Formatting.IValueFormatter)">
            <summary>
            Removes a custom formatter that was previously added though <see cref="M:GKarch.Glacier.Internal.Formatting.Formatter.AddFormatter(GKarch.Glacier.Internal.Formatting.IValueFormatter)"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.Formatter.AddFormatter(GKarch.Glacier.Internal.Formatting.IValueFormatter)">
            <summary>
            Ensures a custom formatter is included in the chain, just before the default formatter is executed.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.Formatter.AddPlatformFormatters(GKarch.Glacier.Internal.Formatting.IValueFormatter[])">
            <summary>
            Allows a platform-specific assembly to add formatters without affecting the ones added by callers of <see cref="M:GKarch.Glacier.Internal.Formatting.Formatter.AddFormatter(GKarch.Glacier.Internal.Formatting.IValueFormatter)"/>.
            </summary>
            <param name="formatters"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.GuidValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.GuidValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.IValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.IValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.NullValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.NullValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.NumericValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.NumericValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.PropertyInfoFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.PropertyInfoFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.StringExtensions.Escape(System.String)">
            <summary>
            Replaces all characters that might conflict with formatting placeholders and newlines with their escaped counterparts.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.StringValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.StringValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.TimeSpanValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:GKarch.Glacier.Internal.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Formatting.TimeSpanValueFormatter.ToString(System.Object,System.Boolean,System.Collections.Generic.IList{System.Object},System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="useLineBreaks"> </param>
            <param name="processedObjects">
            A collection of objects that 
            </param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.NameGenerator">
            <summary>
            random name generator
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.NameGenerator.GetRandomName(System.Int32)">
            <summary>
            Gets the random name.
            </summary>
            <param name="retry">The retry count.</param>
            <returns>The generated random name</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.SystemClock">
            <summary>
            Time related delegates used to improve testability of the code
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.SystemClock.Sleep">
            <summary>
            Allows the setting of a custom Thread.Sleep implementation for testing.
            By default this will be a call to <see cref="M:Thread.Sleep"/>
            </summary>
        </member>
        <member name="F:GKarch.Glacier.Internal.SystemClock.UtcNowFunc">
            <summary>
            Allows the setting of a custom DateTime.UtcNow implementation for testing.
            By default this will be a call to <see cref="P:System.DateTime.UtcNow"/>
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.SystemClock.Reset">
            <summary>
            Resets the custom implementations to their defaults. 
            Should be called during test teardowns.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Tries.ITrie`2">
            <summary>
            Trie树接口
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TKeyBit">键位元类型</typeparam>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.ITrie`2.Root">
            <summary>
            根节点
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.ITrie`2.Count">
            <summary>
            所有节点总数
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.ITrie`2.Values">
            <summary>
            所有节点的值
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.ITrie`2.Item(`0)">
            <summary>
            按指定的键获取或设置值
            </summary>
            <param name="key">键</param>
            <returns>指定键对应的值，若对应键的节点没有值，则返回<c>null</c></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定键在Trie树上不存在则抛出异常S</exception>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrie`2.Add``1(`0,``0)">
            <summary>
            添加一个键值对，如果键已经存在，则其值将被覆盖
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrie`2.Contains``1(`0,``0)">
            <summary>
            判断Trie树是否包含指定键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>如果该键值对存在则为<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrie`2.ContainsKey(`0)">
            <summary>
            判断指定键是否存在并有值
            </summary>
            <param name="key">键</param>
            <returns>如果该键存在并且有值则为<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrie`2.ContainsKey(`0,System.Boolean)">
            <summary>
            判断指定键是否存在并有值
            </summary>
            <param name="key">键</param>
            <param name="requireValue">是否需要该键上有值在认为是存在</param>
            <returns>满足给定条件则为<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrie`2.TryGetValue``1(`0,``0@)">
            <summary>
            尝试按指定键取值
            </summary>
            <param name="key">键</param>
            <param name="value">值（输出），如果键不存在或者没有值则为<c>null</c></param>
            <returns>如果该键值对存在则为<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrie`2.Find(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            按指定键位元序列查找节点
            </summary>
            <param name="bs">键位元序列</param>
            <returns>如果该键位元序列有节点对应，则为对应节点，否则为<c>null</c></returns>
            <remarks>
            该方法便于在没有<strong>TKey</strong>类型，但是有<strong>TKeyBit</strong>类型时使用
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrie`2.Find(`0)">
            <summary>
            按指定键查找节点
            </summary>
            <param name="key">键</param>
            <returns>如果该键有节点对应，则为对应节点，否则为<c>null</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrie`2.Find(`0,System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            根据映射方法，按指定键查找节点
            </summary>
            <param name="key">键</param>
            <param name="keyMapper">键与键位元序列的映射方法</param>
            <returns>如果该键有节点对应，则为对应节点，否则为<c>null</c></returns>
            <remarks>
            该方法提供Trie树的自定义映射查询功能，例如仅需要匹配部分键的时候。
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrie`2.MoveToNode``1(`0)">
            <summary>
            按指定键查找节点，如不存在则新建一个与指定键对应的节点，并返回该节点
            </summary>
            <param name="key">键</param>
            <returns>节点</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrie`2.Remove(`0)">
            <summary>
            移除指定键对应的节点，以及其多余（不包含值）的祖先节点
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrie`2.Clear">
            <summary>
            清空Trie树
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Internal.Tries.ITrieNode`1">
            <summary>
            Trie树节点接口，见<see cref="T:GKarch.Glacier.Internal.Tries.ITrie`2"/>
            </summary>
            <typeparam name="TKeyBit">键位元类型</typeparam>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.ITrieNode`1.CountAll">
            <summary>
            获取该节点的子代节点总数
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.ITrieNode`1.Descendants">
            <summary>
            获取该节点的所有子代节点
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.ITrieNode`1.AllValues">
            <summary>
            获取该节点及其子代节点的值
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrieNode`1.Trim(System.Int32)">
            <summary>
            删除该节点指定深度下的所有子代节点
            </summary>
            <param name="depth">深度，0表示直接子节点</param>
            <exception cref="T:System.ArgumentException">如果节点深度小于0，则抛出异常</exception>
        </member>
        <member name="T:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1">
            <summary>
            Trie树节点
            </summary>
            <typeparam name="TKeyBit">键位元类型</typeparam>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.Parent">
            <summary>
            获取该节点的父节点
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.Children">
            <summary>
            该节点的直接子节点
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.KeyBit">
            <summary>
            获取该节点关联的键位元
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.HasValue">
            <summary>
            判断该节点是否有值
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.Value">
            <summary>
            获取或设置该节点的值
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.Values">
            <summary>
            获取该节点及其子代节点的值
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.Count">
            <summary>
            获取该节点的直接子节点的数量
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.IsRoot">
            <summary>
            判断该节点是否为根节点
            </summary>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.IsLeaf">
            <summary>
            判断该节点是否为叶子节点（不含子节点）
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.ClearValue">
            <summary>
            清除该节点的值。
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.GetChild(`0)">
            <summary>
            尝试按指定键获取相关联的子节点。
            </summary>
            <param name="key">键</param>
            <returns>如果与该键对应的子节点存在，则为该子节点，否则为<c>null</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.RemoveChild(`0)">
            <summary>
            删除与指定键对应的子节点及其子代节点。
            </summary>
            <param name="key">键</param>
            <returns>如果与该键对应的子节点存在，则为<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.MoveToChild``1(`0)">
            <summary>
            按指定键查找对应的子节点，如不存在则增加一个与指定键对应的子节点，并返回该子节点。
            </summary>
            <param name="key">键</param>
            <returns>如果指定键已存在，则返回其对应的子节点，否则返回新建的子节点</returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.Trim">
            <summary>
            删除所有子节点。
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.Clear">
            <summary>
            清空该节点存储的值，并删除所有子节点。
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.AddChild(`0,GKarch.Glacier.Internal.Tries.ITrieNode{`0})">
            <summary>
            添加子节点，将其从原父节点下移动到该节点下
            </summary>
            <param name="key">子节点的新键</param>
            <param name="child">需添加的子节点</param>
            <returns>如果与该键对应的子节点已存在，则为<c>false</c>，否则为<c>true</c></returns>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.IBaseTrieNode`1.LinkChild(`0,GKarch.Glacier.Internal.Tries.ITrieNode{`0})">
            <summary>
            链接子节点，将其添加到该节点下
            </summary>
            <param name="key">子节点的新键</param>
            <param name="child">需添加的子节点</param>
            <returns>如果与该键对应的子节点已存在，则为<c>false</c>，否则为<c>true</c></returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Tries.ITrieNode`2">
            <summary>
            Trie树节点
            </summary>
            <typeparam name="TKeyBit">键位元类型</typeparam>
            <typeparam name="TValue">值的类型</typeparam>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.ITrieNode`2.Value">
            <summary>
            获取或设置该节点的值
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.ITrieNode`2.MoveToChild``1(`0)">
            <summary>
            按指定键查找对应的子节点，如不存在则增加一个与指定键对应的子节点，并返回该子节点。
            </summary>
            <typeparam name="TVal">子节点值的类型</typeparam>
            <param name="key">键</param>
            <returns>如果指定键已存在，则返回其对应的子节点，否则返回新建的子节点</returns>
        </member>
        <member name="T:GKarch.Glacier.Internal.Tries.NodeBase`2">
            <summary>
            节点基类实现
            </summary>
            <typeparam name="TKeyBit">键位元的类型</typeparam>
            <typeparam name="TValue">值的类型</typeparam>
        </member>
        <member name="T:GKarch.Glacier.Internal.Tries.Trie">
            <summary>
            Trie树
            </summary>
            <remarks>
            键与键位元均为<see cref="T:System.String"/>类型，键位元使用'<c>.</c>'分隔
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.Trie.#ctor">
            <summary>
            创建Trie树，使用默认根节点
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.Trie.#ctor(System.Func{System.String,GKarch.Glacier.Internal.Tries.ITrieNode{System.String}})">
            <summary>
            创建Trie树，根节点由指定的方法创建
            </summary>
            <param name="createRootFunc"></param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.Trie.CreateRoot(System.String)">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.Trie.Dispose(System.Boolean)">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.Trie.Dispose">
            <inheridoc />
        </member>
        <member name="T:GKarch.Glacier.Internal.Tries.TrieBase`2">
            <summary>
            Trie树的抽象基类
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
            <typeparam name="TKeyBit">键位元的类型</typeparam>
            <remarks>
            键由用户提供的方法转化为一组键位元
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{`1,System.Boolean}}})">
            <summary>
            创建一个Trie树，包含一个空的根节点
            </summary>
            <param name="keyMapper">键映射器</param>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.CreateRoot(`1)">
            <summary>
            创建根节点的方法
            </summary>
            <param name="key">键位元</param>
            <returns>根节点</returns>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieBase`2.Root">
            <inheridoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieBase`2.Count">
            <inheridoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieBase`2.Values">
            <inheridoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieBase`2.Item(`0)">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.Add``1(`0,``0)">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.TryGetValue``1(`0,``0@)">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.Contains``1(`0,``0)">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.ContainsKey(`0)">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.ContainsKey(`0,System.Boolean)">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.Find(`0)">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.Find(`0,System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.Find(System.Collections.Generic.IEnumerable{`1})">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.MoveToNode``1(`0)">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.Remove(`0)">
            <inheridoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieBase`2.Clear">
            <inheridoc />
        </member>
        <member name="T:GKarch.Glacier.Internal.Tries.TrieNodeBase`2">
            <summary>
            Node of a Trie
            </summary>
            <typeparam name="TKeyBit">Key Bit Type</typeparam>
            <typeparam name="TValue">Value Type</typeparam>
            <remarks>
            <para>
            Original code taken from <a href="http://code.google.com/p/typocalypse/source/browse/#hg/Trie">Typocolypse</a> but has been heavily rewritten to be much more generic and LINQ friendly
            </para>
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.#ctor(GKarch.Glacier.Internal.Tries.ITrieNode{`0},`0)">
            <summary>
            Create an empty node with no children and null value
            </summary>
            <param name="parent">Parent node of this node</param>
            <param name="key">Key Bit</param>
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.Parent">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.Children">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.KeyBit">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.HasValue">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.Value">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.GKarch#Glacier#Internal#Tries#IBaseTrieNode{TKeyBit}#Value">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.Count">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.Values">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.IsRoot">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.IsLeaf">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.ClearValue">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.GetChild(`0)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.RemoveChild(`0)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.MoveToChild``1(`0)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.GKarch#Glacier#Internal#Tries#ITrieNode{TKeyBit,TValue}#MoveToChild``1(`0)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.Trim">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.Clear">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.CountAll">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.Descendants">
            <inheritdoc />
        </member>
        <member name="P:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.AllValues">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.Trim(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.AddChild(`0,GKarch.Glacier.Internal.Tries.ITrieNode{`0})">
            <inheritdoc />
        </member>
        <member name="M:GKarch.Glacier.Internal.Tries.TrieNodeBase`2.LinkChild(`0,GKarch.Glacier.Internal.Tries.ITrieNode{`0})">
            <inheritdoc />
        </member>
        <member name="T:GKarch.Glacier.Utils.Hashids">
            <summary>
            Hashids implementation. Use hashids when you do not want to expose your database ids to the user.
            </summary>
            <remarks>see http://hashids.org </remarks>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.#ctor">
            <summary>
            Instantiates a new Hashids with the default config.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Instantiates a new Hashids with custom config.
            </summary>
            <param name="salt"></param>
            <param name="minHashLength"></param>
            <param name="alphabet"></param>
            <param name="seps"></param>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.Encode(System.Int64)">
            <summary>
            Encode single number
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.Encode(System.Int64,System.Int64)">
            <summary>
            Encode two numbers
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.Encode(System.Int64,System.Int64,System.Int64)">
            <summary>
            Encode three numbers
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.Encode(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Encode four numbers
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.Encode(System.Int64[])">
            <summary>
            Encode many numbers
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.Encode(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Encode many numbers
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.Encode(System.Collections.Generic.IList{System.Int64},GKarch.Glacier.Utils.Hashids.Shuffler)">
            <summary>
            Encode many numbers using given <paramref name="shuffler"/>.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.DecodeFirst(System.String)">
            <summary>
            Decode the first number from given hash string
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.DecodeFirst(System.String,System.Int64)">
            <summary>
            Decode the first number from given hash string or using <paramref name="defaultValue"/> if cannot find one.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.Decode(System.String)">
            <summary>
            Decode the given hash string as enumerable.
            </summary>
            <remarks>
            It will not check the validity of results.
            If validity is important, using <see cref="M:GKarch.Glacier.Utils.Hashids.DecodeAll(System.String)"/> instead.
            </remarks>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.DecodeAll(System.String)">
            <summary>
            Decode the given hash string to array.
            </summary>
            <remarks>It will check the validity of results by re-encoding and comparing with input hash string.</remarks>
        </member>
        <member name="T:GKarch.Glacier.Utils.Hashids.Config">
            <summary>
            Hold config for a <see cref="T:GKarch.Glacier.Utils.Hashids"/> instance.
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Utils.Hashids.Shuffler">
            <summary>
            Utils for encoding or decoding.
            </summary>
        </member>
        <member name="M:GKarch.Glacier.Utils.Hashids.Shuffler.Reset">
            <summary>
            Reset shuffler to reuse it (avoid recreate buffer)
            </summary>
        </member>
        <member name="T:GKarch.Glacier.Utils.SerialGenerator">
            <summary>
            An unique ID numbers generator.
            </summary>
            <remarks>
            A variant of twitter's snowflake. See https://github.com/twitter/snowflake.
            It supports 'clock moving backwards' with the penalty of conflict.
            </remarks>
        </member>
    </members>
</doc>
